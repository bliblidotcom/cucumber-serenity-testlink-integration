[
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Delete action point in positive scenario",
        "description": "",
        "id": "delete-action-point-in-loyalty-program-feature;delete-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8424930500,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 825315000,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1517200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 313130300,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2248300,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2860133200,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 70489900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 456287900,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 60041900,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2012200,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62594200,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 357571200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1578100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 247303700,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2165600,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 36,
        "name": "Delete purchase action point in positive scenario",
        "description": "",
        "id": "delete-action-point-in-loyalty-program-feature;delete-purchase-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36188700,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1877300,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1694500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3223300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data productCategoryIdList with value",
            "match": {
              "arguments": [
                {
                  "val": "productCategoryIdList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "(TEST-,random(5))"
                ]
              },
              {
                "cells": [
                  "(TEST-,random(5))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20205100,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "request($[\u0027productCategoryIdList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3666500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 266033400,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1635000,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 309160000,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3031500,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2626200,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3411100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 197063300,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1546800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 196778100,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1361100,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 79,
        "name": "Delete action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "delete-action-point-in-loyalty-program-feature;delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12568300,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 178960700,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2691000,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 80,
        "name": "Delete action point when loyaltyProgramCode is not found",
        "description": "",
        "id": "delete-action-point-in-loyalty-program-feature;delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 15344800,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 215618300,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(5)"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1664900,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 81,
        "name": "Delete action point when actionCode is empty",
        "description": "",
        "id": "delete-action-point-in-loyalty-program-feature;delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12287000,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 203450200,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1246400,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Delete action point when actionCode is not found",
        "description": "",
        "id": "delete-action-point-in-loyalty-program-feature;delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13595700,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 274189900,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1663800,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Delete action point in loyalty program feature",
    "description": "",
    "id": "delete-action-point-in-loyalty-program-feature",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/DeleteActionPoint.feature",
    "tags": [
      {
        "name": "@DeleteActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 27
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get all active action point in positive scenario",
        "description": "",
        "id": "get-all-action-point-in-loyalty-program;get-all-active-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 18114800,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2247100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 240713600,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 22569600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to actionPointResponseList",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2057600,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25322900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 78
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15597200,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] all data in \"response($[\u0027actionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 96
                },
                {
                  "val": "boolean(false)",
                  "offset": 120
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GeatAllActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 18,
        "name": "Get all deleted action point in positive scenario",
        "description": "",
        "id": "get-all-action-point-in-loyalty-program;get-all-deleted-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21050500,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2504400,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 513792000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 19522900,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] assign previous response data to actionPointResponseList",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1837100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30703000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 78
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28458000,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] all data in \"response($[\u0027actionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(true)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 96
                },
                {
                  "val": "boolean(true)",
                  "offset": 120
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GeatAllActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 40,
        "name": "Get all action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-all-action-point-in-loyalty-program;get-all-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18347500,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 158035300,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1635800,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GeatAllActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 41,
        "name": "Get all action point when markForDelete is empty",
        "description": "",
        "id": "get-all-action-point-in-loyalty-program;get-all-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 60734200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 235723800,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1697500,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GeatAllActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get all action point in loyalty program",
    "description": "",
    "id": "get-all-action-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/GetAllActionPoint.feature",
    "tags": [
      {
        "name": "@GeatAllActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 48
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get all active purchase action point in positive scenario",
        "description": "",
        "id": "get-all-purchase-action-point-in-loyalty-program;get-all-active-purchase-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13121700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3088300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 178409800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAllPurchaseActionPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAllPurchaseActionPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8980000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to purchaseActionPointResponseList",
            "match": {
              "arguments": [
                {
                  "val": "purchaseActionPointResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1667500,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30745000,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 86
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25975300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] all data in \"response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 104
                },
                {
                  "val": "boolean(false)",
                  "offset": 128
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52687400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] all PurchaseActionResponseList productCategoryId is not empty",
            "match": {
              "location": "ActionPointSteps.xLoyaltyAllPurchaseActionResponseListProductCategoryIdIsNotEmpty()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllPurchaseActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 19,
        "name": "Get all deleted purchase action point in positive scenario",
        "description": "",
        "id": "get-all-purchase-action-point-in-loyalty-program;get-all-deleted-purchase-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20443200,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1482200,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 333180100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAllPurchaseActionPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAllPurchaseActionPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12536700,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] assign previous response data to purchaseActionPointResponseList",
            "match": {
              "arguments": [
                {
                  "val": "purchaseActionPointResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1499900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21911200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response data \"response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 86
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27906300,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] all data in \"response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(true)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027purchaseActionPointResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 104
                },
                {
                  "val": "boolean(true)",
                  "offset": 128
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllPurchaseActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 41,
        "name": "Get all purchase action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-all-purchase-action-point-in-loyalty-program;get-all-purchase-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 14927700,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 179160600,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAllPurchaseActionPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAllPurchaseActionPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1606800,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllPurchaseActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 42,
        "name": "Get all purchase action point when markForDelete is empty",
        "description": "",
        "id": "get-all-purchase-action-point-in-loyalty-program;get-all-purchase-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13120400,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 161741800,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try GET request to \"actionPoint/findAllPurchaseActionPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findAllPurchaseActionPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1945100,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllPurchaseActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get all purchase action point in loyalty program",
    "description": "",
    "id": "get-all-purchase-action-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/GetAllPurchaseActionPoint.feature",
    "tags": [
      {
        "name": "@GetAllPurchaseActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 35
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 55
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get one active action point in positive scenario",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-active-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23808200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1816000,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3555200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data actionCode with value \"REVIEW_PRODUCT\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REVIEW_PRODUCT",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169451100,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1703100,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1339300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15055700,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17261500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])\" should equal with data \"request($[\u0027actionCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027actionCode\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21146300,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16045400,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 89
                },
                {
                  "val": "boolean(false)",
                  "offset": 113
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42244500,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027productCategoryId\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027productCategoryId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 23,
        "name": "Get one deleted action point",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-deleted-action-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19460600,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3917900,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2439800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8563000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3460100,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154971700,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1810400,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 237715600,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1193900,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 163258200,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1800900,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1442100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13856000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14492400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])\" should equal with data \"request($[\u0027actionCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027actionCode\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15749000,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12977400,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])\" should equal with data \"boolean(true)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 89
                },
                {
                  "val": "boolean(true)",
                  "offset": 113
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get one active purchase action point in positive scenario",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-active-purchase-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15680400,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1617500,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2844200,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data actionCode with value \"PURCHASE_CATEGORY_FASHION_PRIA\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "PURCHASE_CATEGORY_FASHION_PRIA",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156575900,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1876400,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1409600,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13282300,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12806700,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])\" should equal with data \"request($[\u0027actionCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027actionCode\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11791200,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13535300,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027productCategoryId\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027productCategoryId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 93
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 78,
        "name": "Get one action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 18838400,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 171945700,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1316200,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 79,
        "name": "Get one action point when loyaltyProgramCode is not found",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12633500,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 142867600,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(5)"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REVIEW_PRODUCT"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1497300,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 80,
        "name": "Get one action point when actionCode is empty",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11735700,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 167276300,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  ""
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1624200,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 81,
        "name": "Get one action point when actionCode is not found",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13394900,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 187984600,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1505300,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Get one action point when markForDelete is empty",
        "description": "",
        "id": "get-one-action-point-in-loyalty-program;get-one-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12288600,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 162596400,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REVIEW_PRODUCT"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1459800,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get one action point in loyalty program",
    "description": "",
    "id": "get-one-action-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/GetOneActionPoint.feature",
    "tags": [
      {
        "name": "@GetOneActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 27
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Revert delete action point in positive scenario",
        "description": "",
        "id": "revert-delete-action-point-in-loyalty-program;revert-delete-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15696000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2193100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2104800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6819700,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2533600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 165552000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1643200,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 175437600,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2261400,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1625300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11235400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 193225200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1529900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 152593600,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1430500,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 161687800,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try PUT request to \"actionPoint/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1405400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 149972500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1510800,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 182553100,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1510600,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Revert delete still active action point",
        "description": "",
        "id": "revert-delete-action-point-in-loyalty-program;revert-delete-still-active-action-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15095500,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 169876900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try PUT request to \"actionPoint/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REVIEW_PRODUCT"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1396700,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Revert delete action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "revert-delete-action-point-in-loyalty-program;revert-delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12506600,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 189145500,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"actionPoint/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1335000,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Revert delete action point when loyaltyProgramCode is not found",
        "description": "",
        "id": "revert-delete-action-point-in-loyalty-program;revert-delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12067100,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146554600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"actionPoint/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(5)"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2124200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Revert delete action point when actionCode is empty",
        "description": "",
        "id": "revert-delete-action-point-in-loyalty-program;revert-delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10795900,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 148394500,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"actionPoint/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1360600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 73,
        "name": "Revert delete action point when actionCode is not found",
        "description": "",
        "id": "revert-delete-action-point-in-loyalty-program;revert-delete-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10428100,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 141791700,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"actionPoint/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "(CODE_,random(6))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1335700,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Revert delete action point in loyalty program",
    "description": "",
    "id": "revert-delete-action-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/RevertDeleteActionPoint.feature",
    "tags": [
      {
        "name": "@RevertDeleteActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 33
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 53
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save point type action point in positive scenario",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-point-type-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13547300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1993600,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2879800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5022300,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1839000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171244600,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1877900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 170046700,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1389100,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1177700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11416800,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12184100,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])\" should equal with data \"request($[\u0027actionCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027actionCode\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13356900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12904500,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 89
                },
                {
                  "val": "boolean(false)",
                  "offset": 113
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13834900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointValue\u0027])\" should equal with data \"floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointValue\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 92
                },
                {
                  "val": "floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointValue\u0027]))",
                  "offset": 116
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9928500,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointLoyaltyValue\u0027])\" should equal with data \"floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointLoyaltyValue\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointLoyaltyValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 99
                },
                {
                  "val": "floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointLoyaltyValue\u0027]))",
                  "offset": 123
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10116800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027expirationPeriodInDays\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027expirationPeriodInDays\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027expirationPeriodInDays\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 98
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027expirationPeriodInDays\u0027])",
                  "offset": 122
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13178400,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027valueType\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027valueType\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027valueType\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027valueType\u0027])",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164206000,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1138900,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 37,
        "name": "Save percent type action point in positive scenario",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-percent-type-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11542600,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2394600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1829700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5234200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "PERCENT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1835500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 155526300,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1134600,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 224284500,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1082000,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1011500,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9755300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10752800,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])\" should equal with data \"request($[\u0027actionCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027actionCode\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11500100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10276200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 89
                },
                {
                  "val": "boolean(false)",
                  "offset": 113
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11541300,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointValue\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027actionPointValue\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 92
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027actionPointValue\u0027])",
                  "offset": 116
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12063800,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointLoyaltyValue\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027actionPointLoyaltyValue\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointLoyaltyValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 99
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027actionPointLoyaltyValue\u0027])",
                  "offset": 123
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15767400,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027expirationPeriodInDays\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027expirationPeriodInDays\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027expirationPeriodInDays\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 98
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027expirationPeriodInDays\u0027])",
                  "offset": 122
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11818900,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027valueType\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027valueType\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027valueType\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027valueType\u0027])",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151541000,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1201300,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Save purchase action point in positive scenario",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-purchase-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11301300,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1725600,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1325900,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2468200,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data productCategoryIdList with value",
            "match": {
              "arguments": [
                {
                  "val": "productCategoryIdList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "(TEST-,random(5))"
                ]
              },
              {
                "cells": [
                  "(TEST-,random(5))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4749100,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "request($[\u0027productCategoryIdList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2014200,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 221475800,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1351000,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 150150400,
              "status": "passed"
            },
            "line": 82,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1477000,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1408300,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12997900,
              "status": "passed"
            },
            "line": 89,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12089900,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])\" should equal with data \"request($[\u0027actionCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027actionCode\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11375200,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9174400,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 89
                },
                {
                  "val": "boolean(false)",
                  "offset": 113
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7477200,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointValue\u0027])\" should equal with data \"floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointValue\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 92
                },
                {
                  "val": "floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointValue\u0027]))",
                  "offset": 116
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11583400,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointLoyaltyValue\u0027])\" should equal with data \"floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointLoyaltyValue\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027actionPointLoyaltyValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 99
                },
                {
                  "val": "floor(request($[\u0027actionPointRequest\u0027][\u0027actionPointLoyaltyValue\u0027]))",
                  "offset": 123
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10249500,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027expirationPeriodInDays\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027expirationPeriodInDays\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027expirationPeriodInDays\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 98
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027expirationPeriodInDays\u0027])",
                  "offset": 122
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11107000,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027valueType\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027valueType\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027valueType\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027valueType\u0027])",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8076200,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027productCategoryId\u0027])\" should equal with data \"request($[\u0027actionPointRequest\u0027][\u0027productCategoryId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027][\u0027productCategoryId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027actionPointRequest\u0027][\u0027productCategoryId\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 189289200,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1635600,
              "status": "passed"
            },
            "line": 102,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 105,
        "name": "Save action point when actionCode is already exists",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-actioncode-is-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23415300,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2087100,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1884300,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7063500,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19285000,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 194569600,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2262500,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 155516900,
              "status": "passed"
            },
            "line": 115,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2271000,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1386100,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12803500,
              "status": "passed"
            },
            "line": 122,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2473800,
              "status": "passed"
            },
            "line": 123,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 199855800,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1532100,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 201920000,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1340300,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 143,
        "name": "Save action point when actionCode is empty",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13011500,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4119600,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2727700,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164742400,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1808000,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 144,
        "name": "Save action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11137200,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3440000,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "",
                  "1",
                  "1",
                  "1",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1515800,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177425500,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1638400,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 145,
        "name": "Save action point when actionPointValue is \u003c\u003d 0",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11799400,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4319000,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "0",
                  "1",
                  "1",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2134200,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 216729200,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 940900,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 146,
        "name": "Save action point when expirationPeriodInDays is \u003c\u003d 0",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12006300,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3358500,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "0",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2266400,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156312900,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1730300,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 147,
        "name": "Save action point when valueType is empty",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10508700,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3375200,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1801800,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 181202200,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1193300,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 148,
        "name": "Save action point when valueType is not valid",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11762200,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4377000,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "random(5)",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2096400,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154889900,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1585700,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 149,
        "name": "Save action point when actionPointLoyaltyValue is empty",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12248200,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3764700,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "",
                  "1",
                  "PERCENT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2262300,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 172882200,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2116500,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 150,
        "name": "Save action point when body is empty",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 14872400,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7513700,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "PERCENT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2485700,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 159973800,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1889500,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 151,
        "name": "Save action point when body is not valid",
        "description": "",
        "id": "save-action-point-data-in-loyalty-program;save-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13729300,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11121900,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "PERCENT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1734700,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135969500,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1618400,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save action point data in loyalty program",
    "description": "",
    "id": "save-action-point-data-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/SaveActionPoint.feature",
    "tags": [
      {
        "name": "@SaveActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 25
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 45
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Update action point in positive scenario",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12853500,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3252000,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1791800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7698900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2742000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161264500,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1667400,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 157388700,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1561200,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1330600,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12930100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3731700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "7",
                  "5",
                  "30",
                  "PERCENT",
                  "null"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2563900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 246560100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1507000,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 182133200,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] action point should be updated",
            "match": {
              "location": "ActionPointSteps.xLoyaltyActionPointResponseShouldBeUpdated()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156141700,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1376100,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 37,
        "name": "Update action point to purchase action point",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-to-purchase-action-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11561400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1796600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data actionCode with value \"(ACTION_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "(ACTION_,random(6))",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2062500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4538700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1961200,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171721900,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try POST request to \"actionPoint/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "actionPoint/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1575600,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 252702700,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"actionPoint/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "actionPoint/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3541100,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] assign previous response data to actionPointResponse",
            "match": {
              "arguments": [
                {
                  "val": "actionPointResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1886300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40756700,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] response data \"response($[\u0027actionPointResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027actionPointResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2889600,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] prepare request data productCategoryIdList with value",
            "match": {
              "arguments": [
                {
                  "val": "productCategoryIdList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "(TEST-,random(5))"
                ]
              },
              {
                "cells": [
                  "(TEST-,random(5))"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5724400,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027actionCode\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "5",
                  "1.5",
                  "14",
                  "POINT",
                  "request($[\u0027productCategoryIdList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2843100,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164700600,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1050300,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166096600,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] action point should be updated",
            "match": {
              "location": "ActionPointSteps.xLoyaltyActionPointResponseShouldBeUpdated()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139488500,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] try DELETE request to \"actionPoint/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "actionPoint/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionPointRequest\u0027][\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1372600,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Update action point when actionCode is empty",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13608400,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4195800,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3406200,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150642900,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1197000,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 83,
        "name": "Update action point when loyaltyProgramCode is empty",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12533900,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4770500,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "",
                  "1",
                  "1",
                  "1",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2063700,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173163100,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1150000,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 84,
        "name": "Update action point when expirationPeriodInDays is \u003c\u003d 0",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10482500,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3680900,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "0",
                  "POINT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1719100,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173250900,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1513300,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 85,
        "name": "Update action point when valueType is empty",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10528700,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3358700,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1897300,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176875400,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1124300,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 86,
        "name": "Update action point when valueType is not valid",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9497200,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2734500,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "random(5)",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1499000,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145013100,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1176000,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 87,
        "name": "Update action point when actionPointLoyaltyValue is empty",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10701700,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2298300,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "",
                  "1",
                  "PERCENT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1033500,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027actionPointRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027actionPointRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152464000,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1054500,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 88,
        "name": "Update action point when body is empty",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10379100,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2799200,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "PERCENT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1095600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143049800,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1314600,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 89,
        "name": "Update action point when body is not valid",
        "description": "",
        "id": "update-action-point-in-loyalty-program;update-action-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10885600,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2890700,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data actionPointRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "actionPointRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actionCode",
                  "loyaltyProgramCode",
                  "actionPointValue",
                  "actionPointLoyaltyValue",
                  "expirationPeriodInDays",
                  "valueType",
                  "productCategoryId"
                ]
              },
              {
                "cells": [
                  "(CODE_,random(6))",
                  "blibli_poin",
                  "1",
                  "1",
                  "1",
                  "PERCENT",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1094400,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 182133500,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try PUT request to \"actionPoint/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "actionPoint/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1267300,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateActionPointFeature"
          },
          {
            "name": "@LoyaltyActionPoint"
          },
          {
            "name": "@TestSuiteId\u003d13286975"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Update action point in loyalty program",
    "description": "",
    "id": "update-action-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/actionpoint/UpdateActionPoint.feature",
    "tags": [
      {
        "name": "@UpdateActionPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyActionPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 27
        }
      },
      {
        "name": "@TestSuiteId\u003d13286975",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Clear all cache in positive scenario",
        "description": "",
        "id": "clear-all-loyalty-cache-from-cache-util;clear-all-cache-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11586700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 135908800,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"cache/flushAll\"",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "cache/flushAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1244900,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@ClearAllCacheFeature"
          },
          {
            "name": "@ClearCacheLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13286977"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Clear all loyalty cache from cache util",
    "description": "",
    "id": "clear-all-loyalty-cache-from-cache-util",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/cacheutil/ClearAllCache.feature",
    "tags": [
      {
        "name": "@ClearAllCacheFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@ClearCacheLoyalty",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 23
        }
      },
      {
        "name": "@TestSuiteId\u003d13286977",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 42
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Calculate acquired points for member level in positive scenario",
        "description": "",
        "id": "calculate-acquired-points-for-member-level-in-loyalty-program;calculate-acquired-points-for-member-level-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15100100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2587900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7204700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 185336900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] try GET request to \"calc/levelPts\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "calc/levelPts",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5584400,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] assign previous response data to calculateResponse",
            "match": {
              "arguments": [
                {
                  "val": "calculateResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1217600,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11308700,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027calculateResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027calculateResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 70
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2612984900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 981111600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] current member calculated loyalty points should be correct",
            "match": {
              "location": "CalculatedPointsSteps.xLoyaltyCurrentMemberCalculatedLoyaltyPointsShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1016164200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] current member expiring points should be correct",
            "match": {
              "location": "CalculatedPointsSteps.xLoyaltyCurrentMemberExpiringPointsShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18275400,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] current member expiring date should be correct",
            "match": {
              "location": "CalculatedPointsSteps.xLoyaltyCurrentMemberExpiringDateShouldBeCorrect()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculateLoyaltyPoint"
          },
          {
            "name": "@LoyaltyCalcultePts"
          },
          {
            "name": "@TestSuiteId\u003d13287019"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 31,
        "name": "Calculate acquired points for member level when loyaltyProgramCode is empty",
        "description": "",
        "id": "calculate-acquired-points-for-member-level-in-loyalty-program;calculate-acquired-points-for-member-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 76978400,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 158539600,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try GET request to \"calc/levelPts\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "calc/levelPts",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1123100,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculateLoyaltyPoint"
          },
          {
            "name": "@LoyaltyCalcultePts"
          },
          {
            "name": "@TestSuiteId\u003d13287019"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 32,
        "name": "Calculate acquired points for member level when loyaltyProgramCode is not found",
        "description": "",
        "id": "calculate-acquired-points-for-member-level-in-loyalty-program;calculate-acquired-points-for-member-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11288800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 189845100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try GET request to \"calc/levelPts\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "calc/levelPts",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1577800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculateLoyaltyPoint"
          },
          {
            "name": "@LoyaltyCalcultePts"
          },
          {
            "name": "@TestSuiteId\u003d13287019"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 33,
        "name": "Calculate acquired points for member level when memberId is empty",
        "description": "",
        "id": "calculate-acquired-points-for-member-level-in-loyalty-program;calculate-acquired-points-for-member-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12982800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 182334700,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try GET request to \"calc/levelPts\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "calc/levelPts",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1722800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculateLoyaltyPoint"
          },
          {
            "name": "@LoyaltyCalcultePts"
          },
          {
            "name": "@TestSuiteId\u003d13287019"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 34,
        "name": "Calculate acquired points for member level when memberId is not found",
        "description": "",
        "id": "calculate-acquired-points-for-member-level-in-loyalty-program;calculate-acquired-points-for-member-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11728900,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 250845500,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try GET request to \"calc/levelPts\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "calc/levelPts",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1485400,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculateLoyaltyPoint"
          },
          {
            "name": "@LoyaltyCalcultePts"
          },
          {
            "name": "@TestSuiteId\u003d13287019"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Calculate acquired points for member level in loyalty program",
    "description": "",
    "id": "calculate-acquired-points-for-member-level-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/calculation/CalculateAcquiredPointsForMemberLevel.feature",
    "tags": [
      {
        "name": "@CalculateLoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCalcultePts",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 24
        }
      },
      {
        "name": "@TestSuiteId\u003d13287019",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 44
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Delete coupon in positive scenario",
        "description": "",
        "id": "delete-coupon-in-loyalty-program;delete-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12989800,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1675400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7670700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2233800,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154321000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1133700,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 189039700,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4692600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1269100,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15777700,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150164800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1111800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 155566200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1438900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 32,
        "name": "Delete already deleted coupon",
        "description": "",
        "id": "delete-coupon-in-loyalty-program;delete-already-deleted-coupon",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13771300,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2354600,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5196500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1743700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161000400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 992300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 151979300,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1591600,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1537400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12185600,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157118100,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1183100,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 182922400,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1278300,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166282200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1265800,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Delete coupon when couponId is empty",
        "description": "",
        "id": "delete-coupon-in-loyalty-program;delete-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12746200,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 172917900,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1294700,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Delete coupon when couponId is not found",
        "description": "",
        "id": "delete-coupon-in-loyalty-program;delete-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11142600,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 139304100,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1173600,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Delete coupon in loyalty program",
    "description": "",
    "id": "delete-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/DeleteCoupon.feature",
    "tags": [
      {
        "name": "@DeleteCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get all active loyalty coupon in positive scenario",
        "description": "",
        "id": "get-all-loyalty-coupon-in-loyalty-program;get-all-active-loyalty-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11394000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 164767900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3859100,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1081100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22530400,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14524300,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])\" should equal with data \"COUPONS\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 90
                },
                {
                  "val": "COUPONS",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12354200,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllLoyaltyCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 18,
        "name": "All loyalty coupon should have couponName",
        "description": "",
        "id": "get-all-loyalty-coupon-in-loyalty-program;all-loyalty-coupon-should-have-couponname",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10482700,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 157067500,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1300300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 899300,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10451300,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11761200,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])\" should equal with data \"COUPONS\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 90
                },
                {
                  "val": "COUPONS",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10255000,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1216000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data newCouponName with value \"Voucher Rewards\"",
            "match": {
              "arguments": [
                {
                  "val": "newCouponName",
                  "offset": 33
                },
                {
                  "val": "Voucher Rewards",
                  "offset": 59
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1696831600,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] update all loyalty coupon with couponName value \"request($[\u0027newCouponName\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027newCouponName\u0027])",
                  "offset": 61
                }
              ],
              "location": "CouponSteps.xLoyaltyUpdateAllLoyaltyCouponWithCouponNameValue(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 149166900,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1519800,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 956400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11807400,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11287500,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])\" should equal with data \"COUPONS\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 90
                },
                {
                  "val": "COUPONS",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13392600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13533500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027couponName\u0027])\" should equal with data \"request($[\u0027newCouponName\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027couponName\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 88
                },
                {
                  "val": "request($[\u0027newCouponName\u0027])",
                  "offset": 112
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllLoyaltyCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@CouponName"
          }
        ]
      },
      {
        "line": 44,
        "name": "Get all deleted loyalty coupon in positive scenario",
        "description": "",
        "id": "get-all-loyalty-coupon-in-loyalty-program;get-all-deleted-loyalty-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11677200,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 249763200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4126100,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1040500,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19655500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16529300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])\" should equal with data \"COUPONS\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027handlingType\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 90
                },
                {
                  "val": "COUPONS",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22680500,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(true)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(true)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllLoyaltyCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get all coupon when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-all-loyalty-coupon-in-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10020700,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 168546600,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 973500,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllLoyaltyCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get all coupon when loyaltyProgramCode is not found",
        "description": "",
        "id": "get-all-loyalty-coupon-in-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10661900,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 147245700,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1121200,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllLoyaltyCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 68,
        "name": "Get all coupon when markForDelete is empty",
        "description": "",
        "id": "get-all-loyalty-coupon-in-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8846100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145504500,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] try GET request to \"coupon/findAllLoyaltyCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAllLoyaltyCoupon",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3802600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllLoyaltyCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get all loyalty coupon in loyalty program",
    "description": "",
    "id": "get-all-loyalty-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/GelAllLoyaltyCoupon.feature",
    "tags": [
      {
        "name": "@GetAllLoyaltyCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 29
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 44
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get all active coupon sorted by MOST_POPULAR",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-active-coupon-sorted-by-most-popular",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12231600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 260708300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  "MOST_POPULAR"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2658100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1115000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13968700,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14716100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 505161900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] CouponResponseList content size should be correct",
            "match": {
              "location": "CouponSteps.xLoyaltyCouponResponseListContentSizeShouldBeCorrect()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 19,
        "name": "Get all active coupon sorted by default",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-active-coupon-sorted-by-default",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13515100,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 264976000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1919300,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1175100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11434100,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12836700,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 424707700,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] CouponResponseList content size should be correct",
            "match": {
              "location": "CouponSteps.xLoyaltyCouponResponseListContentSizeShouldBeCorrect()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 48,
        "name": "Get all active coupon sorted by HIGHEST",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-active-coupon-sorted-by-\u003cidentifier\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11720700,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 203368000,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  "HIGHEST"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1909000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1061100,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12863600,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15479200,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 405058700,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] CouponResponseList content size should be correct",
            "match": {
              "location": "CouponSteps.xLoyaltyCouponResponseListContentSizeShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13757700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] CouponResponseList content should be ordered by \"HIGHEST\"",
            "match": {
              "arguments": [
                {
                  "val": "HIGHEST",
                  "offset": 61
                }
              ],
              "location": "CouponSteps.xLoyaltyCouponResponseListContentShouldBeOrderedBy(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 49,
        "name": "Get all active coupon sorted by LOWEST",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-active-coupon-sorted-by-\u003cidentifier\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10666900,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 202693400,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  "LOWEST"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1639000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 933400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10538300,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7094300,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] all data in \"response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])\" should equal with data \"boolean(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027][*][\u0027markForDelete\u0027])",
                  "offset": 25
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "boolean(false)",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.allElementShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 357696700,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] CouponResponseList content size should be correct",
            "match": {
              "location": "CouponSteps.xLoyaltyCouponResponseListContentSizeShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9369000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] CouponResponseList content should be ordered by \"LOWEST\"",
            "match": {
              "arguments": [
                {
                  "val": "LOWEST",
                  "offset": 61
                }
              ],
              "location": "CouponSteps.xLoyaltyCouponResponseListContentShouldBeOrderedBy(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get all deleted coupon in positive scenario",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-deleted-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10953000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 389565600,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4695400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] assign previous response data to couponResponseList",
            "match": {
              "arguments": [
                {
                  "val": "couponResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1566000,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27872400,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 73
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 74,
        "name": "Get all coupon when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13661100,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 165563700,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "sortingType",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1317100,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 75,
        "name": "Get all coupon when loyaltyProgramCode is not found",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11581500,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 158573700,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1149000,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 76,
        "name": "Get all coupon when markForDelete is empty",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11446600,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 184140400,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 894300,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 77,
        "name": "Get all coupon when sortingType is not valid",
        "description": "",
        "id": "get-all-coupon-from-loyalty-program;get-all-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11689100,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 166628900,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] try GET request to \"coupon/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "sortingType",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1466800,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get all coupon from loyalty program",
    "description": "",
    "id": "get-all-coupon-from-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/GetAllCoupon.feature",
    "tags": [
      {
        "name": "@GetAllCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get one active coupon in positive scenario",
        "description": "",
        "id": "get-one-coupon-in-loyalty-program;get-one-active-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10123300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 896674200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get one random active couponId from database",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomActiveCouponIdFromDatabase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171533800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1686300,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 988400,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14450600,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15865100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponId\u0027])\" should equal with data \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 79
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 103
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14497500,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponValue\u0027]))\" should equal with data \"(request($[\u0027couponValue\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponValue\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "(request($[\u0027couponValue\u0027]))",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15475900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponPoint\u0027]))\" should equal with data \"(request($[\u0027couponPoint\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponPoint\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "(request($[\u0027couponPoint\u0027]))",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10929400,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] response data \"(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027productName\u0027]))\" should equal with data \"(request($[\u0027productName\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027productName\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "(request($[\u0027productName\u0027]))",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15051500,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response data \"(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027handlingType\u0027]))\" should equal with data \"(request($[\u0027handlingtype\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027handlingType\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "(request($[\u0027handlingtype\u0027]))",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21201400,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027termAndCondition\u0027]))\" should equal with data \"(request($[\u0027termAndCondition\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027termAndCondition\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 89
                },
                {
                  "val": "(request($[\u0027termAndCondition\u0027]))",
                  "offset": 113
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11806800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027description\u0027]))\" should equal with data \"(request($[\u0027description\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027description\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "(request($[\u0027description\u0027]))",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOneCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 24,
        "name": "Get one deleted coupon",
        "description": "",
        "id": "get-one-coupon-in-loyalty-program;get-one-deleted-coupon",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15099800,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3931800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4485800,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1119700,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144578900,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1284500,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 173265000,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1024500,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 152868600,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1320100,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1065500,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14634400,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOneCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get one coupon when couponId is empty",
        "description": "",
        "id": "get-one-coupon-in-loyalty-program;get-one-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12922200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 151424100,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  ""
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1209100,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Get one coupon when couponId is not found",
        "description": "",
        "id": "get-one-coupon-in-loyalty-program;get-one-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9846800,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 142687100,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 945600,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOneCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get one coupon in loyalty program",
    "description": "",
    "id": "get-one-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/GetOneCoupon.feature",
    "tags": [
      {
        "name": "@GetOneCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Revert delete coupon in positive scenario",
        "description": "",
        "id": "revert-delete-coupon-in-loyalty-program;revert-delete-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9358300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1478800,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3947200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1260000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158027000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1036900,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 150193600,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 895500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 157782200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 610400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 176298600,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] try PUT request to \"coupon/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1064100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 139403900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1690300,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1094300,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13560500,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150610900,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1076000,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 164798400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 918400,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 45,
        "name": "Revert delete still active coupon",
        "description": "",
        "id": "revert-delete-coupon-in-loyalty-program;revert-delete-still-active-coupon",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8480400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 882591200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get one random active couponId from database",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomActiveCouponIdFromDatabase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154742100,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"coupon/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1092600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 62,
        "name": "Revert delete coupon when couponId is empty",
        "description": "",
        "id": "revert-delete-coupon-in-loyalty-program;revert-delete-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10687500,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 156332500,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] try PUT request to \"coupon/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1008100,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 63,
        "name": "Revert delete coupon when couponId is not found",
        "description": "",
        "id": "revert-delete-coupon-in-loyalty-program;revert-delete-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10661700,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 133851900,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] try PUT request to \"coupon/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1187800,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Revert delete coupon in loyalty program",
    "description": "",
    "id": "revert-delete-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/RevertDeleteCoupon.feature",
    "tags": [
      {
        "name": "@RevertDeleteCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 43
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save new coupon in positive scenario",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-new-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8719400,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1267100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4132700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1480000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152147400,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1407600,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 153430800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1233100,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 823700,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10814700,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13689100,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponId\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 79
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])",
                  "offset": 103
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15080300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponPoint\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponPoint\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027couponPoint\u0027])",
                  "offset": 106
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18022500,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponValue\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027couponValue\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponValue\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027couponValue\u0027])",
                  "offset": 106
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15733800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027description\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027description\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027description\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027description\u0027])",
                  "offset": 106
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10885900,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027listingImageUrl\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027listingImageUrl\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027listingImageUrl\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 86
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027listingImageUrl\u0027])",
                  "offset": 110
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16801100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027imageUrl\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027imageUrl\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027imageUrl\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 79
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027imageUrl\u0027])",
                  "offset": 103
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16175500,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027logoUrl\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027logoUrl\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027logoUrl\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 78
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027logoUrl\u0027])",
                  "offset": 102
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14530200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027productName\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027productName\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027productName\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027productName\u0027])",
                  "offset": 106
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15517700,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027termAndCondition\u0027])\" should equal with data \"request($[\u0027couponCreateRequest\u0027][\u0027termAndCondition\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027termAndCondition\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 87
                },
                {
                  "val": "request($[\u0027couponCreateRequest\u0027][\u0027termAndCondition\u0027])",
                  "offset": 111
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176116400,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 907400,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 215587100,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 869100,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 41,
        "name": "Save duplicate coupon",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-duplicate-coupon",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11042300,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1336200,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5796900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1713300,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 134561700,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1477200,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 148574000,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1492700,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1230900,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17337500,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2351300,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 165557000,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1245700,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 141325700,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1383300,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 156798100,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1381500,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 81,
        "name": "Save coupon when couponId is empty",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7854000,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2448900,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "",
                  "1",
                  "1",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 996400,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154949000,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 903000,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Save coupon when couponPoint is \u003c\u003d 0",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10170700,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3102800,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "0",
                  "1",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1252400,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145442300,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 901700,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 83,
        "name": "Save coupon when couponValue is \u003c\u003d 0",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10077700,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2778600,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "1",
                  "0",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1320100,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139916700,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1025400,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 84,
        "name": "Save coupon when body is empty",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8455600,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3359400,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "1",
                  "0",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 990400,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164104100,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1372500,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 85,
        "name": "Save coupon when body is not valid",
        "description": "",
        "id": "save-coupon-in-loyalty-program;save-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10896400,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4046600,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "1",
                  "0",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1178500,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139396000,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1334600,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save coupon in loyalty program",
    "description": "",
    "id": "save-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/SaveCoupon.feature",
    "tags": [
      {
        "name": "@SaveCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 20
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 35
        }
      },
      {
        "name": "@CouponName",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 57
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Update coupon in positive scenario",
        "description": "",
        "id": "update-coupon-in-loyalty-program;update-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9911300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 882601200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get one random active couponId from database",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomActiveCouponIdFromDatabase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 134986500,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1082500,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1113800,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14986200,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19985100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponId\u0027])\" should equal with data \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027][\u0027couponId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 79
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 103
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4293700,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "10",
                  "100",
                  "new description",
                  "www.baru.com",
                  "www.baru.com",
                  "www.baru.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan baru",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2457300,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 195363500,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] try PUT request to \"coupon/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1462000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 183060300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] coupon should be updated",
            "match": {
              "location": "CouponSteps.xLoyaltyCouponShouldBeUpdated()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 197413800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] rollback coupon update",
            "match": {
              "location": "CouponSteps.xLoyaltyRollbackCouponUpdate()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1209300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 188376200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] coupon should be rollbacked",
            "match": {
              "location": "CouponSteps.xLoyaltyCouponShouldBeRollbacked()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@UpdateCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 38,
        "name": "Update coupon when couponId is empty",
        "description": "",
        "id": "update-coupon-in-loyalty-program;update-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9643300,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4635100,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "",
                  "1",
                  "1",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1352300,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151776200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try PUT request to \"coupon/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1112300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 39,
        "name": "Update coupon when couponPoint is \u003c\u003d 0",
        "description": "",
        "id": "update-coupon-in-loyalty-program;update-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10401000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3165700,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "0",
                  "1",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1303100,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177913300,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try PUT request to \"coupon/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 994600,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 40,
        "name": "Update coupon when couponValue is \u003c\u003d 0",
        "description": "",
        "id": "update-coupon-in-loyalty-program;update-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10150100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3520500,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "1",
                  "0",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1387200,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139332200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try PUT request to \"coupon/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1154800,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 41,
        "name": "Update coupon when body is empty",
        "description": "",
        "id": "update-coupon-in-loyalty-program;update-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9064000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3630300,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "1",
                  "0",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1184400,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154897100,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try PUT request to \"coupon/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 949900,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 42,
        "name": "Update coupon when body is not valid",
        "description": "",
        "id": "update-coupon-in-loyalty-program;update-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11352000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2702100,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition",
                  "couponName"
                ]
              },
              {
                "cells": [
                  "(COUPON_,random(5))",
                  "1",
                  "0",
                  "some description",
                  "www.somelink.com",
                  "www.somelink.com",
                  "www.somelink.com",
                  "(PRODUK_,random(5))",
                  "syarat aja",
                  "Blibli Rewards"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 756000,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 174647200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try PUT request to \"coupon/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "coupon/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 956700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateCouponFeature"
          },
          {
            "name": "@LoyaltyCoupon"
          },
          {
            "name": "@TestSuiteId\u003d13287020"
          },
          {
            "name": "@CouponName"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Update coupon in loyalty program",
    "description": "",
    "id": "update-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/coupon/UpdateCoupon.feature",
    "tags": [
      {
        "name": "@UpdateCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyCoupon",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287020",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      },
      {
        "name": "@CouponName",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 59
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Acquire custom point in positive scenario",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5865400,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1133700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 964900,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4748700,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1221600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 170041600,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 722500,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 145300900,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4227600,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1497600,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16670600,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1031600,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 777400,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1563000,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11290300,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4141600,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 216436700,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1048300,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 208216000,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2886200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] assign response data point with value \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 868961100,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 927859700,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] get specified member latest acquisition history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1780890100,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 879336200,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 39,
        "name": "Acquire custom point will create the requested member card",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-point-will-create-the-requested-member-card",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9007700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1054700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 992600,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 881700,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4657500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "0",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1317700,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 231746500,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 961800,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 150483800,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1138600,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 842700,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16375500,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15620900,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] response data \"(response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027totalAcquiredPoint\u0027]))\" should equal with data \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027totalAcquiredPoint\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 95
                },
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 119
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15437100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 61,
        "name": "Acquire custom points when member is not pnv",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-member-is-not-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9920900,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1241600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1197900,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2572700,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4005800,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 196460300,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 940400,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 130768900,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1110400,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 804100,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12746600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1252900,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5165500,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "false",
                  "now()",
                  "0",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2504000,
              "status": "passed"
            },
            "line": 82,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 175718900,
              "status": "passed"
            },
            "line": 83,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1430000,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 186040500,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] member acquired point should be increased by \"0\"",
            "match": {
              "arguments": [
                {
                  "val": "0",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 88,
        "name": "Acquire custom point create the correct point bucket",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-point-create-the-correct-point-bucket",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6658400,
              "status": "passed"
            },
            "line": 89,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 764100,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 735300,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 616300,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 678300,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3184100,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1349700,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 234349600,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 938900,
              "status": "passed"
            },
            "line": 99,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 134314800,
              "status": "passed"
            },
            "line": 100,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1233400,
              "status": "passed"
            },
            "line": 104,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 918100,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9029900,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 744200,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 882687700,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1725155200,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5306600,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2151300,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150524300,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1278700,
              "status": "passed"
            },
            "line": 115,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 870899900,
              "status": "passed"
            },
            "line": 116,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 129,
        "name": "Acquire custom points when loyaltyProgramCode is empty",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9752300,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2690600,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1228200,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146408800,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 946100,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 130,
        "name": "Acquire custom points when remarks is empty",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8353800,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2941900,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "true",
                  "now()",
                  "1",
                  "100",
                  ""
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1450800,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156062800,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 938400,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 131,
        "name": "Acquire custom points when loyaltyProgramCode is not found",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8939300,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4963700,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "1",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1580800,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142701300,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 951300,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 132,
        "name": "Acquire custom points when memberId is empty",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9688800,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2927300,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "false",
                  "now()",
                  "1",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1101300,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 136960900,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1198700,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 133,
        "name": "Acquire custom points when pointValue is \u003c\u003d 0",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9713000,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2724200,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "0",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1263400,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144756200,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 913000,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 134,
        "name": "Acquire custom points when timestamp is null",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10785900,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3353500,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "",
                  "1",
                  "1",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1602500,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 163420500,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1092800,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 135,
        "name": "Acquire custom points when body is empty",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11489500,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3831200,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "1",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1182100,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164844200,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1167700,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 136,
        "name": "Acquire custom points when body is not valid",
        "description": "",
        "id": "acquire-points-from-custom-point-operation;acquire-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7785500,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3194900,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "1",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 982200,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148159600,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1041200,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquireCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      }
    ],
    "name": "Acquire points from custom point operation",
    "description": "",
    "id": "acquire-points-from-custom-point-operation",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/custompointoperation/AcquireCustomPoints.feature",
    "tags": [
      {
        "name": "@AcquireCustomPointsFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@CustomPointLoyalty",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 29
        }
      },
      {
        "name": "@TestSuiteId\u003d13287021",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 49
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Assign point to single member",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-point-to-single-member",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9138900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1975700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1156600,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2034800,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1658100,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1106800,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5519400,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 888509300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1838743800,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 148839300,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1215700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1113800,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17394400,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2640200,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 253256000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 823000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 898424600,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] latest custom point assign history success list should not be null and match with request",
            "match": {
              "location": "HistorySteps.xLoyaltyLatestCustomPointAssignHistorySuccessListShouldNotBeNullAndMatchWithRequest()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 208487700,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2992200,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] assign response data point with value \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 865502900,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] get specified member latest acquisition history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 941510100,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 44,
        "name": "Assign custom point when loyaltyProgramCode is empty",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11068700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3782800,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145914200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 939800,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 45,
        "name": "Assign custom point when remarks is empty",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11313500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4852600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "true",
                  "now()",
                  "1",
                  "100",
                  ""
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1290200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 168267500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1040700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 46,
        "name": "Assign custom point when loyaltyProgramCode is not found",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8791700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3292400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1123500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158367200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1167700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 47,
        "name": "Assign custom point when memberId is empty",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8596400,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2394400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "false",
                  "now()",
                  "1",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 846700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 179218100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 966600,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 48,
        "name": "Assign custom point when pointValue is \u003c\u003d 0",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8704600,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3137700,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "0",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1172000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173420700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1435800,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 49,
        "name": "Assign custom point when timestamp is null",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5433200,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2227100,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "",
                  "1",
                  "1",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1539300,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157029000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 931500,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 50,
        "name": "Assign custom point when body is empty",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9306300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3239600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "1",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1213100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141831000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1106600,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 51,
        "name": "Assign custom point when body is not valid",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11046200,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3346000,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(random(10,NUMERIC),_naz,@test.com)",
                  "false",
                  "now()",
                  "1",
                  "1",
                  "true"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1139300,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 113625000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 941700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 54,
        "name": "Assign custom point for multiple user",
        "description": "",
        "id": "assign-custom-point-in-loyalty-program;assign-custom-point-for-multiple-user",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9656300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1082800,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2479034900,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] get \"3\" random memberIds",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomMemberIds(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18456100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberIdList\u0027][0])",
                  "true",
                  "now()",
                  "30",
                  "10",
                  "testing"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberIdList\u0027][1])",
                  "true",
                  "now()",
                  "30",
                  "10",
                  "testing"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberIdList\u0027][2])",
                  "true",
                  "now()",
                  "30",
                  "10",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1434100,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145839800,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] try POST request to \"customPoint/assign\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/assign",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1017000,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 860073800,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] latest custom point assign history success list should not be null and match with request",
            "match": {
              "location": "HistorySteps.xLoyaltyLatestCustomPointAssignHistorySuccessListShouldNotBeNullAndMatchWithRequest()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AssignCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Assign custom point in loyalty program",
    "description": "",
    "id": "assign-custom-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/custompointoperation/AssignCustomPoints.feature",
    "tags": [
      {
        "name": "@AssignCustomPointsFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@CustomPointLoyalty",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13287021",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 48
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Custom point redemption in positive scenario",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;custom-point-redemption-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8411800,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1039100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1194800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2479900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1182200,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173973300,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1082900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1435800,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1422200,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1601500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6092000,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2453900,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 267880000,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1312100,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 159584100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1266800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 963300,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13464400,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5375500,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2102300,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141633900,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 858100,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 205364500,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] member active point should be decreased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 56
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberActivePointShouldBeDecreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 968857000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 881702700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] get specified member latest redemption history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestRedemptionHistoryData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17795500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] current member latest redemption history should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltyCurrentMemberLatestRedemptionDataShouldBeCorrect()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 43,
        "name": "Custom point redemption with no remarks",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;custom-point-redemption-with-no-remarks",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12344900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1877500,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1765400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3798900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1701300,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 236746200,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 942100,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 846000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 849700,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1028200,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5454100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2108700,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177483700,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1052900,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 177181800,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1241300,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 765500,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14009100,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3404900,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027point\u0027])",
                  ""
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1784100,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 196277600,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 751000,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 77,
        "name": "Redeem custom points when user does not have enough point",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-user-does-not-have-enough-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10082900,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1168400,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1067100,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3431200,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2277700,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142052100,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 863100,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1007100,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4454700,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "0",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2047000,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 223302000,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1075600,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 134816900,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4730100,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1283000,
              "status": "passed"
            },
            "line": 99,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15960900,
              "status": "passed"
            },
            "line": 100,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4206900,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "number(add(request($[\u0027point\u0027]),100))",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1940800,
              "status": "passed"
            },
            "line": 104,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141676900,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1076400,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 109,
        "name": "Custom point redemption able deduct from multiple reward bucket",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;custom-point-redemption-able-deduct-from-multiple-reward-bucket",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10178100,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4670700,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1224600,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2545600,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1197600,
              "status": "passed"
            },
            "line": 116,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 237811700,
              "status": "passed"
            },
            "line": 117,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1236700,
              "status": "passed"
            },
            "line": 118,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1225500,
              "status": "passed"
            },
            "line": 119,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4150700,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "30",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1885100,
              "status": "passed"
            },
            "line": 123,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 183170500,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 958200,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4363900,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2220500,
              "status": "passed"
            },
            "line": 129,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162669500,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1361900,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5954600,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "183",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2273500,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 228714300,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1016900,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 828336700,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1712869800,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1257700,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] prepare request data point with value \"225\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "225",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3352900,
              "status": "passed"
            },
            "line": 141,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027point\u0027])",
                  "redeem multiple bucket"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2254900,
              "status": "passed"
            },
            "line": 144,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 223589800,
              "status": "passed"
            },
            "line": 145,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1234400,
              "status": "passed"
            },
            "line": 146,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 859787000,
              "status": "passed"
            },
            "line": 147,
            "name": "[x-loyalty] get specified member latest redemption history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestRedemptionHistoryData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 897179000,
              "status": "passed"
            },
            "line": 148,
            "name": "[x-loyalty] current member latest redemption history is match with the redeemed buckets",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestRedemptionHistoryIsMatchWithTheRedeemedBuckets()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15035800,
              "status": "passed"
            },
            "line": 149,
            "name": "[x-loyalty] data \"response($[\u0027sortedBucketPeriod\u0027])\" should be ordered by ascending",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027sortedBucketPeriod\u0027])",
                  "offset": 18
                },
                {
                  "val": "should",
                  "offset": 53
                },
                {
                  "val": "ascending",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.dataShouldBeOrderedIn(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 161,
        "name": "Redeem custom points when loyaltyProgramCode is empty",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9071500,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "",
                  "random(10)",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1965000,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144330500,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1131200,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 162,
        "name": "Redeem custom points when loyaltyProgramCode is not found",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12058200,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "(blibli_,random(5))",
                  "random(10)",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2078700,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 179320100,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 792500,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 163,
        "name": "Redeem custom points when memberId is empty",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9584100,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "(blibli_,random(5))",
                  "",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2550300,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138934500,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1120100,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 164,
        "name": "Redeem custom points when memberId is not found",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8467200,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(TEST_,random(5))",
                  "100",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2112200,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135262100,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 935300,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 165,
        "name": "Redeem custom points when pointValue is \u003c 0",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 12033500,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(TEST_,random(5))",
                  "-1",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2464000,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146152700,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1210200,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 166,
        "name": "Redeem custom points when body is empty",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10701100,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(TEST_,random(5))",
                  "-1",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1797700,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 124311100,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 870300,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 167,
        "name": "Redeem custom points when body is not valid",
        "description": "",
        "id": "redeem-custom-points-in-loyalty-program;redeem-custom-points-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9533100,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "(TEST_,random(5))",
                  "-1",
                  "true"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1452700,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154046500,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 954600,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCustomPointsFeature"
          },
          {
            "name": "@CustomPointLoyalty"
          },
          {
            "name": "@TestSuiteId\u003d13287021"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Redeem custom points in loyalty program",
    "description": "",
    "id": "redeem-custom-points-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/custompointoperation/RedeemCustomPoints.feature",
    "tags": [
      {
        "name": "@RedeemCustomPointsFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@CustomPointLoyalty",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13287021",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 48
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 20,
        "name": "Get member 10 acquisition history in positive scenario",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-member-\u003csize\u003e-acquisition-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9225200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1993858000,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get one random memberId that has acquired point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdThatHasAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 282303300,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3990400,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1224300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20821900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17418800,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 23,
        "name": "Get acquisition history for member that has not acquired point",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-acquisition-history-for-member-that-has-not-acquired-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10637800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2732252800,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get one random memberId that has not acquired point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdThatHasNotAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 237683900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1295000,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1119200,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17519400,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 49,
        "name": "Get all acquisition history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8510000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2016900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 194257000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 837100,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 50,
        "name": "Get all acquisition history when memberId is empty",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9173500,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2117900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151753300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 979800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get all acquisition history when memberId is not found",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8998900,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1863400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 254802800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1096400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get all acquisition history when size is \u003c 1",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11085800,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1895000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 159907000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1236700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get all acquisition history when size is character",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9057300,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2138400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145259000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1161500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 54,
        "name": "Get all acquisition history when page is \u003c 0",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9490600,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1388700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 228013100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 933200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get all acquisition history when page is character",
        "description": "",
        "id": "get-all-acquisition-history-data-in-loyalty-program;get-all-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9758800,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1975700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 259793900,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/acquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/acquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 942800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get all acquisition history data in loyalty program",
    "description": "",
    "id": "get-all-acquisition-history-data-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetAcquisitionHistory.feature",
    "tags": [
      {
        "name": "@GetAcquisitionHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get member all loyalty history in positive scenario",
        "description": "",
        "id": "get-all-loyalty-history-from-a-member;get-member-all-loyalty-history-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9593700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145540300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "MAX_SIZE_HISTORY"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3311900,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 892900,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14203800,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 76
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 341121200,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"history/all\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/all",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "properties(default.memberId)"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5512900,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1175300,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 29437300,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45468200,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"response($[\u0027systemParameterResponse\u0027][\u0027value\u0027][\u0027value\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "response($[\u0027systemParameterResponse\u0027][\u0027value\u0027][\u0027value\u0027])",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48392800,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027][*][\u0027points\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027][*][\u0027points\u0027]))",
                  "offset": 106
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57264700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027][*][\u0027loyaltyPoints\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027][*][\u0027loyaltyPoints\u0027]))",
                  "offset": 106
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28185000,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027][*][\u0027pointsDate\u0027])\" should be ordered by descending",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027][*][\u0027pointsDate\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "descending",
                  "offset": 112
                }
              ],
              "location": "ApiBaseSteps.dataShouldBeOrderedIn(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 27,
        "name": "Get member all loyalty history for new member",
        "description": "",
        "id": "get-all-loyalty-history-from-a-member;get-member-all-loyalty-history-for-new-member",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9175000,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1780300,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3100700,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "(testing_,random(6,NUMERIC),@test.com)",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1396600,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173944800,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 666500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 232855200,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try GET request to \"history/all\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/all",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1413600,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 791100,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23016000,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAllHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 54,
        "name": "Get member all loyalty history when memberId is not found",
        "description": "",
        "id": "get-all-loyalty-history-from-a-member;get-member-all-loyalty-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8440700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 299332700,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/all\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/all",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 977400,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get member all loyalty history when memberId is empty",
        "description": "",
        "id": "get-all-loyalty-history-from-a-member;get-member-all-loyalty-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9165700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 142018000,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/all\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/all",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1171600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Get member all loyalty history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-all-loyalty-history-from-a-member;get-member-all-loyalty-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7238900,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 133063300,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/all\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/all",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "properties(default.memberId)"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1058100,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 57,
        "name": "Get member all loyalty history when loyaltyProgramCode is not found",
        "description": "",
        "id": "get-all-loyalty-history-from-a-member;get-member-all-loyalty-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9691500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 246590800,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/all\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/all",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "properties(default.memberId)"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1346300,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAllHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get all loyalty history from a member",
    "description": "",
    "id": "get-all-loyalty-history-from-a-member",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetAllHistory.feature",
    "tags": [
      {
        "name": "@GetAllHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 23
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 39
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get first-N size custom assign point history in positive scenario",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-first-n-size-custom-assign-point-history-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9524500,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1098800,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data size with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "size",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 50
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 170687900,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "#NEXT"
                ]
              },
              {
                "cells": [
                  "size",
                  "request($[\u0027size\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2123800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 968800,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14926400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16509800,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"request($[\u0027size\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027size\u0027])",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 20,
        "name": "Get next N size custom assign point history in positive scenario",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-next-n-size-custom-assign-point-history-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9061100,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 957618300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] get one custom assign point history id by skipping \"5\" data",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 64
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomHistoryId(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1191200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data size with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "size",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 50
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138211300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "(request($[\u0027historyId\u0027]),#NEXT)"
                ]
              },
              {
                "cells": [
                  "size",
                  "request($[\u0027size\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1410600,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1075900,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10845400,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14606100,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"request($[\u0027size\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027size\u0027])",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 36,
        "name": "Get previous N size custom assign point history in positive scenario",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-previous-n-size-custom-assign-point-history-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8970900,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 880861400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] get one custom assign point history id by skipping \"10\" data",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 64
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomHistoryId(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1076400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data size with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "size",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 50
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 181047700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "(request($[\u0027historyId\u0027]),#PREV)"
                ]
              },
              {
                "cells": [
                  "size",
                  "request($[\u0027size\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2300200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1150200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18956800,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20065400,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"request($[\u0027size\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027size\u0027])",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 63,
        "name": "Get custom assign point history when size is not valid",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-custom-assign-point-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11149900,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 151516400,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "(random(12),#RAND)"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1085100,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 64,
        "name": "Get custom assign point history when start date is \u003e end date",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-custom-assign-point-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8764200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146334600,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "#NEXT"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 746400,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 65,
        "name": "Get custom assign point history when start date is not valid",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-custom-assign-point-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10386600,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 139777000,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "a"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "#NEXT"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1432900,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get custom assign point history when end date is not valid",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-custom-assign-point-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5963300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 144628500,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "a"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "#NEXT"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1058500,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get custom assign point history when parameter is not valid",
        "description": "",
        "id": "get-custom-assign-history-in-loyalty-program;get-custom-assign-point-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8737300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145901400,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try GET request to \"history/assignPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/assignPoint",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "startDate",
                  "timestamp(2019-01-23 17:00:00)"
                ]
              },
              {
                "cells": [
                  "endDate",
                  "timestamp()"
                ]
              },
              {
                "cells": [
                  "parameterRule",
                  "#RAND"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 976100,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetAssignHistoryFeature"
          },
          {
            "name": "@LoyaltyHstory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get custom assign history in loyalty program",
    "description": "",
    "id": "get-custom-assign-history-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetAssignHistory.feature",
    "tags": [
      {
        "name": "@GetAssignHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHstory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 26
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 41
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 20,
        "name": "Get member 10 expired history data in positive scenario",
        "description": "",
        "id": "get-member-expired-history-data;get-member-\u003csize\u003e-expired-history-data-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7345100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2170805100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get one random memberId that has expired point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdThatHasExpiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 226540700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1323000,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 862400,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15318500,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15841700,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 23,
        "name": "Get expired history data for member that has no expired point",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-for-member-that-has-no-expired-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5827200,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2379582400,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get one random memberId that has no expired point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdThatHasNoExpiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 230176100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1135400,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 791200,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14364300,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 49,
        "name": "Get expired history data when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9441400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1588100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142420100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 831100,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 50,
        "name": "Get expired history data when memberId is empty",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9130800,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3267600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139432800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 985500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get expired history data when memberId is not found",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9257900,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1870900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 252345200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1042400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get expired history data when size is \u003c 1",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7595000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1160800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154794200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 839800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get expired history data when size is character",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8452700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1685100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147240700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 844700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 54,
        "name": "Get expired history data when page is \u003c 0",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9156500,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1742800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150754800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 892800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get expired history data when page is character",
        "description": "",
        "id": "get-member-expired-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8347400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1677200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138986000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/expiration\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/expiration",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 993500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetExpiredHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get member expired history data",
    "description": "",
    "id": "get-member-expired-history-data",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetExpirationHistory.feature",
    "tags": [
      {
        "name": "@GetExpiredHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 27
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 43
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 20,
        "name": "Get member 10 inactve history data in positive scenario",
        "description": "",
        "id": "get-member-inactive-history-data;get-member-\u003csize\u003e-inactve-history-data-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6404300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2140349900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get one random memberId that has inactive point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdThatHasInactivePoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 238535500,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1293400,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1005900,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11560900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14394700,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 23,
        "name": "Get expired history data for member that has no inactive point",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-for-member-that-has-no-inactive-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9587700,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2774539900,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get one random memberId that has no inactive point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdThatHasNoInactivePoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 215437400,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 730200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 828900,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25153200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 49,
        "name": "Get expired history data when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11420800,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2286400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160237700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1170500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 50,
        "name": "Get expired history data when memberId is empty",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9517900,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1588900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140275500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1121300,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 51,
        "name": "Get expired history data when memberId is not found",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9569700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1950300,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 249867500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1429700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Get expired history data when size is \u003c 1",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6123900,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1199800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149375100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 963900,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 53,
        "name": "Get expired history data when size is character",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9730000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2774700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161468100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1038900,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 54,
        "name": "Get expired history data when page is \u003c 0",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8737000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1936900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 203563700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 912800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Get expired history data when page is character",
        "description": "",
        "id": "get-member-inactive-history-data;get-expired-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10362000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1807100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 175873800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"history/inactive\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/inactive",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1181200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetInactiveHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get member inactive history data",
    "description": "",
    "id": "get-member-inactive-history-data",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetInactiveHistory.feature",
    "tags": [
      {
        "name": "@GetInactiveHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 44
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 30,
        "name": "Get member 10 login acquisition history in positive scenario",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-member-\u003csize\u003e-login-acquisition-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8418100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1623100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"LOGIN\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "LOGIN",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1015800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1811900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(member.has.login.acquisition)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(member.has.login.acquisition)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5489100,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1484100,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 191535600,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1290000,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 254585900,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1603200,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1257100,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14048800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11878500,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 33,
        "name": "Get login history for member that has no login acquisition history",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-history-for-member-that-has-no-login-acquisition-history",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8736000,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1045500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 938900,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3960800,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "0",
                  "10",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1200900,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 274083400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1155200,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166398100,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1000700,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 854400,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21144500,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get login acquisition history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10667800,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1981500,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143329000,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 918100,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get login acquisition history when memberId is empty",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6389200,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1591400,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152293900,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 880000,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 68,
        "name": "Get login acquisition history when memberId is not found",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9835700,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1976700,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 260893400,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1279600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Get login acquisition history when size is \u003c 1",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9990300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1929100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161679700,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 995900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get login acquisition history when size is character",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7978100,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1364100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 134276200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 946400,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get login acquisition history when page is \u003c 0",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8794800,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1744800,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 155157700,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1237900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get login acquisition history when page is character",
        "description": "",
        "id": "get-login-acquisition-history-in-loyalty-program;get-login-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7840400,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1759000,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151200500,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/loginAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/loginAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 950900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetLoginAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get login acquisition history in loyalty program",
    "description": "",
    "id": "get-login-acquisition-history-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetLoginAcquisition.feature",
    "tags": [
      {
        "name": "@GetLoginAcquisitionFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 29
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 45
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Get member level history in positive scenario",
        "description": "",
        "id": "get-member-level-history-in-loyalty-program;get-member-level-history-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8904300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1033426200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get \"1\" random memberIds with levelCode \"INFINITE\"",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                },
                {
                  "val": "INFINITE",
                  "offset": 53
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomMemberIdsWithCurrentLevel(Integer,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135951500,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"history/memberLevel\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/memberLevel",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberIdList\u0027][0])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5154700,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] assign previous response data to memberLevelHistoryResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberLevelHistoryResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1238100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13936000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response data \"response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 81
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetMemberHistoryLevelFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 16,
        "name": "Get member level for new member",
        "description": "",
        "id": "get-member-level-history-in-loyalty-program;get-member-level-for-new-member",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8444100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 989600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1774600,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "(testing_,random(6,NUMERIC),@test.com)",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1099100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151799200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1055900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 137312100,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try GET request to \"history/memberLevel\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/memberLevel",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1188400,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] assign previous response data to memberLevelHistoryResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberLevelHistoryResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 800100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11981500,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response data \"response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 81
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16019700,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response data \"(sizeof(response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027])))\" should equal with data \"1\"",
            "match": {
              "arguments": [
                {
                  "val": "(sizeof(response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027])))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "1",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13563900,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response data \"response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027][0][\u0027membershipLevel\u0027])\" should equal with data \"CLASSIC\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberLevelHistoryResponse\u0027][\u0027content\u0027][0][\u0027membershipLevel\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 103
                },
                {
                  "val": "CLASSIC",
                  "offset": 127
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetMemberHistoryLevelFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@LEVELON"
          }
        ]
      },
      {
        "line": 43,
        "name": "Get member level history when memberId is not found",
        "description": "",
        "id": "get-member-level-history-in-loyalty-program;get-member-level-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7857900,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 138571000,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try GET request to \"history/memberLevel\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/memberLevel",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 924000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetMemberHistoryLevelFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 44,
        "name": "Get member level history when memberId is empty",
        "description": "",
        "id": "get-member-level-history-in-loyalty-program;get-member-level-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10202000,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 132291000,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try GET request to \"history/memberLevel\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/memberLevel",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1413800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetMemberHistoryLevelFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get member level history in loyalty program",
    "description": "",
    "id": "get-member-level-history-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetMemberLevelHistory.feature",
    "tags": [
      {
        "name": "@GetMemberHistoryLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 35,
        "name": "Get member 10 other acquisition history in positive scenario",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-member-\u003csize\u003e-other-acquisition-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10093200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1197100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"REVIEW_PRODUCT\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REVIEW_PRODUCT",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1117900,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2390700,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5285000,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data sku with value \"(SKU-,loop(random(5,NUMERIC),-,4))\"",
            "match": {
              "arguments": [
                {
                  "val": "sku",
                  "offset": 33
                },
                {
                  "val": "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "offset": 49
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9041200,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data reviewModel with value",
            "match": {
              "arguments": [
                {
                  "val": "reviewModel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "sku",
                  "request($[\u0027sku\u0027])"
                ]
              },
              {
                "cells": [
                  "productName",
                  "(Produk, ,request($[\u0027sku\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4967100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "request($[\u0027reviewModel\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1553500,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 300124100,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 860700,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 174084000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1281100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 750400,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14631000,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14852700,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 38,
        "name": "Get other acquisition history for member that has no other acquisition",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-for-member-that-has-no-other-acquisition",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5424400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 925300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2596200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "(testing_,random(6,NUMERIC),@test.com)",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1498300,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144453000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 921000,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 204278300,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1043600,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 802900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21765800,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get other acquisition history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6324100,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1327900,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158965600,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1400200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get other acquisition history when memberId is empty",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10016500,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2172600,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150559400,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1363600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get other acquisition history when memberId is not found",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10964400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1692700,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 266675100,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 778200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 73,
        "name": "Get other acquisition history when size is \u003c 1",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9459400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1682700,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162488300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 859600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 74,
        "name": "Get other acquisition history when size is character",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9555600,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1703100,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151619300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1115600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 75,
        "name": "Get other acquisition history when page is \u003c 0",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9332500,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1243200,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142345800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 916700,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 76,
        "name": "Get other acquisition history when page is character",
        "description": "",
        "id": "get-other-acquisition-history-in-loyalty-program;get-other-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10025100,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1946200,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 167084800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/otherAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/otherAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 893000,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetOtherAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get other acquisition history in loyalty program",
    "description": "",
    "id": "get-other-acquisition-history-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetOtherAcquisitionHistory.feature",
    "tags": [
      {
        "name": "@GetOtherAcquisitionFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 29
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 45
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 21,
        "name": "Get member 10 purchase acquisition history in positive scenario",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-member-\u003csize\u003e-purchase-acquisition-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7246900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 991100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 575200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166966900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2262200,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1114300,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18481000,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16762100,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 24,
        "name": "Get purchase acquisition history that never purchase",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-that-never-purchase",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11944700,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2808300,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6392700,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "(testing_,random(6,NUMERIC),@test.com)",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2495300,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 170377800,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1286200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 170747100,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1113900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 854700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22605700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Get purchase acquisition history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9058800,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1603400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149462900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 877900,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 57,
        "name": "Get purchase acquisition history when memberId is empty",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5661600,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2352500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 174836900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1276300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 58,
        "name": "Get purchase acquisition history when memberId is not found",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8355000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1528700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 247660900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1308400,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 59,
        "name": "Get purchase acquisition history when size is \u003c 1",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8526000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1578300,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133964900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1121800,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 60,
        "name": "Get purchase acquisition history when size is character",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9942500,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2138700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147213600,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1256300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 61,
        "name": "Get purchase acquisition history when page is \u003c 0",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11512900,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2129100,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149999900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 998800,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 62,
        "name": "Get purchase acquisition history when page is character",
        "description": "",
        "id": "get-purchase-acquisition-history-in-loyalty-program;get-purchase-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10095500,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1794700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 217047900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/purchaseAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/purchaseAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1529200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetPurchaserAcquisitionFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get purchase acquisition history in loyalty program",
    "description": "",
    "id": "get-purchase-acquisition-history-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetPurchaseAcquisitionHistory.feature",
    "tags": [
      {
        "name": "@GetPurchaserAcquisitionFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 33
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 49
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 33,
        "name": "Get member 10 redemption history in positive scenario",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-member-\u003csize\u003e-redemption-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6393100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1170500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 963100,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3965600,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "0",
                  "10",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1346800,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 200898000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 897800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2580700,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "10",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2147600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166079800,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 867700,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 158476000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1279900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 993200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38524900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15403500,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 36,
        "name": "Get redemption history for member that never redeem point",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-for-member-that-never-redeem-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11018700,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1063000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2893400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "(testing_,random(6,NUMERIC),@test.com)",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2737600,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144440700,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1057100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 147275100,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1467600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1157500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23829700,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Get redemption history data when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11407100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2546300,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154480000,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 710500,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get redemption history data when memberId is empty",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7857600,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2142100,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 136681900,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 855300,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get redemption history data when memberId is not found",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8343800,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1503600,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 587391800,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 986000,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get redemption history data when size is \u003c 1",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8273300,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1563500,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135209100,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1105700,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 73,
        "name": "Get redemption history data when size is character",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9290100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2536400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138763600,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1001600,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 74,
        "name": "Get redemption history data when page is \u003c 0",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10865800,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2034900,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147795300,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 938500,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 75,
        "name": "Get redemption history data when page is character",
        "description": "",
        "id": "get-redemption-history-in-loyalty-program;get-redemption-history-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9014700,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1686800,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171613900,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try GET request to \"history/redemption\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/redemption",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1083400,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetRedemptionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get redemption history in loyalty program",
    "description": "",
    "id": "get-redemption-history-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetRedemptionHistory.feature",
    "tags": [
      {
        "name": "@GetRedemptionHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 30
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 46
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 35,
        "name": "Get member 10 review acquisition history in positive scenario",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-member-\u003csize\u003e-review-acquisition-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7414600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 982100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"REVIEW_PRODUCT\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REVIEW_PRODUCT",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 964400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2743900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1552500,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data sku with value \"(SKU-,loop(random(5,NUMERIC),-,4))\"",
            "match": {
              "arguments": [
                {
                  "val": "sku",
                  "offset": 33
                },
                {
                  "val": "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "offset": 49
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5489900,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data reviewModel with value",
            "match": {
              "arguments": [
                {
                  "val": "reviewModel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "sku",
                  "request($[\u0027sku\u0027])"
                ]
              },
              {
                "cells": [
                  "productName",
                  "(Produk, ,request($[\u0027sku\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3706400,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "request($[\u0027reviewModel\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2068100,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164244500,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1308500,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166105500,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1493800,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 866000,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14437300,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12906000,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 38,
        "name": "Get review acquisition history for member that never review product",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-for-member-that-never-review-product",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9228400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1017400,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2419100,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "(testing_,random(6,NUMERIC),@test.com)",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1064800,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166384900,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1374300,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 151612700,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1459800,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 984700,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22047400,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get review acquisition history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9849900,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1904000,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 136155300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1009200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get review acquisition history when memberId is empty",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9380900,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2173200,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143471000,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1036000,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get review acquisition history when memberId is not found",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8611300,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1691500,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 230537800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 948200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 73,
        "name": "Get review acquisition history when size is \u003c 1",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8117900,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2059500,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 196546800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 930300,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 74,
        "name": "Get review acquisition history when size is character",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7640400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1643100,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164602200,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 889600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 75,
        "name": "Get review acquisition history when page is \u003c 0",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9234400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1098000,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 130368300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 839600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 76,
        "name": "Get review acquisition history when page is character",
        "description": "",
        "id": "get-review-acquisition-history-data-in-loyalty-program;get-review-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6967800,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1102100,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146533900,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"history/reviewAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/reviewAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1061900,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetReviewAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get review acquisition history data in loyalty program",
    "description": "",
    "id": "get-review-acquisition-history-data-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetReviewAcquisition.feature",
    "tags": [
      {
        "name": "@GetReviewAcquisitionHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 53
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 30,
        "name": "Get member 10 share acquisition history in positive scenario",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-member-\u003csize\u003e-share-acquisition-history-in-positive-scenario;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10087300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1470100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"SHARE_SOCIAL_MEDIA\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "SHARE_SOCIAL_MEDIA",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1169600,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1600100,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(member.has.login.acquisition)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(member.has.login.acquisition)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3354900,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1604900,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147031500,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 910800,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 210822500,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1230800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 831500,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13559000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10027200,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))\" should be less than equal data \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027historyResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 82
                },
                {
                  "val": "less",
                  "offset": 92
                },
                {
                  "val": "than equal",
                  "offset": 97
                },
                {
                  "val": "10",
                  "offset": 114
                }
              ],
              "location": "ApiBaseSteps.compareTwoData(String,String,String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 33,
        "name": "Get share history for member that has never share product",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-history-for-member-that-has-never-share-product",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9510800,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 926200,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 848300,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3768800,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "0",
                  "10",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1323800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 220506200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 619900,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 157858600,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1054600,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] assign previous response data to historyResponseList",
            "match": {
              "arguments": [
                {
                  "val": "historyResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 761800,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21136600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response data \"response($[\u0027historyResponseList\u0027][\u0027content\u0027])\" should be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027historyResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 66,
        "name": "Get share acquisition history when loyaltyProgramCode is empty",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8349000,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1454600,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135808200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 901800,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 67,
        "name": "Get share acquisition history when memberId is empty",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8801900,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1183300,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141770000,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 616600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 68,
        "name": "Get share acquisition history when memberId is not found",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8354000,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1416100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 256879600,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "size",
                  "999"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1235000,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Get share acquisition history when size is \u003c 1",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10582300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1729500,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169418500,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "0"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 572500,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Get share acquisition history when size is character",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8023000,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1657600,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164535400,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "a"
                ]
              },
              {
                "cells": [
                  "page",
                  "0"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 944600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Get share acquisition history when page is \u003c 0",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8264000,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1142700,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 155929900,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "-1"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1305600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 72,
        "name": "Get share acquisition history when page is character",
        "description": "",
        "id": "get-share-product-acquisition-history-data-in-loyalty-program;get-share-acquisition-history-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9333000,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1635800,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 122215700,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try GET request to \"history/shareAcquisition\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "history/shareAcquisition",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              },
              {
                "cells": [
                  "size",
                  "10"
                ]
              },
              {
                "cells": [
                  "page",
                  "a"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1070600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@GetShareAcquisitionHistoryFeature"
          },
          {
            "name": "@LoyaltyHistory"
          },
          {
            "name": "@TestSuiteId\u003d13287022"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Get share product acquisition history data in loyalty program",
    "description": "",
    "id": "get-share-product-acquisition-history-data-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/history/GetShareAcquisition.feature",
    "tags": [
      {
        "name": "@GetShareAcquisitionHistoryFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyHistory",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 36
        }
      },
      {
        "name": "@TestSuiteId\u003d13287022",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 52
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Delete level in positive scenario",
        "description": "",
        "id": "delete-level-in-loyalty-program;delete-level-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5783000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 990100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1559800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5604100,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "0",
                  "0",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 866230800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 971500,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150186800,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1000500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 149404100,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1011000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 619400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15940500,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148100600,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 986900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 149111300,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1267600,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 42,
        "name": "Delete level in when levelCode is empty",
        "description": "",
        "id": "delete-level-in-loyalty-program;delete-level-in-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9385300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 152597600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1240000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 43,
        "name": "Delete level in when levelCode is not found",
        "description": "",
        "id": "delete-level-in-loyalty-program;delete-level-in-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9492600,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 135096600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "random(6)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1004600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Delete level in loyalty program",
    "description": "",
    "id": "delete-level-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/level/DeleteLevel.feature",
    "tags": [
      {
        "name": "@DeleteLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 21
        }
      },
      {
        "name": "@TestSuiteId\u003d13287023",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 35
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Find all level in positive scenario",
        "description": "",
        "id": "find-all-level-in-loyalty-program;find-all-level-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10602300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 153840100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"level/findAll\"",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2640600,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] assign previous response data to levelResponseList",
            "match": {
              "arguments": [
                {
                  "val": "levelResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1045400,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17179300,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponseList\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponseList\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 61
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16577700,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 72
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindAllLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Find all level in loyalty program",
    "description": "",
    "id": "find-all-level-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/level/FindAllLevel.feature",
    "tags": [
      {
        "name": "@FindAllLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287023",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 36
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Find one level in positive scenario",
        "description": "",
        "id": "find-one-level-in-loyalty-program;find-one-level-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9483600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 968400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data levelCode with value \"SIGNATURE\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "SIGNATURE",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145231000,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 810700,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 669000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14842900,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16546000,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])\" should equal with data \"request($[\u0027levelCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 79
                },
                {
                  "val": "request($[\u0027levelCode\u0027])",
                  "offset": 103
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 25,
        "name": "Find one level when levelCode is empty",
        "description": "",
        "id": "find-one-level-in-loyalty-program;find-one-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7968500,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 148180000,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1052800,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 26,
        "name": "Find one level when levelCode is not found",
        "description": "",
        "id": "find-one-level-in-loyalty-program;find-one-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8521800,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 148113400,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "random(6)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 852800,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Find one level in loyalty program",
    "description": "",
    "id": "find-one-level-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/level/FindOneLevel.feature",
    "tags": [
      {
        "name": "@FindOneLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287023",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 36
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save level in positive scenario",
        "description": "",
        "id": "save-level-in-loyalty-program;save-level-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8882800,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1016500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1271400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2960600,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "0",
                  "0",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 882168600,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1123300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 153509900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 875900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 153460600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1084300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 772300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14684700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 66
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177286900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 876100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 30,
        "name": "Save new level without benefit",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-without-benefit",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8461800,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1007700,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2231500,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "0",
                  "0",
                  ""
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 844600700,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1413800,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 129368600,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 785600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 151654200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 690900,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 468500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12649900,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 66
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144684300,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1044800,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Save new level when benefit is empty array",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-benefit-is-empty-array",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10051900,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1228300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3220500,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "0",
                  "0",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 909008100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1267800,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 175007300,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1015800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 164216500,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1176700,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1108200,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15598600,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 66
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171371600,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1082900,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 74,
        "name": "Save level in when same level has already exists",
        "description": "",
        "id": "save-level-in-loyalty-program;save-level-in-when-same-level-has-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7872000,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1051500,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1140800,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2581800,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "0",
                  "0",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 885301900,
              "status": "passed"
            },
            "line": 83,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1625600,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 183998900,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1282600,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 133604300,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1172700,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 892400,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13751200,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 66
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1470000,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 147714900,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1136200,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 124359100,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 856100,
              "status": "passed"
            },
            "line": 99,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 102,
        "name": "Save level when minAcquired point is below previous level",
        "description": "",
        "id": "save-level-in-loyalty-program;save-level-when-minacquired-point-is-below-previous-level",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9203800,
              "status": "passed"
            },
            "line": 103,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1060600,
              "status": "passed"
            },
            "line": 104,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1479000,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4835100,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "99",
                  "0",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1522600,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152807800,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 917200,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 116,
        "name": "Save level in when same priority has already exists",
        "description": "",
        "id": "save-level-in-loyalty-program;save-level-in-when-same-priority-has-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10186100,
              "status": "passed"
            },
            "line": 117,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1111700,
              "status": "passed"
            },
            "line": 118,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1559100,
              "status": "passed"
            },
            "line": 119,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3635000,
              "status": "passed"
            },
            "line": 122,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "3",
                  "99999",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1691700,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 136009500,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 861100,
              "status": "passed"
            },
            "line": 127,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 140,
        "name": "Save new level when levelCode is empty",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9494700,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2928300,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "",
                  "random(6)",
                  "this is a test level",
                  "0",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1451600,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146639200,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 851900,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 141,
        "name": "Save new level when levelName is empty",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8288300,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2457400,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "",
                  "this is a test level",
                  "0",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1563600,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140257900,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 901300,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 142,
        "name": "Save new level when minAcquiredPoint is \u003c 0",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8464300,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2545100,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "0",
                  "-100",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1341000,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144111700,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 935600,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 143,
        "name": "Save new level when levelPriority is \u003c 0",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8243200,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2331000,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "-1",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1734200,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133060900,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 863700,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 144,
        "name": "Save new level when body is empty",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7748300,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2569000,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "-1",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 950600,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146002800,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 908100,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 145,
        "name": "Save new level when body is not valid",
        "description": "",
        "id": "save-level-in-loyalty-program;save-new-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8053500,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2217600,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "-1",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1047400,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133753900,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 814600,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save level in loyalty program",
    "description": "",
    "id": "save-level-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/level/SaveLevel.feature",
    "tags": [
      {
        "name": "@SaveLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 19
        }
      },
      {
        "name": "@TestSuiteId\u003d13287023",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 33
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save level benefits in positive scenario",
        "description": "",
        "id": "save-level-benefits-to-specified-level-in-x-loyalty;save-level-benefits-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10108500,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1422700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data levelCode with value \"SIGNATURE\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "SIGNATURE",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1615400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Tawaran Voucher Menarik"
                ]
              },
              {
                "cells": [
                  "Loyalty program baru"
                ]
              },
              {
                "cells": [
                  "(Random string untuk di tes, random(12))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1470600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelBenefit\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelBenefit\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 168503000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try PUT request to \"level/benefits\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/benefits",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 923500,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 174231100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1050500,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 827900,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14884600,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13547300,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 66
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15313100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027benefits\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027benefits\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 78
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10892700,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])\" should equal with data \"request($[\u0027levelCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 79
                },
                {
                  "val": "request($[\u0027levelCode\u0027])",
                  "offset": 103
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16100300,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027benefits\u0027])\" should equal with data \"request($[\u0027levelBenefit\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027][\u0027benefits\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 78
                },
                {
                  "val": "request($[\u0027levelBenefit\u0027])",
                  "offset": 102
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelBenefitFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 42,
        "name": "Save level benefits when levelCode is empty",
        "description": "",
        "id": "save-level-benefits-to-specified-level-in-x-loyalty;save-level-benefits-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8504800,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1155500,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Tawaran Voucher Menarik"
                ]
              },
              {
                "cells": [
                  "Loyalty program baru"
                ]
              },
              {
                "cells": [
                  "(Random string untuk di tes, random(12))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 800500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelBenefit\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelBenefit\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133363100,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try PUT request to \"level/benefits\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/benefits",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 589900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelBenefitFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 43,
        "name": "Save level benefits when levelCode is not found",
        "description": "",
        "id": "save-level-benefits-to-specified-level-in-x-loyalty;save-level-benefits-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6143200,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1649200,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Tawaran Voucher Menarik"
                ]
              },
              {
                "cells": [
                  "Loyalty program baru"
                ]
              },
              {
                "cells": [
                  "(Random string untuk di tes, random(12))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 886300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelBenefit\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelBenefit\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142933600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try PUT request to \"level/benefits\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/benefits",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 792600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelBenefitFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 44,
        "name": "Save level benefits when body is empty",
        "description": "",
        "id": "save-level-benefits-to-specified-level-in-x-loyalty;save-level-benefits-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8606900,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1621600,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Tawaran Voucher Menarik"
                ]
              },
              {
                "cells": [
                  "Loyalty program baru"
                ]
              },
              {
                "cells": [
                  "(Random string untuk di tes, random(12))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 945700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143778500,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try PUT request to \"level/benefits\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/benefits",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "CLASSIC"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 894500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelBenefitFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 45,
        "name": "Save level benefits when body is not valid",
        "description": "",
        "id": "save-level-benefits-to-specified-level-in-x-loyalty;save-level-benefits-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8065800,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1589100,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Tawaran Voucher Menarik"
                ]
              },
              {
                "cells": [
                  "Loyalty program baru"
                ]
              },
              {
                "cells": [
                  "(Random string untuk di tes, random(12))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 852000,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162326500,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try PUT request to \"level/benefits\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/benefits",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 883100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLevelBenefitFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save level benefits to specified level in x-loyalty",
    "description": "",
    "id": "save-level-benefits-to-specified-level-in-x-loyalty",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/level/SaveLevelBenefits.feature",
    "tags": [
      {
        "name": "@SaveLevelBenefitFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 26
        }
      },
      {
        "name": "@TestSuiteId\u003d13287023",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 40
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Update level in positive scenario",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5429500,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1003200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data levelCode with value \"NEW_LEVEL\"",
            "match": {
              "arguments": [
                {
                  "val": "levelCode",
                  "offset": 33
                },
                {
                  "val": "NEW_LEVEL",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1491300,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3077900,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "New Level",
                  "Blue is the color of the sky",
                  "0",
                  "0",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 836549100,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1287400,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145491400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"level/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "level/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 810700,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 155771200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"level/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "level/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1202700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to levelResponse",
            "match": {
              "arguments": [
                {
                  "val": "levelResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 980700,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15184800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027levelResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027levelResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 66
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1913700,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare request data levelBenefit with value",
            "match": {
              "arguments": [
                {
                  "val": "levelBenefit",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Berwarna biru"
                ]
              },
              {
                "cells": [
                  "Warna yang indah"
                ]
              },
              {
                "cells": [
                  "Benefit baru"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2988600,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "request($[\u0027levelCode\u0027])",
                  "Nama baru",
                  "Blue is the color of sea",
                  "0",
                  "0",
                  "request($[\u0027levelBenefit\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 863304600,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] set request to new highest levelPriority and minAcquiredPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltySetRequestToNewHighestLevelPriorityAndMinAcquiredPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2083200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158594900,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 969200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 173943800,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] level should be updated",
            "match": {
              "location": "LevelSteps.xLoyaltyLevelShouldBeUpdated()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149342500,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try DELETE request to \"level/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "level/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "levelCode",
                  "request($[\u0027levelCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 959900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Update level when levelCode is empty",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9219500,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2304700,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "",
                  "random(6)",
                  "this is a test level",
                  "0",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1255800,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145466400,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1009700,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 53,
        "name": "Update level when levelCode is not found",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11427200,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2674100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "random(6)",
                  "this is a test level",
                  "0",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1575200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 179789000,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1026700,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 54,
        "name": "Update level when levelName is empty",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10168900,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2452300,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "",
                  "this is a test level",
                  "0",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1305700,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139236300,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 866300,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Update level when minAcquiredPoint is \u003c 0",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7979000,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2218800,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "0",
                  "-100",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1182200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 136421400,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1175800,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Update level when levelPriority is \u003c 0",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7175800,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2204500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "-1",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1587800,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027levelCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027levelCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 172208700,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1041000,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 57,
        "name": "Update level when body is empty",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9636600,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2143300,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "-1",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1007800,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 242782300,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 965900,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 58,
        "name": "Update level when body is not valid",
        "description": "",
        "id": "update-level-in-loyalty-program;update-level-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9970000,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2516700,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare request data levelCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "levelCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "levelCode",
                  "levelName",
                  "levelDescription",
                  "levelPriority",
                  "minAcquiredPoint",
                  "benefits"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "this is a test level",
                  "-1",
                  "0",
                  "\u003cbenefits\u003e"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1004600,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152065000,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"level/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "level/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 966200,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLevelFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287023"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Update level in loyalty program",
    "description": "",
    "id": "update-level-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/level/UpdateLevel.feature",
    "tags": [
      {
        "name": "@UpdateLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 21
        }
      },
      {
        "name": "@TestSuiteId\u003d13287023",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 35
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Delete loyalty program in positive scenario",
        "description": "",
        "id": "delete-loyalty-program-in-loyalty-program;delete-loyalty-program-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6433600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1495900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"(blibli_,random(10))\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "(blibli_,random(10))",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4392400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba",
                  "Ini adalah program coba - coba",
                  "1000",
                  "14"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1750100,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149034300,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1060100,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 152513800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3880500,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1107600,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17871500,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150915000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 978800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 136698800,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 844000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 40,
        "name": "Delete loyalty program when loyaltyProgramCode is empty",
        "description": "",
        "id": "delete-loyalty-program-in-loyalty-program;delete-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7814900,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 142247800,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1175500,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 41,
        "name": "Delete loyalty program when loyaltyProgramCode is not found",
        "description": "",
        "id": "delete-loyalty-program-in-loyalty-program;delete-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7739000,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146166300,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "(blibli_,random(10))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1003800,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Delete loyalty program in loyalty program",
    "description": "",
    "id": "delete-loyalty-program-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/loyaltyprogram/DeleteLoyaltyProgram.feature",
    "tags": [
      {
        "name": "@DeleteLoyaltyProgramFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyProgram",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 30
        }
      },
      {
        "name": "@TestSuiteId\u003d13287026",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 46
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Find all active loyalty program data in positive scenario",
        "description": "",
        "id": "find-all-loyalty-program-in-loyalty-program;find-all-active-loyalty-program-data-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8356100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 150102600,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2268100,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponseList",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 868000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19143700,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 81
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindAllLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 15,
        "name": "Find all deleted loyalty program data in positive scenario",
        "description": "",
        "id": "find-all-loyalty-program-in-loyalty-program;find-all-deleted-loyalty-program-data-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10145700,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 329324800,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findAll\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findAll",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1108100,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindAllLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Find all loyalty program in loyalty program",
    "description": "",
    "id": "find-all-loyalty-program-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/loyaltyprogram/FindAllLoyaltyProgram.feature",
    "tags": [
      {
        "name": "@FindAllLoyaltyProgramFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyProgram",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287026",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Find one active loyalty program in positive scenario",
        "description": "",
        "id": "find-one-loyalty-program-in-loyalty-program;find-one-active-loyalty-program-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11816500,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1266700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151825900,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1375700,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1042500,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15902500,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18764200,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 121
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19292600,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"(response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027]))\" should equal with data \"(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "(false)",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 19,
        "name": "Find one deleted loyalty program code",
        "description": "",
        "id": "find-one-loyalty-program-in-loyalty-program;find-one-deleted-loyalty-program-code",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13810700,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1192000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"(blibli_,random(10))\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "(blibli_,random(10))",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6005000,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba",
                  "Ini adalah program coba - coba",
                  "1000",
                  "14"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2464100,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 168498000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 985300,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 165805200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 890600,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 133533200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1114500,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 802700,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16471000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16674400,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 121
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14870200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramName\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramName\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramName\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramName\u0027])",
                  "offset": 121
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20254400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 106
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])",
                  "offset": 130
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18275400,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 120
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])",
                  "offset": 144
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35447300,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramDescription\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramDescription\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramDescription\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 104
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramDescription\u0027])",
                  "offset": 128
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15143100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response data \"(response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027]))\" should equal with data \"(true)\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "(true)",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Find one loyalty program when loyaltyProgramCode is empty",
        "description": "",
        "id": "find-one-loyalty-program-in-loyalty-program;find-one-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8194800,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 137797500,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 937200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 57,
        "name": "Find one loyalty program when loyaltyProgramCode is not found",
        "description": "",
        "id": "find-one-loyalty-program-in-loyalty-program;find-one-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7807900,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 166266300,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "(blibli_,random(10))"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1106200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 58,
        "name": "Find one loyalty program when loyaltyProgramCode and markForDelete is not match",
        "description": "",
        "id": "find-one-loyalty-program-in-loyalty-program;find-one-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9137200,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 153957500,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 958500,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Find one loyalty program in loyalty program",
    "description": "",
    "id": "find-one-loyalty-program-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/loyaltyprogram/FindOneLoyaltyProgram.feature",
    "tags": [
      {
        "name": "@FindOneLoyaltyProgramFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyProgram",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287026",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Revert delete the deleted loyalty program",
        "description": "",
        "id": "revert-delete-loyalty-program-in-loyalty-program;revert-delete-the-deleted-loyalty-program",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9090800,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1547300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"(blibli_,random(10))\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "(blibli_,random(10))",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4216700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba",
                  "Ini adalah program coba - coba",
                  "1000",
                  "14"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1937000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 174144000,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 899600,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 121421000,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 994900,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 866600,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14332700,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142526300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 974800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 173994600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1209600,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 142618300,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 862400,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 154955900,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 943300,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 143494200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1162500,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 45,
        "name": "Revert delete still active loyalty program",
        "description": "",
        "id": "revert-delete-loyalty-program-in-loyalty-program;revert-delete-still-active-loyalty-program",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9962800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1035300,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 214217200,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1201600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 156686300,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1028300,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 741000,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15052000,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Revert delete loyalty program when loyaltyProgramCode is empty",
        "description": "",
        "id": "revert-delete-loyalty-program-in-loyalty-program;revert-delete-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9256000,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 148574200,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 821400,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Revert delete loyalty program when loyaltyProgramCode is not found",
        "description": "",
        "id": "revert-delete-loyalty-program-in-loyalty-program;revert-delete-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7201300,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 138653300,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "(random(10))"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1071300,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyProgram"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Revert delete loyalty program in loyalty program",
    "description": "",
    "id": "revert-delete-loyalty-program-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/loyaltyprogram/RevertDeleteLoyaltyProgram.feature",
    "tags": [
      {
        "name": "@RevertDeleteLoyaltyProgramFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyProgram",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 36
        }
      },
      {
        "name": "@TestSuiteId\u003d13287026",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 52
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save loyalty program in positive scenario",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7600100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 856100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"(blibli_,random(10))\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "(blibli_,random(10))",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3430600,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba",
                  "Ini adalah program coba - coba",
                  "1000",
                  "14"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1266200,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135714200,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 823500,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 151669800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1530400,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 885200,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16718400,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18189800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 121
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14502200,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramName\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramName\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramName\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 97
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramName\u0027])",
                  "offset": 121
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15107000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 106
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointExchangeRateIDR\u0027])",
                  "offset": 130
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15005300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 120
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyPointDefaultExpirationPeriodInDays\u0027])",
                  "offset": 144
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12949800,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramDescription\u0027])\" should equal with data \"request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramDescription\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramDescription\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 104
                },
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027][\u0027loyaltyProgramDescription\u0027])",
                  "offset": 128
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17206900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response data \"(response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027]))\" should equal with data \"(false)\"",
            "match": {
              "arguments": [
                {
                  "val": "(response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027][\u0027markForDelete\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 94
                },
                {
                  "val": "(false)",
                  "offset": 118
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 167984800,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1178600,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 163568300,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 958400,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 38,
        "name": "Save loyalty program when loyaltyProgramCode already exists",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-loyaltyprogramcode-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9682200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1289800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"(blibli_,random(10))\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "(blibli_,random(10))",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2009000,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba",
                  "Ini adalah program coba - coba",
                  "1000",
                  "14"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 987500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152419800,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 994600,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 148550400,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 729600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 478500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13299200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response data \"response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027loyaltyProgramResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 75
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2179300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 135158100,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1005600,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 159604800,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 919800,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 148632300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 923700,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negatvie"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 78,
        "name": "Save loyalty program when loyaltyProgramCode is empty",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7942600,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2574300,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1200400,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140037600,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 586200,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 79,
        "name": "Save loyalty program when loyaltyProgramName is empty",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8661100,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2438700,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "",
                  "ini percobaan",
                  "0",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1535500,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138662500,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 729400,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 80,
        "name": "Save loyalty program when loyaltyPointExchangeRateIDR is \u003c 0",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9044200,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1994200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "-1",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1603600,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151682900,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1004900,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 81,
        "name": "Save loyalty program when loyaltyPointDefaultExpirationPeriodInDays is \u003c 0",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9306000,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2601500,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "-1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1308100,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 153677200,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 911600,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Save loyalty program when body is empty",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8569700,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1830200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "-1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 742100,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169325000,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 797000,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 83,
        "name": "Save loyalty program when body is not valid",
        "description": "",
        "id": "save-loyalty-program-in-loyalty-program;save-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8277300,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2185300,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "-1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 956500,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140765200,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1030300,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save loyalty program in loyalty program",
    "description": "",
    "id": "save-loyalty-program-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/loyaltyprogram/SaveLoyaltyProgram.feature",
    "tags": [
      {
        "name": "@SaveLoyaltyProgramFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13287026",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 42
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Update loyalty program in positive scenario",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8920900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1131400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"(blibli_,random(10))\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "(blibli_,random(10))",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4397300,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba",
                  "Ini adalah program coba - coba",
                  "1000",
                  "14"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1505400,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 159807800,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"loyaltyprogram/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 721500,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 136637800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2451700,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to loyaltyProgramResponse",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 775900,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2452600,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "Program Coba - Coba Baru",
                  "Ini adalah program coba - coba Baru",
                  "12000",
                  "30"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1784300,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148965100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1161200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 184512000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] loyalty program should be updated",
            "match": {
              "location": "LoyaltyProgramSteps.xLoyaltyLoyaltyProgramShouldBeUpdated()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158196700,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] try DELETE request to \"loyaltyprogram/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1058200,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 177793800,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] try GET request to \"loyaltyprogram/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 851000,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 48,
        "name": "Update loyalty program when loyaltyProgramCode is empty",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7928800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1387800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1108300,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161581700,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 850100,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 49,
        "name": "Update loyalty program when loyaltyProgramName is empty",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8212100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2901200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "",
                  "ini percobaan",
                  "0",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1344400,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140493100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 826500,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 50,
        "name": "Update loyalty program when loyaltyPointExchangeRateIDR is \u003c 0",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8723800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2599000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "-1",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1420800,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 190713100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 751000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 51,
        "name": "Update loyalty program when loyaltyPointDefaultExpirationPeriodInDays is \u003c 0",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10203000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4337000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "-1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1184700,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027loyaltyProgramRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027loyaltyProgramRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154816500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 767500,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Update loyalty program when body is empty",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10578000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2586000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "-1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1113200,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 131995000,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 774200,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 53,
        "name": "Update loyalty program when body is not valid",
        "description": "",
        "id": "update-loyalty-program-in-loyalty-program;update-loyalty-program-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8323100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2449800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data loyaltyProgramRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "loyaltyProgramName",
                  "loyaltyProgramDescription",
                  "loyaltyPointExchangeRateIDR",
                  "loyaltyPointDefaultExpirationPeriodInDays"
                ]
              },
              {
                "cells": [
                  "random(6)",
                  "random(6)",
                  "ini percobaan",
                  "0",
                  "-1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 914400,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139891000,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try PUT request to \"loyaltyprogram/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "loyaltyprogram/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 986000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateLoyaltyProgramFeature"
          },
          {
            "name": "@LoyaltyLevel"
          },
          {
            "name": "@TestSuiteId\u003d13287026"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Update loyalty program in loyalty program",
    "description": "",
    "id": "update-loyalty-program-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/loyaltyprogram/UpdateLoyaltyProgram.feature",
    "tags": [
      {
        "name": "@UpdateLoyaltyProgramFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyLevel",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 30
        }
      },
      {
        "name": "@TestSuiteId\u003d13287026",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 44
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Find one member card in positive scenario",
        "description": "",
        "id": "find-member-card-by-member-id-in-member-card;find-one-member-card-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9820200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2387887500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] get one random memberId and userName",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdAndUserName()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166892100,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1269200,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 810300,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12269900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14670300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15862700,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18173400,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027usernameId\u0027])\" should equal with data \"request($[\u0027usernameId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027usernameId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "request($[\u0027usernameId\u0027])",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindOneMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 29,
        "name": "Find one member card when memberId is empty",
        "description": "",
        "id": "find-member-card-by-member-id-in-member-card;find-one-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10390800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 156527500,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 939800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 30,
        "name": "Find one member card when memberId is not found",
        "description": "",
        "id": "find-member-card-by-member-id-in-member-card;find-one-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9309600,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 153476100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(5)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 981400,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 31,
        "name": "Find one member card when loyaltyProgramCode is empty",
        "description": "",
        "id": "find-member-card-by-member-id-in-member-card;find-one-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9106900,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145800600,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "123"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 850600,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 32,
        "name": "Find one member card when loyaltyProgramCode is not found",
        "description": "",
        "id": "find-member-card-by-member-id-in-member-card;find-one-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8981500,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 178213200,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "(blibli_,random(10))"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "123"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1067500,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 33,
        "name": "Find one member card when memberId and loyaltyProgramCode is not match",
        "description": "",
        "id": "find-member-card-by-member-id-in-member-card;find-one-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6332500,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145303400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "(blibli_,random(10))"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "properties(default.memberId)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1068500,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Find member card by member id in member card",
    "description": "",
    "id": "find-member-card-by-member-id-in-member-card",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/membercard/FindOneMemberCard.feature",
    "tags": [
      {
        "name": "@FindOneMemberCardFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyMemberCard",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 27
        }
      },
      {
        "name": "@TestSuiteId\u003d13287027",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 46
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save member card in positive scenario",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7988200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 965800,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1144700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2524400,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1121900,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 275025300,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 868300,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 171819800,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 954300,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 582800,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16566500,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16721100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16985600,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027memberCardCreateRequest\u0027][\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23535200,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027usernameId\u0027])\" should equal with data \"request($[\u0027memberCardCreateRequest\u0027][\u0027usernameId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027usernameId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027][\u0027usernameId\u0027])",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 27,
        "name": "Save member card when member id already exists",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-when-member-id-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13025300,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2685100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1825300,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4021300,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1550200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 236691100,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 966400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 160962400,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1041600,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 737900,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15894800,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1845900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 217705200,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1515400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 59,
        "name": "Save member card when memberId is empty",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8168200,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1571400,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "random(10)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 866000,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149272700,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 842600,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 60,
        "name": "Save member card when loyaltyProgramCode is empty",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8991600,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2146900,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "",
                  "random(10)",
                  "random(10)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1279400,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160354600,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 925900,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 61,
        "name": "Save member card when loyaltyProgramCode is not found",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8961400,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2083200,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "random(10)",
                  "random(10)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1456700,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142040500,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1143400,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 62,
        "name": "Save member card when body is empty",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9419300,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1956700,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "random(10)",
                  "random(10)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1037900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142886300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 934900,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 63,
        "name": "Save member card when body is not valid",
        "description": "",
        "id": "save-member-card-in-loyalty-program;save-member-card-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8900600,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1563500,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "random(10)",
                  "random(10)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 912200,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138312200,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 967700,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveMemberCardFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save member card in loyalty program",
    "description": "",
    "id": "save-member-card-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/membercard/SaveMemberCard.feature",
    "tags": [
      {
        "name": "@SaveMemberCardFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyMemberCard",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 24
        }
      },
      {
        "name": "@TestSuiteId\u003d13287027",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 43
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 8,
        "name": "Sync member card data when active point is greater than reward bucket",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-active-point-is-greater-than-reward-bucket",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7354500,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2113400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1518000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3205500,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1330300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152153200,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1144200,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 171276300,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1211300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 839700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16587300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1051000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1170400,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1281700,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5576700,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2411700,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166845500,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 926800,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 195909400,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2020300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] assign response data point with value \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 823522900,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 916335000,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] get specified member latest acquisition history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1643774000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 918406000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1464200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1388700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1682200,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7164100,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2495500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176848200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1209300,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1399500,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1386300,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] prepare request data expDays with value \"90\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "90",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1639800,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6965700,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2375300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 267591900,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1222800,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1753552700,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1383200,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data pointDifference with value \"number(100,300)\"",
            "match": {
              "arguments": [
                {
                  "val": "pointDifference",
                  "offset": 33
                },
                {
                  "val": "number(100,300)",
                  "offset": 61
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 912026600,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] increase current member card active point by \"request($[\u0027pointDifference\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "\"request($[\u0027pointDifference\u0027])\"",
                  "offset": 57
                }
              ],
              "location": "MemberCardSteps.xLoyaltyIncreaseCurrentMemberCardActivePointBy(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 214698300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 860900,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 910892100,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] member oldest active reward bucket should be updated correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltyMemberOldestActiveRewardBucketShouldBeUpdatedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Sync member card data when active point is less than reward bucket",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-active-point-is-less-than-reward-bucket",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9972100,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1345200,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1317100,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3062300,
              "status": "passed"
            },
            "line": 73,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1706300,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 245951400,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 931200,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 158654300,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1062800,
              "status": "passed"
            },
            "line": 83,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 732500,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14429200,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1102600,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1035600,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1175400,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5543700,
              "status": "passed"
            },
            "line": 89,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2189500,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 230551500,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 631400,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 185026100,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1983800,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] assign response data point with value \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 926200000,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 919505600,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] get specified member latest acquisition history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1778365600,
              "status": "passed"
            },
            "line": 99,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 959944700,
              "status": "passed"
            },
            "line": 100,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 777800,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 613900,
              "status": "passed"
            },
            "line": 102,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 679000,
              "status": "passed"
            },
            "line": 103,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3682600,
              "status": "passed"
            },
            "line": 104,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1409400,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 208861300,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 826300,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 706900,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] prepare request data point with value \"100\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "100",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 938500,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] prepare request data expDays with value \"90\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "90",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 765400,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3567100,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2146100,
              "status": "passed"
            },
            "line": 116,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177091500,
              "status": "passed"
            },
            "line": 117,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 978200,
              "status": "passed"
            },
            "line": 118,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1741530300,
              "status": "passed"
            },
            "line": 119,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1491100,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] prepare request data pointDifference with value \"number(100,300)\"",
            "match": {
              "arguments": [
                {
                  "val": "pointDifference",
                  "offset": 33
                },
                {
                  "val": "number(100,300)",
                  "offset": 61
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 886663900,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] decrease current member card active point by \"request($[\u0027pointDifference\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "\"request($[\u0027pointDifference\u0027])\"",
                  "offset": 57
                }
              ],
              "location": "MemberCardSteps.xLoyaltyDecreaseCurrentMemberCardActivePointBy(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 156904500,
              "status": "passed"
            },
            "line": 122,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1034700,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 859303900,
              "status": "passed"
            },
            "line": 127,
            "name": "[x-loyalty] member oldest active reward bucket should not be updated",
            "match": {
              "location": "MemberCardSteps.xLoyaltyMemberOldestActiveRewardBucketShouldNotBeUpdated()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 130,
        "name": "Sync member card data when active point is equal with reward bucket",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-active-point-is-equal-with-reward-bucket",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9959400,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 952800,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 697400,
              "status": "passed"
            },
            "line": 133,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2726800,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1633200,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 208593500,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1037100,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 164359100,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1278100,
              "status": "passed"
            },
            "line": 144,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 851400,
              "status": "passed"
            },
            "line": 145,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17247800,
              "status": "passed"
            },
            "line": 146,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1014700,
              "status": "passed"
            },
            "line": 147,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1057400,
              "status": "passed"
            },
            "line": 148,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1249200,
              "status": "passed"
            },
            "line": 149,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4785500,
              "status": "passed"
            },
            "line": 150,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2173400,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 192778300,
              "status": "passed"
            },
            "line": 154,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 797000,
              "status": "passed"
            },
            "line": 155,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 178695000,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1840300,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] assign response data point with value \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 843811100,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 863078900,
              "status": "passed"
            },
            "line": 159,
            "name": "[x-loyalty] get specified member latest acquisition history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1721356800,
              "status": "passed"
            },
            "line": 160,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 996759400,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 720300,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 608200,
              "status": "passed"
            },
            "line": 163,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 703300,
              "status": "passed"
            },
            "line": 164,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3314000,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1379200,
              "status": "passed"
            },
            "line": 168,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184247300,
              "status": "passed"
            },
            "line": 169,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1005300,
              "status": "passed"
            },
            "line": 170,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1004400,
              "status": "passed"
            },
            "line": 171,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 827500,
              "status": "passed"
            },
            "line": 172,
            "name": "[x-loyalty] prepare request data expDays with value \"90\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "90",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 845800,
              "status": "passed"
            },
            "line": 173,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4302600,
              "status": "passed"
            },
            "line": 174,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1605700,
              "status": "passed"
            },
            "line": 177,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 185852800,
              "status": "passed"
            },
            "line": 178,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 851200,
              "status": "passed"
            },
            "line": 179,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1688772600,
              "status": "passed"
            },
            "line": 180,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 139644000,
              "status": "passed"
            },
            "line": 181,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 694700,
              "status": "passed"
            },
            "line": 185,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 859200400,
              "status": "passed"
            },
            "line": 186,
            "name": "[x-loyalty] member oldest active reward bucket should not be updated",
            "match": {
              "location": "MemberCardSteps.xLoyaltyMemberOldestActiveRewardBucketShouldNotBeUpdated()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 189,
        "name": "Sync member card data when member has no active reward bucket",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-member-has-no-active-reward-bucket",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9117600,
              "status": "passed"
            },
            "line": 190,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1032600,
              "status": "passed"
            },
            "line": 191,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 938000,
              "status": "passed"
            },
            "line": 192,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4070400,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1310800,
              "status": "passed"
            },
            "line": 196,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 191902800,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 855600,
              "status": "passed"
            },
            "line": 198,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166127500,
              "status": "passed"
            },
            "line": 199,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 735600,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 461300,
              "status": "passed"
            },
            "line": 204,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11206200,
              "status": "passed"
            },
            "line": 205,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17019800,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16609100,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027memberCardCreateRequest\u0027][\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11430900,
              "status": "passed"
            },
            "line": 208,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027usernameId\u0027])\" should equal with data \"request($[\u0027memberCardCreateRequest\u0027][\u0027usernameId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027usernameId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 85
                },
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027][\u0027usernameId\u0027])",
                  "offset": 109
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166306700,
              "status": "passed"
            },
            "line": 209,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 668900,
              "status": "passed"
            },
            "line": 213,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 225,
        "name": "Sync member card data when memberId is empty",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8613800,
              "status": "passed"
            },
            "line": 217,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 132888600,
              "status": "passed"
            },
            "line": 218,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  ""
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1191800,
              "status": "passed"
            },
            "line": 222,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 226,
        "name": "Sync member card data when memberId is not found",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9331600,
              "status": "passed"
            },
            "line": 217,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 150533300,
              "status": "passed"
            },
            "line": 218,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1028300,
              "status": "passed"
            },
            "line": 222,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 227,
        "name": "Sync member card data when loyaltyProgramCode is not found",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10421500,
              "status": "passed"
            },
            "line": 217,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145398700,
              "status": "passed"
            },
            "line": 218,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(100)"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "properties(default.memberId)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 936600,
              "status": "passed"
            },
            "line": 222,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 228,
        "name": "Sync member card data when loyaltyProgramCode is empty",
        "description": "",
        "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket;sync-member-card-data-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9723200,
              "status": "passed"
            },
            "line": 217,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 209856800,
              "status": "passed"
            },
            "line": 218,
            "name": "[x-loyalty] try POST request to \"membercard/syncToRewardBuckets\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/syncToRewardBuckets",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "memberId",
                  "properties(default.memberId)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1059600,
              "status": "passed"
            },
            "line": 222,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SyncToRewardBucketFeature"
          },
          {
            "name": "@LoyaltyMemberCard"
          },
          {
            "name": "@TestSuiteId\u003d13287027"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "to sync a member card active point in member card collection with its bucket",
    "description": "  The rule is applied when active point in member card data is greater than the sum of\n  total active point in its member reward bucket, then the difference in point will be added\n  to member reward bucket (the oldest non-expired one)",
    "id": "to-sync-a-member-card-active-point-in-member-card-collection-with-its-bucket",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/membercard/SyncToRewardBucket.feature",
    "tags": [
      {
        "name": "@SyncToRewardBucketFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyMemberCard",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 28
        }
      },
      {
        "name": "@TestSuiteId\u003d13287027",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 47
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 57,
        "name": "Acquire active purchase with adjustment when member is eligible",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6289000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 675600,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 840400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 583600,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 642800,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 902700,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2988800,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2212100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151228600,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 826600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 143024700,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 819000,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 543400,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11542300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 916708900,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 880235900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1949100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1747271500,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2941700,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11672000,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157778300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 966200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 826600,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10913500,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1541300,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 193401800,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 893200,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 496122000,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15105700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 877621000,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 912611100,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22715700,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20776700,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 914161100,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 198458800,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 919326000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 930473300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 58,
        "name": "Acquire active purchase with adjustment when member is eligible",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6995000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 729900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 648800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 962600,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 856400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 766300,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2656500,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 948500,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 241729900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 999400,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166412200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 891400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 609300,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10999200,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 938929500,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 877718100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1505300,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1708915800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1223800,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7381800,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171247100,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1259600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1000800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10252700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1562600,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 181928800,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 640900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 481083700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9650800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 868823600,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 904555900,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39972000,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 46498000,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 962732000,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 238621100,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 830675000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 921203900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 59,
        "name": "Acquire active purchase without adjustment when member is eligible",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13203400,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1226700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1109700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 776300,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 778800,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 737500,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5903900,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2689300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 203526300,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 954800,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 145675500,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1246700,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 947200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19405900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 893178200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 833793800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1901000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1916614800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2017900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7650000,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 128040500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1129900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 934400,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18916400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1650400,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 279921700,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1393800,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 423903100,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13451800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 864321700,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 867413500,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20845500,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27169300,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 889433100,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 200302500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 877628000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 927801600,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 60,
        "name": "Acquire active purchase with adjustment when blackListLevel is POINT_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9740600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1098300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1002700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 997900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1074100,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 993600,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2635700,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1376800,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 199285700,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1024600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 161317600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1920400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1071200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19664100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 858737900,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 833934100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2884000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1749261900,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1232000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4802300,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "POINT_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166191700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 986000,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 811600,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12973500,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1729500,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 168988400,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 770600,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 505254700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16377200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 834261200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 880925400,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22392900,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19725100,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 940142000,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 206398800,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 907021900,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 981323300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 61,
        "name": "Acquire active purchase with adjustment when blackListLevel is POINT_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10392300,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1332300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1496200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1577600,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2768500,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1656000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3562600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1558100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145655100,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 683100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 155252500,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1182100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1284900,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11846000,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 855486000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 902979000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1945900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1727362800,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1345100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4809000,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "POINT_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154195700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1529900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1353400,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10121200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1796900,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 232782100,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1268000,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 557455400,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10586700,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 843700900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 907096100,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21461200,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23658700,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 942498000,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 370216500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1408330100,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1433256000,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 62,
        "name": "Acquire active purchase without adjustment when blackListLevel is POINT_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6837900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1252500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1120200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1144500,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1469900,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1290200,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3181400,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1573400,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 373225100,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1208200,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 284391600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 894400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 499800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13140800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1059864200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 877745700,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1061200,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1716062700,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1287701,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4304200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "POINT_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152762699,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 777199,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 629199,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10560700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1349399,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 261826199,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 641300,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 458426700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12027901,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 828730501,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 869821800,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23976500,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20864699,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 944099399,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 185493400,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 893918301,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 847757900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 63,
        "name": "Acquire active purchase with adjustment when blackListLevel is PURCHASE_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8711100,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 974400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1286000,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1282600,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1478599,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1297299,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3231100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1796500,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 167965600,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1356000,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 148278899,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1283200,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 953401,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17006201,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 933244799,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 957453500,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1658000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1761042101,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1404000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7355101,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "PURCHASE_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 159371699,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1116500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 606300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15970700,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2191100,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 166269499,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 677100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 473703900,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11295100,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 932098500,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 905528300,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30003801,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18860600,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 936470600,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 209536601,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 987381200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 907732200,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 64,
        "name": "Acquire active purchase with adjustment when blackListLevel is PURCHASE_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7039900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1145400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1147800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 763101,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 987400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 963900,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2353600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1875700,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156499899,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1154199,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 127107100,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 811400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 553299,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10234400,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 901562600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 882031601,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1008399,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5860272100,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1409900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5703299,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "PURCHASE_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 203155400,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1296100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 736100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16320400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1919700,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 194843501,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 677100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 472258400,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10333600,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 897674600,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 871091400,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25037500,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25620401,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 895869200,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 203651000,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1005983000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 913247699,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 65,
        "name": "Acquire active purchase without adjustment when blackListLevel is PURCHASE_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8335400,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 777500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 656400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 640501,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1301699,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 716701,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1817800,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 883900,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 220458600,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 790900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 149818600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1064900,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 731000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16461800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 856012500,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 856828700,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1021200,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1717548599,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1318500,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3999799,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "PURCHASE_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148998000,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 961100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 696300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11107600,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1463401,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 242998101,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 890600,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 477934499,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10344200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 915960001,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 925476200,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22227300,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19310300,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 942059400,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 214829900,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 917618800,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 954431999,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 66,
        "name": "Acquire active purchase with adjustment when orderItemBasePoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7804700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1030099,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1043800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 967699,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1157400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 988400,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1618700,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1192300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 284437599,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1119500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 189490300,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1038400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 869700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16129400,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 895625901,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 928595200,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1562200,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1699672300,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1074200,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4584100,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "150",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150484899,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 851800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 571500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11737899,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1471701,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 164082700,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 665699,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 523120101,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13056800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 984717999,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 891179399,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21541799,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27154299,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 909136700,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 201954601,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 963587100,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1307982900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 67,
        "name": "Acquire active purchase with adjustment when orderItemBasePoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6454401,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 772900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 697500,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 874900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 954199,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 769100,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1735799,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 900900,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156020401,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1223600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 151607701,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 847000,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 567900,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10390100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 891863000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 854412699,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1357800,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1867696099,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1082900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4111300,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "150",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149981300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 861900,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 724200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10517301,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1928400,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 222887300,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 948801,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 497435999,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11235400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 846156200,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 880806800,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24492499,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21415900,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 981622499,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 202615401,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 927150000,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 885108400,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 68,
        "name": "Acquire active purchase without adjustment when orderItemBasePoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8789900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 731200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 660200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 650500,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 723399,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 662701,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1655900,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 910400,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 137020300,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1015500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 206960400,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1101900,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 863000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14621501,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 808374800,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 824233800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1751100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1767602899,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1333100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4671200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "150",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 165732999,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 804401,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 552000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11256601,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2275201,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 226202200,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1100900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 478132300,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26713800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 911350500,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 938847701,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20475600,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25953000,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 859464501,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 189652900,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 898299999,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 941447200,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 69,
        "name": "Acquire active purchase with adjustment when orderItemBonusPoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8692499,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1134800,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 992301,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 971800,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1074600,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1010699,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1798800,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 835500,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 229055099,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1009400,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 142591000,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1342500,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 947900,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17667801,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 892912400,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 27600444800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1121500,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1828094300,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1700200,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4360399,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "50",
                  "15",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 243888199,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1071700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 616700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10023701,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1621000,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 279543400,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 719500,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 457187800,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12651800,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 820907800,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 982686700,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30908801,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27825100,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 844305199,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 190905800,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 846511200,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 926180601,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 70,
        "name": "Acquire active purchase with adjustment when orderItemBonusPoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;15",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5330999,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 738900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 890800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 893900,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 696700,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 625099,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1539099,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 808900,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 144981801,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 859900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 249641299,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1204200,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 909700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11260000,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 841085600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 963260101,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1497300,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1744471100,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1258400,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4235300,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "50",
                  "15",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142120701,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 796600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 780500,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11936500,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1476200,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 316472800,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 704900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 520022799,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13418900,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 867645100,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 841534600,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20011799,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20392900,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 923679501,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 195851000,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 874403600,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 888144101,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 71,
        "name": "Acquire active purchase without adjustment when orderItemBonusPoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;16",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8147501,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1035700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 915901,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1037700,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1085000,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 931400,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2518299,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1216799,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 248577100,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1018600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 167333400,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1170999,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 976099,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15079801,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 841642200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 837616600,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1174301,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1877811900,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1603800,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4139101,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "50",
                  "15",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 183658699,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1228500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 995101,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13945100,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1705000,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 256657299,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 735800,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 499573800,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10786500,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 819147900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 832230499,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23454200,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24296600,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 923297100,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 188034701,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 926321101,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 853256700,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 115,
        "name": "Acquire active purchase with adjustment when member is not pnv",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9252100,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1116500,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 996400,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 966900,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 996001,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2935800,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1230100,
              "status": "passed"
            },
            "line": 83,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 237781699,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1250899,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 164777600,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 990300,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1145200,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15544300,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 887815400,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 880616699,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1264300,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3768300,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "false",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162444900,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 874500,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 572999,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11767701,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1428800,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 159834499,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 681500,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 977194701,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] should not create purchase history for latest order acquisition",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreatePurchaseHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 883918800,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] should not create point acquisition history for latest order",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreatePointAcquisitionHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 116,
        "name": "Acquire active purchase without adjustment when member is not pnv",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9068000,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1078200,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1011200,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 967201,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1034000,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2812600,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1361300,
              "status": "passed"
            },
            "line": 83,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158144000,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1021801,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 158510700,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1448999,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1164301,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18454400,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 895338100,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 882139601,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1134600,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3275300,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "false",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152786499,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1006800,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 605700,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10182500,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1485599,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 206663600,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 676700,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 835628000,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] should not create purchase history for latest order acquisition",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreatePurchaseHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 883022800,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] should not create point acquisition history for latest order",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreatePointAcquisitionHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 119,
        "name": "Acquire purchase point from pending to active",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-purchase-point-from-pending-to-active",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7937299,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1034299,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 981000,
              "status": "passed"
            },
            "line": 122,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 931300,
              "status": "passed"
            },
            "line": 123,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1158600,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3390500,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1938999,
              "status": "passed"
            },
            "line": 128,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 231675800,
              "status": "passed"
            },
            "line": 129,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1109200,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 167427099,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 864900,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 675699,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13435000,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 943894700,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 891409301,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1144101,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3583901,
              "status": "passed"
            },
            "line": 143,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 155655500,
              "status": "passed"
            },
            "line": 146,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1027600,
              "status": "passed"
            },
            "line": 150,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 844800,
              "status": "passed"
            },
            "line": 151,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10819199,
              "status": "passed"
            },
            "line": 152,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2149500,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 208082300,
              "status": "passed"
            },
            "line": 154,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 697900,
              "status": "passed"
            },
            "line": 155,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 927089100,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 490462301,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21398500,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 270870300,
              "status": "passed"
            },
            "line": 159,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142130700,
              "status": "passed"
            },
            "line": 160,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 794701,
              "status": "passed"
            },
            "line": 164,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 624299,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10980801,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 895399,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1303999,
              "status": "passed"
            },
            "line": 168,
            "name": "[x-loyalty] get expiration period from selected purchase action point",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetExpirationPeriodFromSelectedPurchaseActionPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1787939300,
              "status": "passed"
            },
            "line": 169,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4795100,
              "status": "passed"
            },
            "line": 170,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1348099,
              "status": "passed"
            },
            "line": 173,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 264586401,
              "status": "passed"
            },
            "line": 174,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 678901,
              "status": "passed"
            },
            "line": 175,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 525938199,
              "status": "passed"
            },
            "line": 176,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10366000,
              "status": "passed"
            },
            "line": 177,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 855310200,
              "status": "passed"
            },
            "line": 178,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 20202500,
              "status": "passed"
            },
            "line": 179,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"CX\"",
            "match": {
              "arguments": [
                {
                  "val": "CX",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 224821001,
              "status": "passed"
            },
            "line": 180,
            "name": "[x-loyalty] specified member totalInactive point should be decreased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeDecreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 886520300,
              "status": "passed"
            },
            "line": 181,
            "name": "[x-loyalty] get specified member latest acquisition history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestAcquisitionHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 910441000,
              "status": "passed"
            },
            "line": 182,
            "name": "[x-loyalty] get specified member latest purchase history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestPurchaseHistoryDataByOrderItemId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25252200,
              "status": "passed"
            },
            "line": 183,
            "name": "[x-loyalty] specified member acquisition history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberAcquisitionHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24695300,
              "status": "passed"
            },
            "line": 184,
            "name": "[x-loyalty] specified member purchase history by memberCardId and acquisitionHistoryRemark should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberPurchaseHistoryByMemberCardIdAndAcquisitionHistoryRemarkShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 201520799,
              "status": "passed"
            },
            "line": 185,
            "name": "[x-loyalty] member card totalAcquiredPoint and totalActive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltyMemberCardTotalAcquiredPointAndTotalActivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 902904900,
              "status": "passed"
            },
            "line": 186,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 193067900,
              "status": "passed"
            },
            "line": 187,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 892236001,
              "status": "passed"
            },
            "line": 188,
            "name": "[x-loyalty] current member reward bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberRewardBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 877125799,
              "status": "passed"
            },
            "line": 189,
            "name": "[x-loyalty] current member loyalty bucket point should be increased correctly",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLoyaltyBucketPointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 205,
        "name": "Acquire active purchase when memberId is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7834700,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1120000,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2907800,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 895600,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 134353900,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 931499,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 206,
        "name": "Acquire active purchase when category Id is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8111500,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1676199,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5667399,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1357899,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 149015800,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 985700,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 207,
        "name": "Acquire active purchase when category Id is not found",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8311100,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1588400,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5470401,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "random(10)",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1318400,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 250514800,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1035900,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 208,
        "name": "Acquire active purchase when orderId is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10619400,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1854700,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5816100,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1328000,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 153061900,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 831100,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 209,
        "name": "Acquire active purchase when orderItemId is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9776000,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2031000,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5300601,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1991700,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 156113799,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 953500,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 210,
        "name": "Acquire active purchase when adjustmentType is not found",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9072100,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1652000,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "SADAFSA",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5016400,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1348001,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 154297000,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 955300,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 211,
        "name": "Acquire active purchase when adjustmentType is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9138300,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1717901,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5007499,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1236900,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 172653201,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 549200,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 212,
        "name": "Acquire active purchase when loyaltyProgramCode is not found",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8047200,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1565700,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5264100,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1452400,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 164062500,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 783501,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 213,
        "name": "Acquire active purchase when loyaltyProgramCode is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8252900,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1573900,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5314899,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1429800,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 157980600,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 861001,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 214,
        "name": "Acquire active purchase when blackListLevel is not found",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8117800,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1785600,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4586200,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "RASADAS",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1189800,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 254895000,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 891100,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 215,
        "name": "Acquire active purchase when orderItemAmount is \u003c 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9491299,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1877099,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6704900,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "-1",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1634100,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 150131201,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 899500,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 216,
        "name": "Acquire active purchase when timestamp is null",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5793301,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 936200,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3888000,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "null",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1488700,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 130546799,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 882900,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 217,
        "name": "Acquire active purchase when quantity is \u003c\u003d 0",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7369000,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 984599,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5132700,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1455100,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 149270600,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1042300,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 218,
        "name": "Acquire active purchase when body is empty",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;15",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7537200,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 978401,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2865400,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 729500,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 163383500,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 915100,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 219,
        "name": "Acquire active purchase when body is not valid",
        "description": "",
        "id": "acquire-purchase-active-point-in-loyalty-program;acquire-active-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;16",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7765601,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 922799,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2891101,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 602399,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 137809801,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 856701,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseActivePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Acquire purchase active point in loyalty program",
    "description": "",
    "id": "acquire-purchase-active-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/AcquirePurchaseActivePoint.feature",
    "tags": [
      {
        "name": "@AcquirePurchaseActivePointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 36
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 50
        }
      },
      {
        "name": "@LoyaltyConversion",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 72
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Cancel acquire purchase point on pending order",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-on-pending-order",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8489701,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1013700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 900000,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 869300,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 936299,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3315201,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1626300,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 185064700,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 920200,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 145616799,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1242200,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1005700,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18405601,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 887138199,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 875682600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 985901,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3896499,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151800200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 828600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 551000,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15414600,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2155200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 190997799,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 655200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 916825699,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 499786699,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20651299,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 215232700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139372200,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1055699,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 796400,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14563100,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1147600,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5530399,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1560099,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164298499,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 623800,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 470520200,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10349600,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] prepare request data point with value \"response($[\u0027totalAcquiredPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027totalAcquiredPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 878826499,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21897900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"X\"",
            "match": {
              "arguments": [
                {
                  "val": "X",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 209185701,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] specified member totalInactive point should be decreased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeDecreasedCorrectly()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 946827500,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] should not create purchase history for latest order acquisition",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreatePurchaseHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 849032400,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] should not create point acquisition history for latest order",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreatePointAcquisitionHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Cancel acquire purchase point when memberId is empty",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8519600,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1346799,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23088701,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1401600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 155186799,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 903900,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 83,
        "name": "Cancel acquire purchase point when orderId is empty",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9982200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1393300,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3542300,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1457000,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 148392000,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 939400,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 84,
        "name": "Cancel acquire purchase point when orderItemId is empty",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5376100,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 977899,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4281699,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1501000,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 188822100,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 842000,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 85,
        "name": "Cancel acquire purchase point when adjustmentType is not found",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8290200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1568199,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "SADAFSA",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5291900,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1379600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 155326100,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 908800,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 86,
        "name": "Cancel acquire purchase point when adjustmentType is empty",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8601300,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1517900,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4228000,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1490500,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 144060400,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1160800,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 87,
        "name": "Cancel acquire purchase point when loyaltyProgramCode is not found",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8746501,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1687300,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5768899,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1563600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 165979300,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 895700,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 88,
        "name": "Cancel acquire purchase point when loyaltyProgramCode is empty",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9602700,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1789500,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5698799,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1310699,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 157302500,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1154900,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 89,
        "name": "Cancel acquire purchase point when blackListLevel is not found",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10641799,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1478700,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3942600,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "RASADAS",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1797600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 159885400,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1052600,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 90,
        "name": "Cancel acquire purchase point when orderItemAmount is \u003c 0",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8979200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2079500,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6080100,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "-1",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1344200,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 153758800,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 993199,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 91,
        "name": "Cancel acquire purchase point when timestamp is null",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10586001,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2281000,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4852000,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "null",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1335600,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 169200001,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1032100,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 92,
        "name": "Cancel acquire purchase point when quantity is \u003c\u003d 0",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8496900,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1557600,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4991500,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1190200,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 186770200,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 888100,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 93,
        "name": "Cancel acquire purchase point when body is empty",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8054799,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1220900,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2880299,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 609601,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 157931001,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 856200,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 94,
        "name": "Cancel acquire purchase point when body is not valid",
        "description": "",
        "id": "cancel-purchase-point-in-loyalty-program;cancel-acquire-purchase-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7705499,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1543600,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4622401,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 918300,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146905500,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] try POST request to \"point/purchaseCancel\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseCancel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 872900,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchaseCancelFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Cancel purchase point in loyalty program",
    "description": "",
    "id": "cancel-purchase-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/AcquirePurchaseCancel.feature",
    "tags": [
      {
        "name": "@AcquirePurchaseCancelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 45
        }
      },
      {
        "name": "@LoyaltyConversion",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 67
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 48,
        "name": "Acquire pending purchase with adjustment when member is eligible",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8569900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 879201,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1275901,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1178601,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1049399,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2193400,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1705699,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 201954100,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1011801,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 137959600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1092300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 872100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16347900,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 863549599,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 906888300,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1120199,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4170300,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 179523600,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 832900,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 577700,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10210700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1370100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 177306499,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 628899,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 865626301,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 498768000,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26430499,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 189276700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 49,
        "name": "Acquire pending purchase without adjustment when member is eligible",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9905900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1130700,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1070700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1180801,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1097400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1802600,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1832899,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176730901,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 894400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 134056299,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1334900,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 836500,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12622300,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 915413801,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 843758600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1442600,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6077700,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162628899,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 889800,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1380001,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16237400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1859700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 190877400,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 918601,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 898144700,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 525134799,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23993901,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 215420100,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 50,
        "name": "Acquire pending purchase with adjustment when blackListLevel is POINT_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6748900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1024400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1158700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1302901,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1252700,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2671200,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1653200,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 215856399,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 925399,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 182215100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1259299,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 913299,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17169800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 860927000,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 884961901,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1534000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4497299,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "POINT_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151147201,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1202101,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 775701,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13551700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2219401,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 165201201,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 626400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 885034500,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 471755000,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20133499,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 200665500,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 51,
        "name": "Acquire pending purchase without adjustment when blackListLevel is POINT_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9061099,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1034800,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 981400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 931001,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 973601,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2340201,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1071800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 242833500,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 952200,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 154847100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1501300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 988300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11687100,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 834753100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 869511600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1549601,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4854300,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "POINT_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157169000,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 869400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 595500,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10321001,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1656800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 161037899,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 655200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 910837799,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 522169300,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39846100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 191153099,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 52,
        "name": "Acquire pending purchase with adjustment when blackListLevel is PURCHASE_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10766700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 723301,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 604299,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 580400,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 775299,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1820999,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 852200,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 336714701,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 977900,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 144049900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 983800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 755401,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15666000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 901691100,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 947256499,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1197099,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3955700,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "PURCHASE_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164657500,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 789600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 546100,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11450600,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1359800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 173263200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 729800,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 918596201,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 535800300,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27289801,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 218313200,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 53,
        "name": "Acquire pending purchase without adjustment when blackListLevel is PURCHASE_NOT_ALLOWED",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7263200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 679300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 559700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 492200,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 693400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1442099,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 898400,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 167768501,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 995500,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 153375300,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1045000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 747200,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13497000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 963803600,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 926025400,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1261300,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3491900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "PURCHASE_NOT_ALLOWED",
                  "true",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154142100,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 769400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 551900,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11024300,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1438999,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 165537899,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 846500,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 891766301,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 462709101,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39021899,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 202369600,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 54,
        "name": "Acquire pending purchase with adjustment when orderItemBasePoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8606200,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1012900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1023400,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1280800,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1011300,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2694300,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1199700,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169456800,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 951600,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 150799199,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1044800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 915100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15684100,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1043554400,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1441993000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1121100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3604100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "150",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160056300,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1108900,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 780000,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11545400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1689700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 264909200,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 983100,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 987261000,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 507114201,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20882000,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 267560899,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Acquire pending purchase without adjustment when orderItemBasePoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7524900,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1045200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 986900,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 952699,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 942301,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2898000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1264101,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 179586300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 947299,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 233907700,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 664700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 680600,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14864101,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 953104801,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 938393201,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1068000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3697900,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "150",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147073001,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1156000,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 809700,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10010600,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1451700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 232285999,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 675900,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 999500899,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 507619901,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38372100,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 207138400,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Acquire pending purchase with adjustment when orderItemBonusPoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9583700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1346999,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1346299,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1130600,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1404701,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3519199,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1455800,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157608200,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1099500,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 176239101,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1287000,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 919301,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11181700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 942955199,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 959054301,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1002000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3798099,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "50",
                  "15",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151259201,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 863700,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 594300,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11093500,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1542700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 233158100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 990000,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 955794200,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 586967401,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20827800,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 205222300,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 57,
        "name": "Acquire pending purchase without adjustment when orderItemBonusPoint is \u003e 0",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8465999,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1037899,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 963300,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 975300,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1160701,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2781301,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1240500,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154716801,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1078100,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 158341399,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1081300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 593100,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14375701,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 943469300,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 850901600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1988699,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5657801,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "true",
                  "50",
                  "15",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151928200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 800201,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 542500,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9991700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1592600,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 160967000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 802400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 934967700,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] get specified member latest inactive history data by orderItemId",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestInactiveHistoryDataByOrderItemId()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 562227200,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] calculate acquired point from purchase request",
            "match": {
              "location": "HistorySteps.calculateAcquiredPointFromPurchase()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21098000,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] specified member latest inactive history data should be correct with status \"FP\"",
            "match": {
              "arguments": [
                {
                  "val": "FP",
                  "offset": 89
                }
              ],
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestInactiveHistoryDataShouldBeCorrect(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 220861600,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] specified member totalInactive point should be increased correctly",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalInactivePointShouldBeIncreasedCorrectly()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 100,
        "name": "Acquire pending purchase with adjustment when member is not pnv",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8701699,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 972699,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1024299,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1146300,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1047601,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2562700,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1335199,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148610201,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1026099,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 162433900,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1132100,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 937300,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16585000,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 827645200,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 980197100,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1132200,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5236500,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "false",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160388901,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 796001,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 588200,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11670100,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1482900,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 159391200,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 841700,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 866509800,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] should not create inactive point history for latest order acquisition",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreateInactiveHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 101,
        "name": "Acquire pending purchase without adjustment when member is not pnv",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-\u003cadj\u003e-adjustment-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8854299,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1104301,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 958300,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data orderId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 927001,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] prepare request data orderItemId with value \"random(7,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "orderItemId",
                  "offset": 33
                },
                {
                  "val": "random(7,NUMERIC)",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 925400,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2517100,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1235200,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173638100,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 979100,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 157875901,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1216900,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 924099,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18389101,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 931798000,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 919752800,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1514100,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3641200,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "request($[\u0027orderId\u0027])",
                  "request($[\u0027orderItemId\u0027])",
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "NORMAL",
                  "false",
                  "0",
                  "0",
                  "1",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151849799,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 910000,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 759000,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10895900,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1782100,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 189153699,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 682899,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 837905700,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] should not create inactive point history for latest order acquisition",
            "match": {
              "location": "HistorySteps.xLoyaltyShouldNotCreateInactiveHistoryAcquisitionForLatestOrder()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 117,
        "name": "Acquire pending purchase when memberId is empty",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8797900,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1933900,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4673700,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1585700,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 170774401,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1186701,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 118,
        "name": "Acquire pending purchase when orderId is empty",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7761101,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1112200,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3256101,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1002400,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 160574900,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1221400,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 119,
        "name": "Acquire pending purchase when orderItemId is empty",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8477900,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1953399,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4622500,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1230000,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 156945500,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 732900,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 120,
        "name": "Acquire pending purchase when adjustmentType is not found",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7616199,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1556200,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "SADAFSA",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4990800,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1491200,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 165253400,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1149900,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 121,
        "name": "Acquire pending purchase when adjustmentType is empty",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7870101,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1402901,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4992799,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1596600,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 160316900,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 854799,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 122,
        "name": "Acquire pending purchase when loyaltyProgramCode is not found",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7717200,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1434801,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4962000,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1440799,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 181072400,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 657900,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 123,
        "name": "Acquire pending purchase when loyaltyProgramCode is empty",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8407800,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1765300,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4853200,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1367600,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 167981300,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1126500,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 124,
        "name": "Acquire pending purchase when blackListLevel is not found",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10868000,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2051300,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5457400,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "500000",
                  "FLIGHT",
                  "RASADAS",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1416300,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 286962800,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 864700,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 125,
        "name": "Acquire pending purchase when orderItemAmount is \u003c 0",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8010100,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1643500,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5372400,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "-1",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1249300,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 179756099,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 633799,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 126,
        "name": "Acquire pending purchase when timestamp is null",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7102000,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1017299,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2672800,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "null",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 997201,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 143651000,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 697700,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 127,
        "name": "Acquire pending purchase when quantity is \u003c\u003d 0",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7671300,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2013501,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4026300,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1313400,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 149281000,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 674200,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 128,
        "name": "Acquire pending purchase when body is empty",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;13",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9168899,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1738800,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5350701,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 844800,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 184881600,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 645300,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 129,
        "name": "Acquire pending purchase when body is not valid",
        "description": "",
        "id": "acquire-purchase-for-pending-order-in-loyalty-program;acquire-pending-purchase-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;14",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8504701,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1855499,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "10",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5444200,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "0",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 953500,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 136477300,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] try POST request to \"point/purchasePendingPoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchasePendingPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 959300,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@AcquirePurchasePendingPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Acquire purchase for pending order in loyalty program",
    "description": "",
    "id": "acquire-purchase-for-pending-order-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/AcquirePurchasePending.feature",
    "tags": [
      {
        "name": "@AcquirePurchasePendingPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 51
        }
      },
      {
        "name": "@LoyaltyConversion",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 73
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Calculate point for single unknown category id",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-for-single-unknown-category-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9343899,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1135900,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4411800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "random(14)",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3113601,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149201900,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3500500,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1080400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19942900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10394200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 21,
        "name": "Calculate point for single unknown category id and non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-for-single-unknown-category-id-and-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6052400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 782000,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2733200,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "random(14)",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2107100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146838301,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1131399,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1087500,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11249901,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13523101,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 37,
        "name": "Calculate point for multiple unknown category id",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-for-multiple-unknown-category-id",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9408799,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 775500,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5054400,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "random(14)",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              },
              {
                "cells": [
                  "200000",
                  "random(14)",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              },
              {
                "cells": [
                  "300000",
                  "random(14)",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1517599,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 189535300,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 887901,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 619900,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11513700,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12907600,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Calculate point for multiple unknown category id and non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-for-multiple-unknown-category-id-and-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8342800,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 968099,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4435100,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "random(14)",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              },
              {
                "cells": [
                  "200000",
                  "random(14)",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              },
              {
                "cells": [
                  "300000",
                  "random(14)",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1332300,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150131801,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1249100,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 674799,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11348800,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17555100,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 73,
        "name": "Calculate single point without adjustment and in pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-single-point-without-adjustment-and-in-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5978499,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 888399,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 829048100,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2099401,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 927700,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169559201,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 991700,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 536501,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11217301,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10081600,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 494446700,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 91,
        "name": "Calculate single point with single adjustment and in pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-single-point-with-single-adjustment-and-in-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8743799,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1008000,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 972779799,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1669199,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2824499,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 875400,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 142366000,
              "status": "passed"
            },
            "line": 102,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 770500,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 536399,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9843000,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12471799,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 528654100,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 112,
        "name": "Calculate single point with multiple adjustment and in pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-single-point-with-multiple-adjustment-and-in-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7378300,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 635200,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1032311600,
              "status": "passed"
            },
            "line": 115,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1318099,
              "status": "passed"
            },
            "line": 116,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "50",
                  "500"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "15",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3344001,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1526399,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 155798901,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 732200,
              "status": "passed"
            },
            "line": 128,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 523800,
              "status": "passed"
            },
            "line": 129,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9564901,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10919900,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 497387000,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 135,
        "name": "Calculate multiple point without adjustment and in pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-multiple-point-without-adjustment-and-in-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9413099,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1091400,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1035809801,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] get \"3\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6058100,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              },
              {
                "cells": [
                  "250000",
                  "request($[\u0027purchaseActionList\u0027][1][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              },
              {
                "cells": [
                  "300000",
                  "request($[\u0027purchaseActionList\u0027][2][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1563301,
              "status": "passed"
            },
            "line": 144,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 199234101,
              "status": "passed"
            },
            "line": 145,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1651799,
              "status": "passed"
            },
            "line": 148,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 620900,
              "status": "passed"
            },
            "line": 149,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10234999,
              "status": "passed"
            },
            "line": 150,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11562600,
              "status": "passed"
            },
            "line": 151,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 524059600,
              "status": "passed"
            },
            "line": 152,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 155,
        "name": "Calculate multiple point with single adjustment and in pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-multiple-point-with-single-adjustment-and-in-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10447201,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1262301,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 971767100,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] get \"3\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 997400,
              "status": "passed"
            },
            "line": 159,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5409800,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "250000",
                  "request($[\u0027purchaseActionList\u0027][1][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "3",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "300000",
                  "request($[\u0027purchaseActionList\u0027][2][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 982000,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 249003000,
              "status": "passed"
            },
            "line": 168,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1073299,
              "status": "passed"
            },
            "line": 171,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 634600,
              "status": "passed"
            },
            "line": 172,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13830600,
              "status": "passed"
            },
            "line": 173,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12589701,
              "status": "passed"
            },
            "line": 174,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 539527900,
              "status": "passed"
            },
            "line": 175,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 178,
        "name": "Calculate multiple point with multiple adjustment and in pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-multiple-point-with-multiple-adjustment-and-in-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9544801,
              "status": "passed"
            },
            "line": 179,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1106701,
              "status": "passed"
            },
            "line": 180,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 916626700,
              "status": "passed"
            },
            "line": 181,
            "name": "[x-loyalty] get \"3\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1157400,
              "status": "passed"
            },
            "line": 182,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "50",
                  "500"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "15",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 932301,
              "status": "passed"
            },
            "line": 187,
            "name": "[x-loyalty] prepare request data otherAdjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "otherAdjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "15",
                  "300"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "50",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6370501,
              "status": "passed"
            },
            "line": 191,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "250000",
                  "request($[\u0027purchaseActionList\u0027][1][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027otherAdjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "300000",
                  "request($[\u0027purchaseActionList\u0027][2][\u0027productCategoryId\u0027])",
                  "true",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1587300,
              "status": "passed"
            },
            "line": 196,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161426300,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1413000,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 784600,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11321600,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10521800,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 531118900,
              "status": "passed"
            },
            "line": 204,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 207,
        "name": "Calculate single point without adjustment and in non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-single-point-without-adjustment-and-in-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6305899,
              "status": "passed"
            },
            "line": 208,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 661800,
              "status": "passed"
            },
            "line": 209,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 925237300,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2723900,
              "status": "passed"
            },
            "line": 211,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1248100,
              "status": "passed"
            },
            "line": 214,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 151593800,
              "status": "passed"
            },
            "line": 215,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 811101,
              "status": "passed"
            },
            "line": 218,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 575700,
              "status": "passed"
            },
            "line": 219,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11989600,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10720000,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 505663101,
              "status": "passed"
            },
            "line": 222,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 225,
        "name": "Calculate single point with single adjustment and in non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-single-point-with-single-adjustment-and-in-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11419500,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1230100,
              "status": "passed"
            },
            "line": 227,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 886724300,
              "status": "passed"
            },
            "line": 228,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1129900,
              "status": "passed"
            },
            "line": 229,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2978500,
              "status": "passed"
            },
            "line": 232,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1077800,
              "status": "passed"
            },
            "line": 235,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157228301,
              "status": "passed"
            },
            "line": 236,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 773400,
              "status": "passed"
            },
            "line": 239,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 521900,
              "status": "passed"
            },
            "line": 240,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10415201,
              "status": "passed"
            },
            "line": 241,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11988201,
              "status": "passed"
            },
            "line": 242,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 546134000,
              "status": "passed"
            },
            "line": 243,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 246,
        "name": "Calculate single point with multiple adjustment and in non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-single-point-with-multiple-adjustment-and-in-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9966900,
              "status": "passed"
            },
            "line": 247,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1030101,
              "status": "passed"
            },
            "line": 248,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 902650901,
              "status": "passed"
            },
            "line": 249,
            "name": "[x-loyalty] get \"1\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2052999,
              "status": "passed"
            },
            "line": 250,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "50",
                  "500"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "15",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4677100,
              "status": "passed"
            },
            "line": 255,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1332599,
              "status": "passed"
            },
            "line": 258,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146925301,
              "status": "passed"
            },
            "line": 259,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1094601,
              "status": "passed"
            },
            "line": 262,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 906700,
              "status": "passed"
            },
            "line": 263,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14217001,
              "status": "passed"
            },
            "line": 264,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14787700,
              "status": "passed"
            },
            "line": 265,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 494282400,
              "status": "passed"
            },
            "line": 266,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 269,
        "name": "Calculate multiple point without adjustment and in non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-multiple-point-without-adjustment-and-in-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9112199,
              "status": "passed"
            },
            "line": 270,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 999500,
              "status": "passed"
            },
            "line": 271,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 961901400,
              "status": "passed"
            },
            "line": 272,
            "name": "[x-loyalty] get \"3\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5083101,
              "status": "passed"
            },
            "line": 273,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              },
              {
                "cells": [
                  "250000",
                  "request($[\u0027purchaseActionList\u0027][1][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "2"
                ]
              },
              {
                "cells": [
                  "300000",
                  "request($[\u0027purchaseActionList\u0027][2][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1415001,
              "status": "passed"
            },
            "line": 278,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 158282601,
              "status": "passed"
            },
            "line": 279,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 811600,
              "status": "passed"
            },
            "line": 282,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 611900,
              "status": "passed"
            },
            "line": 283,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10889200,
              "status": "passed"
            },
            "line": 284,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10614900,
              "status": "passed"
            },
            "line": 285,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 497156501,
              "status": "passed"
            },
            "line": 286,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 289,
        "name": "Calculate multiple point with single adjustment and in non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-multiple-point-with-single-adjustment-and-in-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8282400,
              "status": "passed"
            },
            "line": 290,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 802800,
              "status": "passed"
            },
            "line": 291,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 966199100,
              "status": "passed"
            },
            "line": 292,
            "name": "[x-loyalty] get \"3\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1227201,
              "status": "passed"
            },
            "line": 293,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5504700,
              "status": "passed"
            },
            "line": 296,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "250000",
                  "request($[\u0027purchaseActionList\u0027][1][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "3",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "300000",
                  "request($[\u0027purchaseActionList\u0027][2][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1464700,
              "status": "passed"
            },
            "line": 301,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154059999,
              "status": "passed"
            },
            "line": 302,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1032399,
              "status": "passed"
            },
            "line": 305,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 673599,
              "status": "passed"
            },
            "line": 306,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10570100,
              "status": "passed"
            },
            "line": 307,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11007201,
              "status": "passed"
            },
            "line": 308,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 501336200,
              "status": "passed"
            },
            "line": 309,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 312,
        "name": "Calculate multiple point with multiple adjustment and in non pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-multiple-point-with-multiple-adjustment-and-in-non-pnv",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7038901,
              "status": "passed"
            },
            "line": 313,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1129999,
              "status": "passed"
            },
            "line": 314,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 927723301,
              "status": "passed"
            },
            "line": 315,
            "name": "[x-loyalty] get \"3\" random product category id from action point",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 17
                }
              ],
              "location": "NeoLoyaltySteps.xLoyaltyGetRandomProductCategoryIdFromActionPoint(Integer)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1304599,
              "status": "passed"
            },
            "line": 316,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "50",
                  "500"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "15",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1260701,
              "status": "passed"
            },
            "line": 321,
            "name": "[x-loyalty] prepare request data otherAdjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "otherAdjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "15",
                  "300"
                ]
              },
              {
                "cells": [
                  "ADDITIONAL_POINT",
                  "50",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6103099,
              "status": "passed"
            },
            "line": 325,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "100000",
                  "request($[\u0027purchaseActionList\u0027][0][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "250000",
                  "request($[\u0027purchaseActionList\u0027][1][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027otherAdjustmentRequestList\u0027])"
                ]
              },
              {
                "cells": [
                  "300000",
                  "request($[\u0027purchaseActionList\u0027][2][\u0027productCategoryId\u0027])",
                  "false",
                  "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "1",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 966201,
              "status": "passed"
            },
            "line": 330,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147694800,
              "status": "passed"
            },
            "line": 331,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 854301,
              "status": "passed"
            },
            "line": 334,
            "name": "[x-loyalty] assign previous response data to pointCalculationResponseList",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationResponseList",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1211600,
              "status": "passed"
            },
            "line": 335,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13162200,
              "status": "passed"
            },
            "line": 336,
            "name": "[x-loyalty] response data \"response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 83
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13891300,
              "status": "passed"
            },
            "line": 337,
            "name": "[x-loyalty] response data \"sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))\" should equal with data \"sizeof(request($[\u0027pointCalculationRequestList\u0027]))\"",
            "match": {
              "arguments": [
                {
                  "val": "sizeof(response($[\u0027pointCalculationResponseList\u0027][\u0027content\u0027]))",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 91
                },
                {
                  "val": "sizeof(request($[\u0027pointCalculationRequestList\u0027]))",
                  "offset": 115
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 540198500,
              "status": "passed"
            },
            "line": 338,
            "name": "[x-loyalty] responses calculatedPoint and totalPointAdjsutment should be in correct value",
            "match": {
              "location": "PointOperationSteps.xLoyaltyResponsesCalculatedPointAndTotalPointAdjsutmentShouldBeInCorrectValue()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 356,
        "name": "Calculate point when adjustmentType is empty",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7020700,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1803601,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3116201,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1203700,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 232356100,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 995200,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 357,
        "name": "Calculate point when adjustmentType is not found",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8615001,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1498801,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2619499,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1311101,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140962801,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 967400,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 358,
        "name": "Calculate point when loyaltyProgramCode is empty",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10249700,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1546399,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2652501,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "true",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1359399,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 164463600,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 920800,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 359,
        "name": "Calculate point when loyaltyProgramCode is empty and not pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7568200,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1523500,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3479600,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1384900,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141238201,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 886800,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 360,
        "name": "Calculate point when loyaltyProgramCode is not found",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9176500,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1649700,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3330600,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "true",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1654000,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147872400,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1152701,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 361,
        "name": "Calculate point when loyaltyProgramCode is not found and not pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10749299,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1891900,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2680700,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1443200,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149591900,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1030800,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 362,
        "name": "Calculate point when categoryId is empty",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8512000,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2573700,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2665200,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "",
                  "true",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1296700,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157585199,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1231599,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 363,
        "name": "Calculate point when categoryId is empty and not pnv",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8028599,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1997401,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3099401,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "",
                  "false",
                  "123",
                  "5",
                  "request($[\u0027adjustmentRequestList\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1196900,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 136624099,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 609600,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 364,
        "name": "Calculate point when adjustments is not valid",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8656701,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1669399,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2716600,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1625100,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointCalculationRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointCalculationRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 150474801,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1091200,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 365,
        "name": "Calculate point when body is empty",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;11",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9227099,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1661599,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2159000,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1210900,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143602799,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 871900,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 366,
        "name": "Calculate point when body is not valid",
        "description": "",
        "id": "calculate-point-in-point-operation;calculate-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;12",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10130099,
              "status": "passed"
            },
            "line": 342,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1715800,
              "status": "passed"
            },
            "line": 343,
            "name": "[x-loyalty] prepare request data adjustmentRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "adjustmentRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "adjustmentType",
                  "value",
                  "maxPoints"
                ]
              },
              {
                "cells": [
                  "MULTIPLIER_POINT",
                  "5",
                  "500"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2041899,
              "status": "passed"
            },
            "line": 346,
            "name": "[x-loyalty] prepare request data pointCalculationRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointCalculationRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "amount",
                  "categoryId",
                  "phoneNumberVerified",
                  "productId",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "200000",
                  "FLIGHT",
                  "false",
                  "123",
                  "5",
                  "null"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 876700,
              "status": "passed"
            },
            "line": 349,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143832799,
              "status": "passed"
            },
            "line": 350,
            "name": "[x-loyalty] try POST request to \"point/calculatePoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/calculatePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 823799,
              "status": "passed"
            },
            "line": 353,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@CalculatePointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@LoyaltyConversion"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Calculate point in point operation",
    "description": "",
    "id": "calculate-point-in-point-operation",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/CalculatePoint.feature",
    "tags": [
      {
        "name": "@CalculatePointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 24
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 38
        }
      },
      {
        "name": "@LoyaltyConversion",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 60
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Acquire login point in positive scenario",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-login-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8001700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1297000,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data actionCode with value \"LOGIN\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "LOGIN",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 915500,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 898100,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2911400,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1256000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166713900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1011600,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 158292100,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 928699,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 827001,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15174501,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1996800,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "timetravel(1,DAY)"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 172697500,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2394600,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 307908801,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1131000,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 375117801,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] all specified member card point should increase accordingly to action point value",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldIncreaseAccordinglyToAcquireOtherPointRequestData()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 35,
        "name": "Can only acquire login point once per day per user",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;can-only-acquire-login-point-once-per-day-per-user",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7590801,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 674399,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] prepare request data actionCode with value \"LOGIN\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "LOGIN",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 521000,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 705100,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4108100,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "timetravel(1,DAY)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1283001,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 253156400,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1147900,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 269235900,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2162900,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 149550300,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1125400,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 178875400,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] all specified member card point should not be changed",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldNotBeChanged()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 57,
        "name": "Can only acquire register point once per user",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;can-only-acquire-register-point-once-per-user",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9072000,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1023899,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare request data actionCode with value \"REGISTER\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REGISTER",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1093901,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1072700,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3449999,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "timetravel(1,DAY)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1382900,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 231477800,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 867101,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 207768200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1923900,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 231951500,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 962799,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 173246500,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] all specified member card point should not be changed",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldNotBeChanged()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 79,
        "name": "Acquire share social media point in positive scenario",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-share-social-media-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7771199,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1273299,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] prepare request data actionCode with value \"SHARE_SOCIAL_MEDIA\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "SHARE_SOCIAL_MEDIA",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2406299,
              "status": "passed"
            },
            "line": 82,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1230401,
              "status": "passed"
            },
            "line": 83,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2503400,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1168299,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 199789100,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 899500,
              "status": "passed"
            },
            "line": 89,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 151685600,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1279400,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 707799,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15803399,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3047200,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 219793400,
              "status": "passed"
            },
            "line": 100,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1807700,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 239518701,
              "status": "passed"
            },
            "line": 102,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 781600,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 352677399,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] all specified member card point should increase accordingly to action point value",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldIncreaseAccordinglyToAcquireOtherPointRequestData()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 109,
        "name": "Acquire register point in positive scenario",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-register-point-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9628100,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1062299,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] prepare request data actionCode with value \"REGISTER\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REGISTER",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1169100,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1982001,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2386800,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1655800,
              "status": "passed"
            },
            "line": 117,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 169770100,
              "status": "passed"
            },
            "line": 118,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 872599,
              "status": "passed"
            },
            "line": 119,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 152061599,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1102401,
              "status": "passed"
            },
            "line": 124,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 917600,
              "status": "passed"
            },
            "line": 125,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15461700,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2698900,
              "status": "passed"
            },
            "line": 127,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "timetravel(1,DAY)"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 193502700,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1991000,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 259988100,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 688300,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 338951900,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] all specified member card point should increase accordingly to action point value",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldIncreaseAccordinglyToAcquireOtherPointRequestData()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 139,
        "name": "Acquire point from reviewing product",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-point-from-reviewing-product",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9566301,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2096899,
              "status": "passed"
            },
            "line": 141,
            "name": "[x-loyalty] prepare request data actionCode with value \"REVIEW_PRODUCT\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REVIEW_PRODUCT",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1744300,
              "status": "passed"
            },
            "line": 142,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1715900,
              "status": "passed"
            },
            "line": 143,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1722000,
              "status": "passed"
            },
            "line": 144,
            "name": "[x-loyalty] prepare request data sku with value \"(SKU-,loop(random(5,NUMERIC),-,4))\"",
            "match": {
              "arguments": [
                {
                  "val": "sku",
                  "offset": 33
                },
                {
                  "val": "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "offset": 49
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9041200,
              "status": "passed"
            },
            "line": 145,
            "name": "[x-loyalty] prepare request data reviewModel with value",
            "match": {
              "arguments": [
                {
                  "val": "reviewModel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "sku",
                  "request($[\u0027sku\u0027])"
                ]
              },
              {
                "cells": [
                  "productName",
                  "(Produk, ,request($[\u0027sku\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6541001,
              "status": "passed"
            },
            "line": 149,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "request($[\u0027reviewModel\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3478100,
              "status": "passed"
            },
            "line": 152,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1143400,
              "status": "passed"
            },
            "line": 155,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160089501,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1113301,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166865899,
              "status": "passed"
            },
            "line": 158,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1101401,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 720400,
              "status": "passed"
            },
            "line": 163,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15079000,
              "status": "passed"
            },
            "line": 164,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 194028100,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1709600,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 253387801,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 810100,
              "status": "passed"
            },
            "line": 170,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 347594101,
              "status": "passed"
            },
            "line": 171,
            "name": "[x-loyalty] all specified member card point should increase accordingly to action point value",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldIncreaseAccordinglyToAcquireOtherPointRequestData()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 174,
        "name": "Can only acquire point review product once per user per product",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;can-only-acquire-point-review-product-once-per-user-per-product",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9045800,
              "status": "passed"
            },
            "line": 175,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1314199,
              "status": "passed"
            },
            "line": 176,
            "name": "[x-loyalty] prepare request data actionCode with value \"REVIEW_PRODUCT\"",
            "match": {
              "arguments": [
                {
                  "val": "actionCode",
                  "offset": 33
                },
                {
                  "val": "REVIEW_PRODUCT",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 621800,
              "status": "passed"
            },
            "line": 177,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 614201,
              "status": "passed"
            },
            "line": 178,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 763900,
              "status": "passed"
            },
            "line": 179,
            "name": "[x-loyalty] prepare request data sku with value \"(SKU-,loop(random(5,NUMERIC),-,4))\"",
            "match": {
              "arguments": [
                {
                  "val": "sku",
                  "offset": 33
                },
                {
                  "val": "(SKU-,loop(random(5,NUMERIC),-,4))",
                  "offset": 49
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6221800,
              "status": "passed"
            },
            "line": 180,
            "name": "[x-loyalty] prepare request data reviewModel with value",
            "match": {
              "arguments": [
                {
                  "val": "reviewModel",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "sku",
                  "request($[\u0027sku\u0027])"
                ]
              },
              {
                "cells": [
                  "productName",
                  "(Produk, ,request($[\u0027sku\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5903600,
              "status": "passed"
            },
            "line": 184,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "request($[\u0027reviewModel\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1333700,
              "status": "passed"
            },
            "line": 187,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 212537600,
              "status": "passed"
            },
            "line": 188,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 785501,
              "status": "passed"
            },
            "line": 191,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 186520500,
              "status": "passed"
            },
            "line": 192,
            "name": "[x-loyalty] populate member card data before acquire other point",
            "match": {
              "location": "MemberCardSteps.xLoyaltyPopulateMemberCardDataBeforeAcquireOtherPoint()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2058500,
              "status": "passed"
            },
            "line": 193,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162033700,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "request($[\u0027actionCode\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 917300,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 181214399,
              "status": "passed"
            },
            "line": 198,
            "name": "[x-loyalty] all specified member card point should not be changed",
            "match": {
              "location": "MemberCardSteps.xLoyaltyAllSpecifiedMemberCardPointShouldNotBeChanged()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 213,
        "name": "Acquire other point when actionCode is empty",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9731200,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4457300,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1770200,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160969500,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 964301,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 214,
        "name": "Acquire other point when actionCode is not found",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6530100,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1791799,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1466301,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 170058900,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 915000,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 215,
        "name": "Acquire other point when loyaltyProgramCode is empty",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9094100,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2580200,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1104900,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 183603199,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REGISTER"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 925900,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 216,
        "name": "Acquire other point when loyaltyProgramCode is not found",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9204599,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3525201,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "random(10)",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1746001,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154263101,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REGISTER"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1014900,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 217,
        "name": "Acquire other point when memberId is empty",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9578301,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2540900,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1521800,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146503000,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REGISTER"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 909999,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 218,
        "name": "Acquire other point when timestamp is empty",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10437500,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2625700,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "false",
                  "null",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1892501,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireOtherPointRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireOtherPointRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148237200,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REGISTER"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1052101,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 219,
        "name": "Acquire other point when body is empty",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9989401,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3268399,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1333600,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"[]\"",
            "match": {
              "arguments": [
                {
                  "val": "[]",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 159595401,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REGISTER"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 816301,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 220,
        "name": "Acquire other point when body is not valid",
        "description": "",
        "id": "acquire-other-point-in-loyalty-program;acquire-other-point-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9844000,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4556000,
              "status": "passed"
            },
            "line": 203,
            "name": "[x-loyalty] prepare request data acquireOtherPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireOtherPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "variables"
                ]
              },
              {
                "cells": [
                  "blibli_poin",
                  "properties(default.memberId)",
                  "false",
                  "now()",
                  "{}"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1152701,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 140591500,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] try POST request to \"point/otherPoint\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/otherPoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "actionCode",
                  "REGISTER"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1589900,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@OtherPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Acquire other point in loyalty program",
    "description": "",
    "id": "acquire-other-point-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/OtherPoint.feature",
    "tags": [
      {
        "name": "@OtherPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 20
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 34
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Refund user voucher redemption in positive scenario",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-user-voucher-redemption-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12288499,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1088500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1193499,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"(testing_,random(6,NUMERIC),@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(testing_,random(6,NUMERIC),@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 971801,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3893401,
              "status": "passed"
            },
            "line": 10,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010400,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 308227901,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 639799,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 166815200,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 756499,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 732400,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12577400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 181788799,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] get sq voucher",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneSQVoucher()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4651900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "request($[\u0027couponPoint\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2829900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 260224400,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 860100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 167733001,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 920770500,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1992304501,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1206099,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare request data point with value \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1523100,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] prepare request data membershipNumber with value \"random(10,NUMERIC)\"",
            "match": {
              "arguments": [
                {
                  "val": "membershipNumber",
                  "offset": 33
                },
                {
                  "val": "random(10,NUMERIC)",
                  "offset": 62
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6751700,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] prepare request data variables with value",
            "match": {
              "arguments": [
                {
                  "val": "variables",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "firstName",
                  "lastName",
                  "membershipNumber",
                  "milesAwarded"
                ]
              },
              {
                "cells": [
                  "Yunaz",
                  "Gilang",
                  "request($[\u0027membershipNumber\u0027])",
                  "100"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7615200,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "properties(sq.voucher.id)",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variables\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 247721200,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 964800,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 921000,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10131499,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2506200,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 455348900,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 587001,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1001721299,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] get specified member latest redemption history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestRedemptionHistoryData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 956700,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42443600,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "response($[\u0027redemptionHistoryId\u0027])",
                  "(refund for member, ,request($[\u0027memberId\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1662601,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 229375600,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3169099,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] assign previous response data to pointRefundResponse",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 986600,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 181546199,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027redemptionPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027redemptionPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12017900,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] assign response data point with value \"response($[\u0027redemptionPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027redemptionPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 847401,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 916330000,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] get acquisition history data by id \"response($[\u0027pointRefundResponse\u0027][\u0027value\u0027][\u0027refundId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointRefundResponse\u0027][\u0027value\u0027][\u0027refundId\u0027])",
                  "offset": 48
                }
              ],
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberAcquisitionHistoryDataById(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1876816300,
              "status": "passed"
            },
            "line": 64,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 961483200,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 68,
        "name": "Refund user other type redemption in positive scenario",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-user-other-type-redemption-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8695300,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 992400,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 905800,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2774300,
              "status": "passed"
            },
            "line": 72,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1342900,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184274100,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1324701,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1215501,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1311100,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1138500,
              "status": "passed"
            },
            "line": 80,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6451700,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2364500,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 199267100,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1764700,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 145689299,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1624500,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 984500,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9114700,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2363499,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1367100,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 160243800,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 928201,
              "status": "passed"
            },
            "line": 99,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 199027799,
              "status": "passed"
            },
            "line": 100,
            "name": "[x-loyalty] member active point should be decreased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 56
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberActivePointShouldBeDecreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1039225100,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1917811399,
              "status": "passed"
            },
            "line": 102,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1006306800,
              "status": "passed"
            },
            "line": 103,
            "name": "[x-loyalty] get specified member latest redemption history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestRedemptionHistoryData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 876901,
              "status": "passed"
            },
            "line": 104,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45953201,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "response($[\u0027redemptionHistoryId\u0027])",
                  "(refund for member, ,request($[\u0027memberId\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2268100,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 423482700,
              "status": "passed"
            },
            "line": 109,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1790400,
              "status": "passed"
            },
            "line": 110,
            "name": "[x-loyalty] assign previous response data to pointRefundResponse",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1089101,
              "status": "passed"
            },
            "line": 111,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 246131601,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027redemptionPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027redemptionPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11061100,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] assign response data point with value \"response($[\u0027redemptionPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027redemptionPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 977722100,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] get acquisition history data by id \"response($[\u0027pointRefundResponse\u0027][\u0027value\u0027][\u0027refundId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointRefundResponse\u0027][\u0027value\u0027][\u0027refundId\u0027])",
                  "offset": 48
                }
              ],
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberAcquisitionHistoryDataById(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1932134799,
              "status": "passed"
            },
            "line": 115,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 949836600,
              "status": "passed"
            },
            "line": 116,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 119,
        "name": "Refund user redemption with no remarks",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-user-redemption-with-no-remarks",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6945100,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1251600,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1167599,
              "status": "passed"
            },
            "line": 122,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2712200,
              "status": "passed"
            },
            "line": 123,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1217800,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156229400,
              "status": "passed"
            },
            "line": 127,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 725700,
              "status": "passed"
            },
            "line": 128,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 856300,
              "status": "passed"
            },
            "line": 129,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 880300,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1107700,
              "status": "passed"
            },
            "line": 131,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6495100,
              "status": "passed"
            },
            "line": 132,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3321200,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177640401,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 884099,
              "status": "passed"
            },
            "line": 137,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 170758000,
              "status": "passed"
            },
            "line": 138,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1473200,
              "status": "passed"
            },
            "line": 142,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1180300,
              "status": "passed"
            },
            "line": 143,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17408699,
              "status": "passed"
            },
            "line": 144,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6694700,
              "status": "passed"
            },
            "line": 145,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2466700,
              "status": "passed"
            },
            "line": 148,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 190863001,
              "status": "passed"
            },
            "line": 149,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1063099,
              "status": "passed"
            },
            "line": 150,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 203118300,
              "status": "passed"
            },
            "line": 151,
            "name": "[x-loyalty] member active point should be decreased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 56
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberActivePointShouldBeDecreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 956227600,
              "status": "passed"
            },
            "line": 152,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2136938900,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1111054800,
              "status": "passed"
            },
            "line": 154,
            "name": "[x-loyalty] get specified member latest redemption history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestRedemptionHistoryData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1036500,
              "status": "passed"
            },
            "line": 155,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36502000,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "response($[\u0027redemptionHistoryId\u0027])",
                  ""
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2211799,
              "status": "passed"
            },
            "line": 159,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 181148499,
              "status": "passed"
            },
            "line": 160,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1250100,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] assign previous response data to pointRefundResponse",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1680699,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Remarks"
          }
        ]
      },
      {
        "line": 165,
        "name": "Refund user redemption more than once",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-user-redemption-more-than-once",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10900500,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1198399,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1218200,
              "status": "passed"
            },
            "line": 168,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@test.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@test.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3155400,
              "status": "passed"
            },
            "line": 169,
            "name": "[x-loyalty] prepare request data memberCardCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "memberCardCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "usernameId"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "(6,random(5,NUMERIC))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2252001,
              "status": "passed"
            },
            "line": 172,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027memberCardCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027memberCardCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 319939799,
              "status": "passed"
            },
            "line": 173,
            "name": "[x-loyalty] try POST request to \"membercard/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "membercard/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1158000,
              "status": "passed"
            },
            "line": 174,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1053499,
              "status": "passed"
            },
            "line": 175,
            "name": "[x-loyalty] prepare request data point with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1009900,
              "status": "passed"
            },
            "line": 176,
            "name": "[x-loyalty] prepare request data expDays with value \"60\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "60",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1213800,
              "status": "passed"
            },
            "line": 177,
            "name": "[x-loyalty] prepare request data timestamp with value \"now()\"",
            "match": {
              "arguments": [
                {
                  "val": "timestamp",
                  "offset": 33
                },
                {
                  "val": "now()",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8223199,
              "status": "passed"
            },
            "line": 178,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "request($[\u0027timestamp\u0027])",
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2380000,
              "status": "passed"
            },
            "line": 181,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 163885800,
              "status": "passed"
            },
            "line": 182,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1076300,
              "status": "passed"
            },
            "line": 183,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 183411299,
              "status": "passed"
            },
            "line": 184,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberCardCreateRequest\u0027][\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1445700,
              "status": "passed"
            },
            "line": 188,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1740500,
              "status": "passed"
            },
            "line": 189,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15365100,
              "status": "passed"
            },
            "line": 190,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8000899,
              "status": "passed"
            },
            "line": 191,
            "name": "[x-loyalty] prepare request data customPointRedemption with value",
            "match": {
              "arguments": [
                {
                  "val": "customPointRedemption",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "request($[\u0027point\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3164400,
              "status": "passed"
            },
            "line": 194,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027customPointRedemption\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027customPointRedemption\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 200321800,
              "status": "passed"
            },
            "line": 195,
            "name": "[x-loyalty] try POST request to \"customPoint/redeem\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/redeem",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 661901,
              "status": "passed"
            },
            "line": 196,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 303679599,
              "status": "passed"
            },
            "line": 197,
            "name": "[x-loyalty] member active point should be decreased by \"request($[\u0027point\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027point\u0027])",
                  "offset": 56
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberActivePointShouldBeDecreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1057396301,
              "status": "passed"
            },
            "line": 198,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2105773501,
              "status": "passed"
            },
            "line": 199,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 910705201,
              "status": "passed"
            },
            "line": 200,
            "name": "[x-loyalty] get specified member latest redemption history data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberLatestRedemptionHistoryData()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1143601,
              "status": "passed"
            },
            "line": 201,
            "name": "[x-loyalty] prepare request data expDays with value \"30\"",
            "match": {
              "arguments": [
                {
                  "val": "expDays",
                  "offset": 33
                },
                {
                  "val": "30",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41900201,
              "status": "passed"
            },
            "line": 202,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027expDays\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "response($[\u0027redemptionHistoryId\u0027])",
                  "(refund for member, ,request($[\u0027memberId\u0027]))"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1792000,
              "status": "passed"
            },
            "line": 205,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 188208900,
              "status": "passed"
            },
            "line": 206,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1700901,
              "status": "passed"
            },
            "line": 207,
            "name": "[x-loyalty] assign previous response data to pointRefundResponse",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1142901,
              "status": "passed"
            },
            "line": 208,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 240653799,
              "status": "passed"
            },
            "line": 209,
            "name": "[x-loyalty] member acquired point should be increased by \"response($[\u0027redemptionPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027redemptionPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12857200,
              "status": "passed"
            },
            "line": 210,
            "name": "[x-loyalty] assign response data point with value \"response($[\u0027redemptionPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "response($[\u0027redemptionPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1198012100,
              "status": "passed"
            },
            "line": 211,
            "name": "[x-loyalty] get acquisition history data by id \"response($[\u0027pointRefundResponse\u0027][\u0027value\u0027][\u0027refundId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027pointRefundResponse\u0027][\u0027value\u0027][\u0027refundId\u0027])",
                  "offset": 48
                }
              ],
              "location": "HistorySteps.xLoyaltyGetSpecifiedMemberAcquisitionHistoryDataById(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1962019200,
              "status": "passed"
            },
            "line": 212,
            "name": "[x-loyalty] populate current member bucket data for expected period",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketDataForExpectedPeriod()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1337827700,
              "status": "passed"
            },
            "line": 213,
            "name": "[x-loyalty] current member latest acquisition history should be correct",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestAcquisitionHistoryShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2471901,
              "status": "passed"
            },
            "line": 214,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 169091199,
              "status": "passed"
            },
            "line": 215,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1541900,
              "status": "passed"
            },
            "line": 216,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 229,
        "name": "Refund member redemption when redemptionId is empty",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11765200,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2362001,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "30",
                  "blibli_poin",
                  "",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1612499,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 200837200,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1474199,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 230,
        "name": "Refund member redemption when redemptionId is not found",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9854099,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1185000,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "30",
                  "blibli_poin",
                  "random(17)",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 911500,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 154235499,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 951900,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 231,
        "name": "Refund member redemption when loyaltyProgramCode is empty",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9271400,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1848800,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "30",
                  "",
                  "random(16)",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1799800,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 175041699,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 821600,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 232,
        "name": "Refund member redemption when loyaltyProgramCode is not found",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6324500,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1384301,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "30",
                  "random(10)",
                  "random(16)",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1387800,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173601800,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 786200,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 233,
        "name": "Refund member redemption when expDays is \u003c 0",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8005400,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2191501,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "-1",
                  "blibli_poin",
                  "random(16)",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1443799,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRefundRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRefundRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 171099400,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1090699,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 234,
        "name": "Refund member redemption when body is empty",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8841899,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1943900,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "0",
                  "blibli_poin",
                  "random(16)",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 844800,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 165537900,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 815200,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 235,
        "name": "Refund member redemption when body is not valid",
        "description": "",
        "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty;refund-member-redemption-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9346000,
              "status": "passed"
            },
            "line": 220,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2008601,
              "status": "passed"
            },
            "line": 221,
            "name": "[x-loyalty] prepare request data pointRefundRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRefundRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "expDays",
                  "loyaltyProgramCode",
                  "redemptionId",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "0",
                  "blibli_poin",
                  "random(16)",
                  "random(100)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1190199,
              "status": "passed"
            },
            "line": 224,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 256234800,
              "status": "passed"
            },
            "line": 225,
            "name": "[x-loyalty] try POST request to \"point/refund\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/refund",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 982501,
              "status": "passed"
            },
            "line": 226,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RefundPointFeature"
          },
          {
            "name": "@LoyaltyPoint"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Refund"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Refund user redeemed point from specified redemption history in neoloyalty",
    "description": "",
    "id": "refund-user-redeemed-point-from-specified-redemption-history-in-neoloyalty",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/RefundPoint.feature",
    "tags": [
      {
        "name": "@RefundPointFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyPoint",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 21
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 35
        }
      },
      {
        "name": "@Refund",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 57
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Acquire 1 loyalty",
        "description": "",
        "id": "update-member-level;acquire-1-loyalty",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10441501,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1203500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1127100,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5048399,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "timestamp()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "0",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "1",
                  "0",
                  "1",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1936200,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 265154499,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1185000,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 159530300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 958801,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 545700,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8655400,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7994300,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10402700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8083999,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])\" should equal with data \"CLASSIC\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "CLASSIC",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@UpdateMemberLoyaltyLevelFeature"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@OneLoyalty"
          }
        ]
      },
      {
        "line": 27,
        "name": "Update level to SIGNATURE",
        "description": "",
        "id": "update-member-level;update-level-to-signature",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9581200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1614801,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1438501,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7364700,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1743601,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 322225500,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 710900,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 214285700,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1349501,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1352500,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16298101,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17130700,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16500900,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25584000,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])\" should equal with data \"SIGNATURE\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "SIGNATURE",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@UpdateMemberLoyaltyLevelFeature"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Signature"
          }
        ]
      },
      {
        "line": 49,
        "name": "Update level to PREMIER",
        "description": "",
        "id": "update-member-level;update-level-to-premier",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10743699,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1299300,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 987600,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9803400,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6918600,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 373953601,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 637500,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173319300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 823800,
              "status": "passed"
            },
            "line": 65,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 654000,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10170300,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9207600,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9839800,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10311401,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])\" should equal with data \"PREMIER\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "PREMIER",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@UpdateMemberLoyaltyLevelFeature"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Premier"
          }
        ]
      },
      {
        "line": 73,
        "name": "Update level to INFINITE",
        "description": "",
        "id": "update-member-level;update-level-to-infinite",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7866501,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1038500,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] prepare request data memberId with value \"(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz,@,oneof(test,yunaz,ahoo),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 925201,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18499901,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] prepare request data acquirePointPurchaseRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquirePointPurchaseRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "timestamp",
                  "orderId",
                  "orderItemId",
                  "orderItemAmount",
                  "productCategoryId",
                  "blacklistLevel",
                  "phoneNumberVerified",
                  "orderItemBasePoint",
                  "orderItemBonusPoint",
                  "quantity",
                  "adjustments"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "now()",
                  "random(7,NUMERIC)",
                  "random(7,NUMERIC)",
                  "20000000",
                  "FLIGHT",
                  "NORMAL",
                  "true",
                  "0",
                  "0",
                  "1",
                  "[]"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2289200,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquirePointPurchaseRequestList\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquirePointPurchaseRequestList\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 567237101,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] try POST request to \"point/purchaseActivePoint\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/purchaseActivePoint",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 632999,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152801700,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 959500,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 755000,
              "status": "passed"
            },
            "line": 93,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13482700,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12135000,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])\" should equal with data \"request($[\u0027memberId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027memberId\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 83
                },
                {
                  "val": "request($[\u0027memberId\u0027])",
                  "offset": 107
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14572401,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])\" should equal with data \"request($[\u0027loyaltyProgramCode\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027loyaltyProgramCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 93
                },
                {
                  "val": "request($[\u0027loyaltyProgramCode\u0027])",
                  "offset": 117
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9096101,
              "status": "passed"
            },
            "line": 97,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])\" should equal with data \"INFINITE\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027][\u0027levelCode\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 84
                },
                {
                  "val": "INFINITE",
                  "offset": 108
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@UpdateMemberLoyaltyLevelFeature"
          },
          {
            "name": "@TestSuiteId\u003d13287028"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          },
          {
            "name": "@Infinite"
          }
        ]
      }
    ],
    "name": "Update member level",
    "description": "",
    "id": "update-member-level",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointoperation/UpdateMemberLevel.feature",
    "tags": [
      {
        "name": "@UpdateMemberLoyaltyLevelFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@TestSuiteId\u003d13287028",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 34
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Redeem coupon in positive scenario",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11722199,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1621200,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1430500,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3024101,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2813299,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1615261400,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1379000,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1847500,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1396801,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 177216700,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1255700,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 823101,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13673000,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 240066800,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7038599,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "request($[\u0027couponPoint\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2106700,
              "status": "passed"
            },
            "line": 31,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 292807899,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1120901,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 201101201,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1214789900,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2192748400,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1308200,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] prepare request data point with value \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2621400,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145956999,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1134299,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 830301,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13298100,
              "status": "passed"
            },
            "line": 47,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011700,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 448506601,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1074400,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1049867301,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] get current user latest redemption data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetCurrentUserLatestRedemptionData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12702299,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] specified member latest redemption data should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestRedemptionDataShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 191801801,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] specified member totalActive point should be decreased accordingly to couponPoint",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalActivePointShouldBeDecreasedAccordinglyToCouponPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1100407000,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] current member latest redemption history is match with the redeemed buckets",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestRedemptionHistoryIsMatchWithTheRedeemedBuckets()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11399000,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] data \"response($[\u0027sortedBucketPeriod\u0027])\" should be ordered by ascending",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027sortedBucketPeriod\u0027])",
                  "offset": 18
                },
                {
                  "val": "should",
                  "offset": 53
                },
                {
                  "val": "ascending",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.dataShouldBeOrderedIn(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 58,
        "name": "Redeem voucher partner in positive scenario",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-voucher-partner-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8142600,
              "status": "passed"
            },
            "line": 60,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1034600,
              "status": "passed"
            },
            "line": 61,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 866101,
              "status": "passed"
            },
            "line": 62,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1393500,
              "status": "passed"
            },
            "line": 63,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1082800,
              "status": "passed"
            },
            "line": 66,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1260698300,
              "status": "passed"
            },
            "line": 67,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1075700,
              "status": "passed"
            },
            "line": 68,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1347701,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 853200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156680700,
              "status": "passed"
            },
            "line": 71,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 836001,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 462101,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10255800,
              "status": "passed"
            },
            "line": 77,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 244334499,
              "status": "passed"
            },
            "line": 79,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4434801,
              "status": "passed"
            },
            "line": 81,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "request($[\u0027couponPoint\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1602701,
              "status": "passed"
            },
            "line": 84,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 175263801,
              "status": "passed"
            },
            "line": 85,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1102901,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 243702500,
              "status": "passed"
            },
            "line": 87,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1035154900,
              "status": "passed"
            },
            "line": 88,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1988579899,
              "status": "passed"
            },
            "line": 89,
            "name": "[x-loyalty] populate current member bucket data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyPopulateCurrentMemberBucketData()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1919000,
              "status": "passed"
            },
            "line": 90,
            "name": "[x-loyalty] prepare request data point with value \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3306300,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 245917100,
              "status": "passed"
            },
            "line": 94,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 857200,
              "status": "passed"
            },
            "line": 98,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 577100,
              "status": "passed"
            },
            "line": 99,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10139801,
              "status": "passed"
            },
            "line": 100,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2843000,
              "status": "passed"
            },
            "line": 101,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1215376600,
              "status": "passed"
            },
            "line": 102,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 908200,
              "status": "passed"
            },
            "line": 103,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3242342000,
              "status": "passed"
            },
            "line": 104,
            "name": "[x-loyalty] get current user latest redemption data",
            "match": {
              "location": "HistorySteps.xLoyaltyGetCurrentUserLatestRedemptionData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9730900,
              "status": "passed"
            },
            "line": 105,
            "name": "[x-loyalty] specified member latest redemption data should be correct",
            "match": {
              "location": "HistorySteps.xLoyaltySpecifiedMemberLatestRedemptionDataShouldBeCorrect()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 250146800,
              "status": "passed"
            },
            "line": 106,
            "name": "[x-loyalty] specified member totalActive point should be decreased accordingly to couponPoint",
            "match": {
              "location": "MemberCardSteps.xLoyaltySpecifiedMemberTotalActivePointShouldBeDecreasedAccordinglyToCouponPoint()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1103389800,
              "status": "passed"
            },
            "line": 107,
            "name": "[x-loyalty] current member latest redemption history is match with the redeemed buckets",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyCurrentMemberLatestRedemptionHistoryIsMatchWithTheRedeemedBuckets()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7915800,
              "status": "passed"
            },
            "line": 108,
            "name": "[x-loyalty] data \"response($[\u0027sortedBucketPeriod\u0027])\" should be ordered by ascending",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027sortedBucketPeriod\u0027])",
                  "offset": 18
                },
                {
                  "val": "should",
                  "offset": 53
                },
                {
                  "val": "ascending",
                  "offset": 74
                }
              ],
              "location": "ApiBaseSteps.dataShouldBeOrderedIn(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 111,
        "name": "Redeem coupon when coupon adjustment is not exists",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-coupon-adjustment-is-not-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8498700,
              "status": "passed"
            },
            "line": 112,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1110500,
              "status": "passed"
            },
            "line": 113,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1012900,
              "status": "passed"
            },
            "line": 114,
            "name": "[x-loyalty] prepare request data couponId with value \"(COUPON_,random(6))\"",
            "match": {
              "arguments": [
                {
                  "val": "couponId",
                  "offset": 33
                },
                {
                  "val": "(COUPON_,random(6))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 863200,
              "status": "passed"
            },
            "line": 115,
            "name": "[x-loyalty] prepare request data couponPoint with value \"10\"",
            "match": {
              "arguments": [
                {
                  "val": "couponPoint",
                  "offset": 33
                },
                {
                  "val": "10",
                  "offset": 57
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6906800,
              "status": "passed"
            },
            "line": 116,
            "name": "[x-loyalty] prepare request data couponCreateRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "couponCreateRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "couponPoint",
                  "couponValue",
                  "description",
                  "listingImageUrl",
                  "imageUrl",
                  "logoUrl",
                  "productName",
                  "termAndCondition"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027couponPoint\u0027])",
                  "multiply(request($[\u0027couponPoint\u0027]),10)",
                  "this is a testing coupon",
                  "www.google.com",
                  "www.google.com",
                  "www.google.com",
                  "(PRODUK_,random(5))",
                  "syarat dan ketentuan berlaku"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1847700,
              "status": "passed"
            },
            "line": 119,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027couponCreateRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponCreateRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 188555500,
              "status": "passed"
            },
            "line": 120,
            "name": "[x-loyalty] try POST request to \"coupon/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "coupon/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1182700,
              "status": "passed"
            },
            "line": 121,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 159440500,
              "status": "passed"
            },
            "line": 122,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1023800,
              "status": "passed"
            },
            "line": 126,
            "name": "[x-loyalty] assign previous response data to couponResponse",
            "match": {
              "arguments": [
                {
                  "val": "couponResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 730900,
              "status": "passed"
            },
            "line": 127,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12507200,
              "status": "passed"
            },
            "line": 128,
            "name": "[x-loyalty] response data \"response($[\u0027couponResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027couponResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2306246000,
              "status": "passed"
            },
            "line": 129,
            "name": "[x-loyalty] get one random memberId and username that can redeem specified coupon",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdAndUsernameThatCanRedeemSpecifiedCoupon()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3037600,
              "status": "passed"
            },
            "line": 130,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2139700,
              "status": "passed"
            },
            "line": 133,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 201333400,
              "status": "passed"
            },
            "line": 134,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 773400,
              "status": "passed"
            },
            "line": 135,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 154179600,
              "status": "passed"
            },
            "line": 136,
            "name": "[x-loyalty] try DELETE request to \"coupon/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "coupon/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 735700,
              "status": "passed"
            },
            "line": 139,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 182792400,
              "status": "passed"
            },
            "line": 140,
            "name": "[x-loyalty] try GET request to \"coupon/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "coupon/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "couponId",
                  "request($[\u0027couponCreateRequest\u0027][\u0027couponId\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 728600,
              "status": "passed"
            },
            "line": 144,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 147,
        "name": "Redeem coupon when member doesnt have enough point",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-member-doesnt-have-enough-point",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8536000,
              "status": "passed"
            },
            "line": 148,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 950700,
              "status": "passed"
            },
            "line": 149,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 232339500,
              "status": "passed"
            },
            "line": 150,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2917876500,
              "status": "passed"
            },
            "line": 151,
            "name": "[x-loyalty] get one random memberId and username that can not redeem specified coupon",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomMemberIdAndUsernameThatCanNotRedeemSpecifiedCoupon()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2862000,
              "status": "passed"
            },
            "line": 152,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1311200,
              "status": "passed"
            },
            "line": 155,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 294700900,
              "status": "passed"
            },
            "line": 156,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 914400,
              "status": "passed"
            },
            "line": 157,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 170,
        "name": "Redeem coupon when couponId is empty",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8145800,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2845100,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "",
                  "blibli_poin",
                  "properties(default.memberId)",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1411700,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146942300,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1187300,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 171,
        "name": "Redeem coupon when couponId is not found",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7986000,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2606200,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "blibli_poin",
                  "properties(default.memberId)",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1332200,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 168765600,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1089100,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 172,
        "name": "Redeem coupon when loyaltyProgramCode is empty",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8652000,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3443900,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "",
                  "properties(default.memberId)",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1787800,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 139896200,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1007500,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 173,
        "name": "Redeem coupon when loyaltyProgramCode is not found",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9536600,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3552500,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "random(4)",
                  "properties(default.memberId)",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1367200,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176747200,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 982500,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 174,
        "name": "Redeem coupon when memberId is empty",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7045600,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 980000,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "blibli_poin",
                  "",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1548300,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 127251600,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 988600,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 175,
        "name": "Redeem coupon when memberId is not found",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9290000,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2074100,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "blibli_poin",
                  "(random(10),@random.com)",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1982200,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 195827700,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1166600,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 176,
        "name": "Redeem coupon when quantity is \u003c 1",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10977800,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1865200,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "blibli_poin",
                  "random",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1545700,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157215400,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 846900,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 177,
        "name": "Redeem coupon when body is empty",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9397600,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2062200,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "blibli_poin",
                  "random",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1449000,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 153514000,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 934500,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 178,
        "name": "Redeem coupon when body is not valid",
        "description": "",
        "id": "redeem-coupon-in-loyalty-program;redeem-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;10",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10302700,
              "status": "passed"
            },
            "line": 161,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2040100,
              "status": "passed"
            },
            "line": 162,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "random(7)",
                  "blibli_poin",
                  "random",
                  "0"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4157200,
              "status": "passed"
            },
            "line": 165,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 146953400,
              "status": "passed"
            },
            "line": 166,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 991900,
              "status": "passed"
            },
            "line": 167,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RedeemCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Redeem coupon in loyalty program",
    "description": "",
    "id": "redeem-coupon-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointredemption/RedeemCoupon.feature",
    "tags": [
      {
        "name": "@RedeemCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyRedemption",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 22
        }
      },
      {
        "name": "@TestSuiteId\u003d13287029",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 41
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Reprocess coupon in positive scenario",
        "description": "",
        "id": "reprocess-coupon-in-point-redemption;reprocess-coupon-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10439000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1313300,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1581300,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156032500,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1616000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 876500,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11555300,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 219803400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4706500,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "request($[\u0027couponPoint\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000800,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 192901800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 834700,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 216985900,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1016358400,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1142100,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] prepare request data point with value \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3027100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 202528000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1273200,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1020500,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14553100,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2372600,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 377634900,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 916200,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1631329700,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] get historyId from member latest point redemption history",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetObjectIdFromMemberLatestPointRedemptionHistory()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 879620800,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] delete couponId from latest point redemption history",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyDeleteCouponIdFromLatestPointRedemptionHistory()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 715381000,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try POST request to \"point/redeem/reprocessCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/reprocessCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "historyId",
                  "request($[\u0027historyId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1045900,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@ReprocessCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 55,
        "name": "Reprocess coupon when historyId is empty",
        "description": "",
        "id": "reprocess-coupon-in-point-redemption;reprocess-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6571700,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146959600,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try POST request to \"point/redeem/reprocessCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/reprocessCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "historyId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 802100,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@ReprocessCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 56,
        "name": "Reprocess coupon when historyId is not found",
        "description": "",
        "id": "reprocess-coupon-in-point-redemption;reprocess-coupon-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8495400,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 150903400,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] try POST request to \"point/redeem/reprocessCoupon\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/reprocessCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "historyId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1055300,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@ReprocessCouponFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Reprocess coupon in point redemption",
    "description": "",
    "id": "reprocess-coupon-in-point-redemption",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointredemption/ReprocessCoupon.feature",
    "tags": [
      {
        "name": "@ReprocessCouponFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyRedemption",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 25
        }
      },
      {
        "name": "@TestSuiteId\u003d13287029",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 44
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Republish order to x-voucher in positive scenario",
        "description": "",
        "id": "republish-order-to-x-voucher-in-point-redemption;republish-order-to-x-voucher-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14008600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1132400,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1840100,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data memberId with value \"properties(default.memberId)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "properties(default.memberId)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 156405700,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1199900,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1173900,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14241600,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 231271400,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] get one random applicable voucherId and voucherPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableVoucherResponse()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4393900,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "request($[\u0027couponPoint\u0027])",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2288400,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 174571100,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 803800,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 184380700,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] member acquired point should be increased by \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 58
                }
              ],
              "location": "MemberCardSteps.xLoyaltyMemberAcquiredPointShouldBeIncreasedBy(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 964768900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1494500,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] prepare request data point with value \"request($[\u0027couponPoint\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "point",
                  "offset": 33
                },
                {
                  "val": "request($[\u0027couponPoint\u0027])",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4122200,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176149200,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] try GET request to \"membercard/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "membercard/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "memberId",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 977500,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] assign previous response data to memberCardResponse",
            "match": {
              "arguments": [
                {
                  "val": "memberCardResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 775200,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12111300,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response data \"response($[\u0027memberCardResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027memberCardResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 71
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1656000,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 388034900,
              "status": "passed"
            },
            "line": 37,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 660500,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1256863800,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] get historyId from member latest point redemption history",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetObjectIdFromMemberLatestPointRedemptionHistory()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1283361000,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] delete latest orders data from x-voucher by logonId",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyDeleteLatestOrdersDataFromXVoucherByLogonId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1070287000,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] delete latest vouchers event data by redemption historyId",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyDeleteLatestVouchersEventDataByRedemptionObjectId()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 383617400,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] try POST request to \"point/redeem/republishOrderToXVoucher\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/republishOrderToXVoucher",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "request($[\u0027loyaltyProgramCode\u0027])"
                ]
              },
              {
                "cells": [
                  "historyId",
                  "request($[\u0027historyId\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 978100,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RepublishOrderToXVoucherFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 58,
        "name": "Republish order to x-voucher when loyaltyProgramCode is empty",
        "description": "",
        "id": "republish-order-to-x-voucher-in-point-redemption;republish-order-to-x-voucher-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9495000,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 188002800,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] try POST request to \"point/redeem/republishOrderToXVoucher\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/republishOrderToXVoucher",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  ""
                ]
              },
              {
                "cells": [
                  "historyId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1082400,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RepublishOrderToXVoucherFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 59,
        "name": "Republish order to x-voucher when loyaltyProgramCode is not found",
        "description": "",
        "id": "republish-order-to-x-voucher-in-point-redemption;republish-order-to-x-voucher-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8546400,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 153045800,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] try POST request to \"point/redeem/republishOrderToXVoucher\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/republishOrderToXVoucher",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "historyId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 903300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RepublishOrderToXVoucherFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 60,
        "name": "Republish order to x-voucher when historyId is empty",
        "description": "",
        "id": "republish-order-to-x-voucher-in-point-redemption;republish-order-to-x-voucher-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9449600,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 214619400,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] try POST request to \"point/redeem/republishOrderToXVoucher\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/republishOrderToXVoucher",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "historyId",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 668200,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RepublishOrderToXVoucherFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 61,
        "name": "Republish order to x-voucher when historyId is not found",
        "description": "",
        "id": "republish-order-to-x-voucher-in-point-redemption;republish-order-to-x-voucher-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7487700,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 154468500,
              "status": "passed"
            },
            "line": 51,
            "name": "[x-loyalty] try POST request to \"point/redeem/republishOrderToXVoucher\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/republishOrderToXVoucher",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "loyaltyProgramCode",
                  "blibli_poin"
                ]
              },
              {
                "cells": [
                  "historyId",
                  "random(10)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1362300,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RepublishOrderToXVoucherFeature"
          },
          {
            "name": "@LoyaltyRedemption"
          },
          {
            "name": "@TestSuiteId\u003d13287029"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Republish order to x-voucher in point redemption",
    "description": "",
    "id": "republish-order-to-x-voucher-in-point-redemption",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/pointredemption/RepublishOrderToXVoucher.feature",
    "tags": [
      {
        "name": "@RepublishOrderToXVoucherFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltyRedemption",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 34
        }
      },
      {
        "name": "@TestSuiteId\u003d13287029",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 53
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Delete system parameter in positive scenario",
        "description": "",
        "id": "delete-system-parameter-in-loyalty-program;delete-system-parameter-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9227700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1165500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data variable with value \"(SYSTEM_,random(5))\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "(SYSTEM_,random(5))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4403800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "some value",
                  "some new description"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2456800,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 152447100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1048900,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 155161300,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 651300,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 20,
        "name": "Delete already deleted system parameter",
        "description": "",
        "id": "delete-system-parameter-in-loyalty-program;delete-already-deleted-system-parameter",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10126900,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1071500,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] prepare request data variable with value \"(SYSTEM_,random(5))\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "(SYSTEM_,random(5))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3289200,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "some value",
                  "some new description"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1317100,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 129105200,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 996200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 164110400,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1133700,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 162974300,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1249700,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 47,
        "name": "Delete system parameter when variable is empty",
        "description": "",
        "id": "delete-system-parameter-in-loyalty-program;delete-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10106400,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 134875400,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1155400,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 48,
        "name": "Delete system parameter when variable is not found",
        "description": "",
        "id": "delete-system-parameter-in-loyalty-program;delete-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 13011300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 139858800,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "random(6)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 932200,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@DeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Delete system parameter in loyalty program",
    "description": "",
    "id": "delete-system-parameter-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/systemparameter/DeleteSystemParameter.feature",
    "tags": [
      {
        "name": "@DeleteSystemParameterFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltySystemParameter",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287032",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 55
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Find one system parameter in positive scenario",
        "description": "",
        "id": "find-one-system-parameter-in-system-parameter;find-one-system-parameter-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7872600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 171386100,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "EXPIRING_POINTS_NOTIFICATION_FROM"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1144000,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 774100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11770000,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 76
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@FindOneSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 25,
        "name": "Find one system parameter when variable is not found",
        "description": "",
        "id": "find-one-system-parameter-in-system-parameter;find-one-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11270300,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 155393400,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "random(10)"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1249600,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 26,
        "name": "Find one system parameter when variable is empty",
        "description": "",
        "id": "find-one-system-parameter-in-system-parameter;find-one-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5555700,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 147811000,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  ""
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 912400,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 27,
        "name": "Find one system parameter when variable and markForDelete is not match",
        "description": "",
        "id": "find-one-system-parameter-in-system-parameter;find-one-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7438800,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 252795800,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "EXPIRING_POINTS_NOTIFICATION_FROM"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 768000,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@FindOneSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Find one system parameter in system parameter",
    "description": "",
    "id": "find-one-system-parameter-in-system-parameter",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/systemparameter/FindOneSystemParameter.feature",
    "tags": [
      {
        "name": "@FindOneSystemParameterFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltySystemParameter",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 32
        }
      },
      {
        "name": "@TestSuiteId\u003d13287032",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 56
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Revert delete system parameter in positive scenario",
        "description": "",
        "id": "revert-delete-system-parameter-in-loyalty-program;revert-delete-system-parameter-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7889000,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1182500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data variable with value \"(SYSTEM_,random(5))\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "(SYSTEM_,random(5))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2512700,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "some value",
                  "some new description"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1223200,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 165679400,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1200400,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 162210200,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1298700,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1102300,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13957600,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 197029300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1038800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 186192200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "true"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 985600,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 153523100,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] try PUT request to \"sysparameter/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2052300,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 165703300,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1380700,
              "status": "passed"
            },
            "line": 38,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1084200,
              "status": "passed"
            },
            "line": 39,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34162700,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 191733500,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 687600,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 47,
        "name": "Revert delete active system parameter",
        "description": "",
        "id": "revert-delete-system-parameter-in-loyalty-program;revert-delete-active-system-parameter",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7725800,
              "status": "passed"
            },
            "line": 48,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 973900,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] prepare request data variable with value \"(SYSTEM_,random(5))\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "(SYSTEM_,random(5))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2744700,
              "status": "passed"
            },
            "line": 50,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "some value",
                  "some new description"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1684400,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 135857900,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 975700,
              "status": "passed"
            },
            "line": 55,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 146510200,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1048300,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 750500,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11751400,
              "status": "passed"
            },
            "line": 62,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 185917900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] try PUT request to \"sysparameter/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1181100,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 173712100,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1084500,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 81,
        "name": "Revert delete system parameter when variable is empty",
        "description": "",
        "id": "revert-delete-system-parameter-in-loyalty-program;revert-delete-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9257600,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 157987200,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] try PUT request to \"sysparameter/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  ""
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 758600,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 82,
        "name": "Revert delete system parameter when variable is not found",
        "description": "",
        "id": "revert-delete-system-parameter-in-loyalty-program;revert-delete-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6451900,
              "status": "passed"
            },
            "line": 74,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 176516900,
              "status": "passed"
            },
            "line": 75,
            "name": "[x-loyalty] try PUT request to \"sysparameter/revertDelete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/revertDelete",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "random(6)"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 823100,
              "status": "passed"
            },
            "line": 78,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@RevertDeleteSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Revert delete system parameter in loyalty program",
    "description": "",
    "id": "revert-delete-system-parameter-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/systemparameter/RevertDeleteSystemParameter.feature",
    "tags": [
      {
        "name": "@RevertDeleteSystemParameterFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltySystemParameter",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 37
        }
      },
      {
        "name": "@TestSuiteId\u003d13287032",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 61
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Save new system parameter in positive scenario",
        "description": "",
        "id": "save-system-parameter-in-loyalty-program;save-new-system-parameter-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9456600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 802500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data variable with value \"(SYSTEM_,random(5))\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "(SYSTEM_,random(5))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1662800,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "some value",
                  "some new description"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1568100,
              "status": "passed"
            },
            "line": 11,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173177600,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1159900,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 188185700,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1014200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 771800,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12455800,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 176094900,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 862800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 27,
        "name": "Save system parameter when variable already exists",
        "description": "",
        "id": "save-system-parameter-in-loyalty-program;save-system-parameter-when-variable-already-exists",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8225000,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1459000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data variable with value \"(SYSTEM_,random(5))\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "(SYSTEM_,random(5))",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2871600,
              "status": "passed"
            },
            "line": 30,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "some value",
                  "some new description"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1356600,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 309914100,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1164600,
              "status": "passed"
            },
            "line": 35,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 206515500,
              "status": "passed"
            },
            "line": 36,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1172300,
              "status": "passed"
            },
            "line": 40,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 680800,
              "status": "passed"
            },
            "line": 41,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8481200,
              "status": "passed"
            },
            "line": 42,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1648600,
              "status": "passed"
            },
            "line": 43,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 165456600,
              "status": "passed"
            },
            "line": 44,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 861700,
              "status": "passed"
            },
            "line": 45,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 161298400,
              "status": "passed"
            },
            "line": 46,
            "name": "[x-loyalty] try DELETE request to \"sysparameter/delete\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "DELETE",
                  "offset": 16
                },
                {
                  "val": "sysparameter/delete",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 697100,
              "status": "passed"
            },
            "line": 49,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 62,
        "name": "Save system parameter when variable is empty",
        "description": "",
        "id": "save-system-parameter-in-loyalty-program;save-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9004700,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2414500,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "",
                  "random(5)",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1377200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 161667500,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1150700,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 63,
        "name": "Save system parameter when value is empty",
        "description": "",
        "id": "save-system-parameter-in-loyalty-program;save-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11103300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1780300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1491200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141481200,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 682400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 64,
        "name": "Save system parameter when body is empty",
        "description": "",
        "id": "save-system-parameter-in-loyalty-program;save-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9024300,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1870200,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1050200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173503500,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 973400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 65,
        "name": "Save system parameter when body is not valid",
        "description": "",
        "id": "save-system-parameter-in-loyalty-program;save-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8968900,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1766300,
              "status": "passed"
            },
            "line": 54,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1252200,
              "status": "passed"
            },
            "line": 57,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 195828200,
              "status": "passed"
            },
            "line": 58,
            "name": "[x-loyalty] try POST request to \"sysparameter/save\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "sysparameter/save",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 993400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@SaveSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Save system parameter in loyalty program",
    "description": "",
    "id": "save-system-parameter-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/systemparameter/SaveSystemParameter.feature",
    "tags": [
      {
        "name": "@SaveSystemParameterFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltySystemParameter",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 29
        }
      },
      {
        "name": "@TestSuiteId\u003d13287032",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 53
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Update system parameter in positive scenario",
        "description": "",
        "id": "update-system-parameter-in-loyalty-program;update-system-parameter-in-positive-scenario",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11008700,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1083200,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data variable with value \"EXPIRING_POINTS_NOTIFICATION_FROM\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "EXPIRING_POINTS_NOTIFICATION_FROM",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1091100,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] prepare request data value with value \"NEW TEST VALUE\"",
            "match": {
              "arguments": [
                {
                  "val": "value",
                  "offset": 33
                },
                {
                  "val": "NEW TEST VALUE",
                  "offset": 51
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 147622000,
              "status": "passed"
            },
            "line": 9,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 741100,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 503400,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8972000,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 67
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2440600,
              "status": "passed"
            },
            "line": 16,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "request($[\u0027variable\u0027])",
                  "request($[\u0027value\u0027])",
                  "some new description"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1283700,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 208811100,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] try PUT request to \"sysparameter/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 635400,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 186501500,
              "status": "passed"
            },
            "line": 22,
            "name": "[x-loyalty] system parameter should be updated",
            "match": {
              "location": "SystemParameterSteps.xLoyaltySystemParameterShouldBeUpdated()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 157683400,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] rollback system parameter",
            "match": {
              "location": "SystemParameterSteps.xLoyaltyRollbackSystemParameter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 866600,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 37,
        "name": "Update system parameter when variable is empty",
        "description": "",
        "id": "update-system-parameter-in-loyalty-program;update-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8377500,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1445500,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "",
                  "random(5)",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1101200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 148700800,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try PUT request to \"sysparameter/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1031100,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 38,
        "name": "Update system parameter when variable is not found",
        "description": "",
        "id": "update-system-parameter-in-loyalty-program;update-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8476400,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1841400,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "random(5)",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1758200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145485000,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try PUT request to \"sysparameter/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1867500,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 39,
        "name": "Update system parameter when value is empty",
        "description": "",
        "id": "update-system-parameter-in-loyalty-program;update-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10426200,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1994000,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1730500,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027systemParameterRequest\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027systemParameterRequest\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 166321200,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try PUT request to \"sysparameter/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1108700,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 40,
        "name": "Update system parameter when body is empty",
        "description": "",
        "id": "update-system-parameter-in-loyalty-program;update-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9641600,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2353500,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1333900,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare body request with value \"{}\"",
            "match": {
              "arguments": [
                {
                  "val": "{}",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 141000800,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try PUT request to \"sysparameter/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1058700,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 41,
        "name": "Update system parameter when body is not valid",
        "description": "",
        "id": "update-system-parameter-in-loyalty-program;update-system-parameter-when-\u003cidentifier\u003e-is-\u003cvalue\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9932400,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1946100,
              "status": "passed"
            },
            "line": 29,
            "name": "[x-loyalty] prepare request data systemParameterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "variable",
                  "value",
                  "description"
                ]
              },
              {
                "cells": [
                  "random(5)",
                  "",
                  "some desc"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 908200,
              "status": "passed"
            },
            "line": 32,
            "name": "[x-loyalty] prepare body request with value \"abc\"",
            "match": {
              "arguments": [
                {
                  "val": "abc",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 145853400,
              "status": "passed"
            },
            "line": 33,
            "name": "[x-loyalty] try PUT request to \"sysparameter/update\"",
            "match": {
              "arguments": [
                {
                  "val": "PUT",
                  "offset": 16
                },
                {
                  "val": "sysparameter/update",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 829300,
              "status": "passed"
            },
            "line": 34,
            "name": "[x-loyalty] response statusCode should be 400 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@UpdateSystemParameterFeature"
          },
          {
            "name": "@LoyaltySystemParameter"
          },
          {
            "name": "@TestSuiteId\u003d13287032"
          },
          {
            "name": "@Negative"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Update system parameter in loyalty program",
    "description": "",
    "id": "update-system-parameter-in-loyalty-program",
    "keyword": "Feature",
    "uri": "src/test/resources/features/component/systemparameter/UpdateSystemParameter.feature",
    "tags": [
      {
        "name": "@UpdateSystemParameterFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@LoyaltySystemParameter",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 31
        }
      },
      {
        "name": "@TestSuiteId\u003d13287032",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 55
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 127,
        "name": "Redeem voucher when reaching global limit for logon id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10993500,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1617400,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1078700,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2839400,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2596000,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1316004900,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1165300,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2139100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1017100,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 378864600,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4189700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1419900,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 193972300,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 633900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1008310900,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1261400,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 813200,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1750900,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1823000,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"LOGON_ID\"]"
            }
          },
          {
            "result": {
              "duration": 1167700,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"GLOBAL\"]"
            }
          },
          {
            "result": {
              "duration": 3289800,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3160000,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1880900,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 270078700,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 798300,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 547800,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13659600,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1452500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1976100,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6642500,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2057400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 877387000,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 742100,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3910800,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2040300,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 267144500,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 865100,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 923700,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 38619500,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_MAX_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Max Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1031455300,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 32364400,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1134592600,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 23352100,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1015494600,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 1054468200,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 128,
        "name": "Redeem voucher when reaching global limit for device id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8641100,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1104800,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 875000,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2057600,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1813700,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1266986700,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 809000,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1531400,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 803300,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 206336400,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4992300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2243400,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 261082000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1218900,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1004230700,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1306400,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 781400,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1029700,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1110600,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"DEVICE_ID\"]"
            }
          },
          {
            "result": {
              "duration": 811900,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"GLOBAL\"]"
            }
          },
          {
            "result": {
              "duration": 2009900,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1725300,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1178400,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 246054700,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 673900,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 501400,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13953700,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1035200,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 965500,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6101300,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1732000,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 612332900,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 950600,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4151200,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1349200,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184530700,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 726600,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 693400,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34377200,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_MAX_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Max Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1046492800,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 36944800,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1091365700,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 25470300,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 964651700,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 965746100,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 129,
        "name": "Redeem voucher when reaching global and period limit for logon id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9513700,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 900100,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1089300,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1542900,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1293000,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1407920200,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 967600,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1871000,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1090200,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 243305100,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6007700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1762600,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 215973000,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 923400,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 960004500,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1517200,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1093000,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1356500,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1146900,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"LOGON_ID\"]"
            }
          },
          {
            "result": {
              "duration": 734100,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"GLOBAL\",\"PERIOD\"]"
            }
          },
          {
            "result": {
              "duration": 2111700,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1787600,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1080500,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 201838800,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 817000,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 531400,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11235900,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1068400,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 996100,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3844300,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1406700,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 763206200,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 849100,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5675600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1799400,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 302433500,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2080000,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1197400,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 41669700,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_MAX_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Max Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1046655300,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 33999400,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1115657200,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 46124400,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 975613600,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 959450600,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 130,
        "name": "Redeem voucher when reaching global and period limit for device id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9019800,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1117400,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 860000,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1342500,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1412000,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1517565500,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 823200,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1320100,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1076400,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 288375000,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4930700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2054800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 239351300,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1126000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1035619700,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1067100,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 708400,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1120500,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1400100,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"DEVICE_ID\"]"
            }
          },
          {
            "result": {
              "duration": 907900,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"GLOBAL\",\"PERIOD\"]"
            }
          },
          {
            "result": {
              "duration": 2277600,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2086300,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1316600,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162358400,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1078800,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 862000,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15578900,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1429600,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1396900,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6939300,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1748900,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 925224500,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 668800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3679900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1739200,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 235385800,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1025800,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 840300,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 56035800,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_MAX_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Max Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 937082500,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 28570700,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 950197800,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 36155700,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 921316600,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 972618100,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 131,
        "name": "Redeem voucher when reaching global and period limit for logon and device id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8399900,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1400900,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1338400,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3155300,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2142000,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1214397900,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 858900,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1774600,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1172600,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 259515100,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5582700,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2470400,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 258554600,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 954200,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 919801100,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1775600,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 849100,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1799900,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1272600,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"LOGON_ID\",\"DEVICE_ID\"]"
            }
          },
          {
            "result": {
              "duration": 1213500,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"GLOBAL\",\"PERIOD\"]"
            }
          },
          {
            "result": {
              "duration": 2715300,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2725900,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1737500,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 182600000,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1022200,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 953500,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21769400,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1802400,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1559500,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6260400,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2021400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 606176800,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 819000,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3385500,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1363200,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 201866900,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 622600,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 500800,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33412800,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_MAX_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Max Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1009651800,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 32625800,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1071973200,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 36415700,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 952744600,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 1032488100,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 132,
        "name": "Redeem voucher when reaching period limit for logon id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9654500,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1169200,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 961600,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2428600,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2088300,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1051006000,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2261900,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2487000,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1530900,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 190477100,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5441600,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011700,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 225206200,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1111700,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 879845600,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1194900,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 773700,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1109000,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 808900,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"LOGON_ID\"]"
            }
          },
          {
            "result": {
              "duration": 1037500,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"PERIOD\"]"
            }
          },
          {
            "result": {
              "duration": 2652500,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1957700,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1220300,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 143482000,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 873300,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 601400,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11550700,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1045700,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 833100,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3253100,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 954500,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 708881500,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1090300,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4730400,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1620700,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 302982200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 672100,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 525300,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 38043900,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_TIME_RANGE_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Time Range Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1072946500,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 40837500,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1138695500,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 26613600,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1031587700,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 952377400,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 133,
        "name": "Redeem voucher when reaching period limit for device id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9691600,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1364200,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1205800,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2333800,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1946900,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2372886000,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 906500,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1210700,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 698300,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 212362100,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3877300,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1976700,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 173184300,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 783000,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 850356000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1455700,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1070200,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1098900,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 846200,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"DEVICE_ID\"]"
            }
          },
          {
            "result": {
              "duration": 648500,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"PERIOD\"]"
            }
          },
          {
            "result": {
              "duration": 2164700,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1882300,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1508600,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 155045200,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 598900,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 472400,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11639200,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1071000,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 882100,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4294800,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 897700,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 567145000,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1004100,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5041600,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1702400,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 266786900,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 850800,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1089100,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 45302700,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_TIME_RANGE_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Time Range Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 863309700,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 54927700,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1011933900,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 24767900,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1108927500,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 1091626100,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      },
      {
        "line": 134,
        "name": "Redeem voucher when reaching period limit for logon and device id",
        "description": "",
        "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward;redeem-voucher-when-reaching-\u003ctype\u003e-limit-for-\u003cvalidation\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8744600,
              "status": "passed"
            },
            "line": 7,
            "name": "[py-common] using service with alias pycommon",
            "match": {
              "arguments": [
                {
                  "val": "pycommon",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1002600,
              "status": "passed"
            },
            "line": 8,
            "name": "[py-common] prepare request data memberId with value \"(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "memberId",
                  "offset": 33
                },
                {
                  "val": "(random(10,NUMERIC),_naz@,oneof(test,yunaz,ahoo,mailinator),.com)",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1145000,
              "status": "passed"
            },
            "line": 9,
            "name": "[py-common] prepare request data password with value \"testing123\"",
            "match": {
              "arguments": [
                {
                  "val": "password",
                  "offset": 33
                },
                {
                  "val": "testing123",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2111200,
              "status": "passed"
            },
            "line": 10,
            "name": "[py-common] prepare request data userRegisterRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "userRegisterRequest",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password",
                  "username"
                ]
              },
              {
                "cells": [
                  "request($[\u0027password\u0027])",
                  "request($[\u0027memberId\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1809100,
              "status": "passed"
            },
            "line": 13,
            "name": "[py-common] prepare body request with value \"request($[\u0027userRegisterRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027userRegisterRequest\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1589684900,
              "status": "passed"
            },
            "line": 14,
            "name": "[py-common] try POST request to \"/backend/common/users\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "/backend/common/users",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 529300,
              "status": "passed"
            },
            "line": 15,
            "name": "[py-common] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 809400,
              "status": "passed"
            },
            "line": 17,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 591800,
              "status": "passed"
            },
            "line": 18,
            "name": "[x-loyalty] prepare request data loyaltyProgramCode with value \"blibli_poin\"",
            "match": {
              "arguments": [
                {
                  "val": "loyaltyProgramCode",
                  "offset": 33
                },
                {
                  "val": "blibli_poin",
                  "offset": 64
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 251057000,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] get one random applicable couponId and couponPoint",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetOneRandomCouponIdFromApplicableCouponsResponse()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4820800,
              "status": "passed"
            },
            "line": 21,
            "name": "[x-loyalty] prepare request data acquireCustomPointRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "acquireCustomPointRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "loyaltyProgramCode",
                  "memberId",
                  "phoneNumberVerified",
                  "timestamp",
                  "expDays",
                  "pointValue",
                  "remarks"
                ]
              },
              {
                "cells": [
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "true",
                  "now()",
                  "60",
                  "x(+(1,3),request($[\u0027couponPoint\u0027]))",
                  "testing"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2292800,
              "status": "passed"
            },
            "line": 24,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027acquireCustomPointRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027acquireCustomPointRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 217717400,
              "status": "passed"
            },
            "line": 25,
            "name": "[x-loyalty] try POST request to \"customPoint/acquire\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "customPoint/acquire",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1008300,
              "status": "passed"
            },
            "line": 26,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1127000000,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] get current id from member card data",
            "match": {
              "location": "NeoLoyaltySteps.xLoyaltyGetCurretnIdFromMemberCardData()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1970000,
              "status": "passed"
            },
            "line": 29,
            "name": "[reward-transaction] using service with alias rewardtransaction",
            "match": {
              "arguments": [
                {
                  "val": "rewardtransaction",
                  "offset": 46
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1235900,
              "status": "passed"
            },
            "line": 30,
            "name": "[reward-transaction] prepare request data deviceId with value \"random(23,l_alphanumeric)\"",
            "match": {
              "arguments": [
                {
                  "val": "deviceId",
                  "offset": 42
                },
                {
                  "val": "random(23,l_alphanumeric)",
                  "offset": 63
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1323100,
              "status": "passed"
            },
            "line": 31,
            "name": "[reward-transaction] prepare request data voucherSku with value \"request($[\u0027couponId\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "voucherSku",
                  "offset": 42
                },
                {
                  "val": "request($[\u0027couponId\u0027])",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 911400,
              "status": "passed"
            },
            "line": 32,
            "name": "[reward-transaction] prepare request data validations with value :",
            "match": {
              "arguments": [
                {
                  "val": "validations",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 33,
              "value": "[\"LOGON_ID\",\"DEVICE_ID\"]"
            }
          },
          {
            "result": {
              "duration": 1591500,
              "status": "passed"
            },
            "line": 36,
            "name": "[reward-transaction] prepare request data types with value :",
            "match": {
              "arguments": [
                {
                  "val": "types",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 37,
              "value": "[\"PERIOD\"]"
            }
          },
          {
            "result": {
              "duration": 2100200,
              "status": "passed"
            },
            "line": 40,
            "name": "[reward-transaction] prepare request data maximumConfiguration with value",
            "match": {
              "arguments": [
                {
                  "val": "maximumConfiguration",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "total",
                  "totalPerPeriod",
                  "period",
                  "validation",
                  "type"
                ]
              },
              {
                "cells": [
                  "3",
                  "3",
                  "7",
                  "request($[\u0027validations\u0027])",
                  "request($[\u0027types\u0027])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2600800,
              "status": "passed"
            },
            "line": 43,
            "name": "[reward-transaction] prepare request data createRuleRequest with value",
            "match": {
              "arguments": [
                {
                  "val": "createRuleRequest",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "voucherSku",
                  "maximumConfiguration"
                ]
              },
              {
                "cells": [
                  "request($[\u0027voucherSku\u0027])",
                  "request($[\u0027maximumConfiguration\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1707600,
              "status": "passed"
            },
            "line": 46,
            "name": "[reward-transaction] prepare body request with value \"request($[\u0027createRuleRequest\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027createRuleRequest\u0027][0])",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 262751400,
              "status": "passed"
            },
            "line": 47,
            "name": "[reward-transaction] try POST request to \"rule/\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 25
                },
                {
                  "val": "rule/",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1497900,
              "status": "passed"
            },
            "line": 48,
            "name": "[reward-transaction] assign previous response data to ruleResponse",
            "match": {
              "arguments": [
                {
                  "val": "ruleResponse",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1798900,
              "status": "passed"
            },
            "line": 49,
            "name": "[reward-transaction] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 51
                },
                {
                  "val": "true",
                  "offset": 77
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21966400,
              "status": "passed"
            },
            "line": 50,
            "name": "[reward-transaction] response data \"response($[\u0027ruleResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027ruleResponse\u0027])",
                  "offset": 36
                },
                {
                  "val": "should not",
                  "offset": 65
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1721500,
              "status": "passed"
            },
            "line": 52,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1908400,
              "status": "passed"
            },
            "line": 53,
            "name": "[x-loyalty] prepare request data variable with value",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "deviceId"
                ]
              },
              {
                "cells": [
                  "random(23)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8189900,
              "status": "passed"
            },
            "line": 56,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "3",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2153400,
              "status": "passed"
            },
            "line": 59,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 720747300,
              "status": "passed"
            },
            "line": 60,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 657800,
              "status": "passed"
            },
            "line": 61,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9909900,
              "status": "passed"
            },
            "line": 63,
            "name": "[x-loyalty] prepare request data pointRedemptionRequestList with value",
            "match": {
              "arguments": [
                {
                  "val": "pointRedemptionRequestList",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "couponId",
                  "loyaltyProgramCode",
                  "memberId",
                  "redeemQty",
                  "variables"
                ]
              },
              {
                "cells": [
                  "request($[\u0027couponId\u0027])",
                  "request($[\u0027loyaltyProgramCode\u0027])",
                  "request($[\u0027memberId\u0027])",
                  "1",
                  "request($[\u0027variable\u0027][0])"
                ]
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2813900,
              "status": "passed"
            },
            "line": 66,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027pointRedemptionRequestList\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027pointRedemptionRequestList\u0027][0])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 214703200,
              "status": "passed"
            },
            "line": 67,
            "name": "[x-loyalty] try POST request to \"point/redeem/redeemCoupon\"",
            "match": {
              "arguments": [
                {
                  "val": "POST",
                  "offset": 16
                },
                {
                  "val": "point/redeem/redeemCoupon",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 687800,
              "status": "passed"
            },
            "line": 68,
            "name": "[x-loyalty] assign previous response data to baseResponse",
            "match": {
              "arguments": [
                {
                  "val": "baseResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 798400,
              "status": "passed"
            },
            "line": 69,
            "name": "[x-loyalty] response statusCode should be 200 and success should be false",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "false",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 48107700,
              "status": "passed"
            },
            "line": 70,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorCode\u0027])",
                  "EQUAL",
                  "REACH_TIME_RANGE_LIMIT"
                ]
              },
              {
                "cells": [
                  "response($[\u0027baseResponse\u0027][\u0027errorMessage\u0027])",
                  "EQUAL",
                  "Reach Time Range Limit"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 952548600,
              "status": "passed"
            },
            "line": 76,
            "name": "[x-loyalty] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 77,
              "value": "  mongo(\n    db(xloyalty),\n    collection(lyt_point_redemption_history),\n    find(({\n      memberCardId : \u0027,request($[\u0027memberObjectId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 32290500,
              "status": "passed"
            },
            "line": 86,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 951251400,
              "status": "passed"
            },
            "line": 90,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 91,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_history),\n    find(({\n      voucherSku : \u0027,request($[\u0027voucherSku\u0027]),!(\u0027,logonId:\u0027),request($[\u0027memberId\u0027]),\u0027\n    }))\n  )"
            }
          },
          {
            "result": {
              "duration": 63185600,
              "status": "passed"
            },
            "line": 100,
            "name": "[reward-transaction] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "response($[\u0027dbResponse\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "sizeof(response($[\u0027dbResponse\u0027]))",
                  "EQUAL",
                  "3"
                ]
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1056611400,
              "status": "passed"
            },
            "line": 105,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "When ",
            "doc_string": {
              "line": 106,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          },
          {
            "result": {
              "duration": 1115399500,
              "status": "passed"
            },
            "line": 115,
            "name": "[reward-transaction] assign response data dbResponse with value :",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 42
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponseFromMultiline(String,String)"
            },
            "keyword": "And ",
            "doc_string": {
              "line": 116,
              "value": "  mongo(\n    db(rewardtransaction),\n    collection(redemption_rule_history),\n    delete({\n      variable : \u0027,request($[\u0027voucherSku\u0027]),\u0027\n    })\n  )"
            }
          }
        ],
        "tags": [
          {
            "name": "@RedeemVoucherWithRewardTransactionFeature"
          },
          {
            "name": "@TestSuiteId\u003d13843962"
          },
          {
            "name": "@Positive"
          },
          {
            "name": "@Component"
          }
        ]
      }
    ],
    "name": "Check integration between neoloyalty and reward transaction when redeeming reward",
    "description": "",
    "id": "check-integration-between-neoloyalty-and-reward-transaction-when-redeeming-reward",
    "keyword": "Feature",
    "uri": "src/test/resources/features/regression/reward-transaction/RedeemVoucher.feature",
    "tags": [
      {
        "name": "@RedeemVoucherWithRewardTransactionFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@TestSuiteId\u003d13843962",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 44
        }
      }
    ]
  }
]