[
  {
    "line": 2,
    "elements": [
      {
        "line": 5,
        "name": "Test defined API",
        "description": "",
        "id": "test-feature;test-defined-api",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7115287600,
              "status": "passed"
            },
            "line": 6,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 568857500,
              "status": "passed"
            },
            "line": 7,
            "name": "[x-loyalty] prepare request data variable with value \"EXPIRING_POINTS_NOTIFICATION_FROM\"",
            "match": {
              "arguments": [
                {
                  "val": "variable",
                  "offset": 33
                },
                {
                  "val": "EXPIRING_POINTS_NOTIFICATION_FROM",
                  "offset": 54
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2055643200,
              "status": "passed"
            },
            "line": 8,
            "name": "[x-loyalty] try GET request to \"sysparameter/findOne\" with parameter",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 16
                },
                {
                  "val": "sysparameter/findOne",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithParameter(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ]
              },
              {
                "cells": [
                  "variable",
                  "request($[\u0027variable\u0027])"
                ]
              },
              {
                "cells": [
                  "markForDelete",
                  "false"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1554100,
              "status": "passed"
            },
            "line": 12,
            "name": "[x-loyalty] assign previous response data to systemParameterResponse",
            "match": {
              "arguments": [
                {
                  "val": "systemParameterResponse",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 31430700,
              "status": "passed"
            },
            "line": 13,
            "name": "[x-loyalty] response statusCode should be 200 and success should be true",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 42
                },
                {
                  "val": "true",
                  "offset": 68
                }
              ],
              "location": "ApiBaseSteps.statusCodeAndSuccessShouldeBe(Integer,Boolean)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16504500,
              "status": "passed"
            },
            "line": 14,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027][\u0027value\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027][\u0027value\u0027])",
                  "offset": 27
                },
                {
                  "val": "should not",
                  "offset": 76
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3678000,
              "status": "passed"
            },
            "line": 15,
            "name": "[x-loyalty] response data \"response($[\u0027systemParameterResponse\u0027][\u0027value\u0027][\u0027variable\u0027])\" should equal with data \"request($[\u0027variable\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027systemParameterResponse\u0027][\u0027value\u0027][\u0027variable\u0027])",
                  "offset": 27
                },
                {
                  "val": "should",
                  "offset": 88
                },
                {
                  "val": "request($[\u0027variable\u0027])",
                  "offset": 112
                }
              ],
              "location": "ApiBaseSteps.dataShouldEqualTo(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestApi"
          }
        ]
      },
      {
        "line": 18,
        "name": "Test the data",
        "description": "",
        "id": "test-feature;test-the-data",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 18337400,
              "status": "passed"
            },
            "line": 19,
            "name": "[x-loyalty] using service with alias xloyalty",
            "match": {
              "arguments": [
                {
                  "val": "xloyalty",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12141400,
              "status": "passed"
            },
            "line": 20,
            "name": "[x-loyalty] prepare request data var with value",
            "match": {
              "arguments": [
                {
                  "val": "var",
                  "offset": 33
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "firstName",
                  "lastName",
                  "membershipNumber"
                ]
              },
              {
                "cells": [
                  "Yunaz",
                  "Gilang",
                  "random(10,NUMERIC)"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20763100,
              "status": "passed"
            },
            "line": 23,
            "name": "[x-loyalty] prepare request data baru from template \"PointRedemptionRequest\" with value",
            "match": {
              "arguments": [
                {
                  "val": "baru",
                  "offset": 33
                },
                {
                  "val": "PointRedemptionRequest",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataFromTemplate(String,String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "memberId",
                  "variables"
                ]
              },
              {
                "cells": [
                  "Chaotic things",
                  "request($[\u0027var\u0027][0])"
                ]
              },
              {
                "cells": [
                  "Chaotic things 2",
                  "request($[\u0027var\u0027][0])"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6207800,
              "status": "passed"
            },
            "line": 27,
            "name": "[x-loyalty] prepare body request with value \"request($[\u0027baru\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "request($[\u0027baru\u0027])",
                  "offset": 45
                }
              ],
              "location": "ApiBaseSteps.setBodyRequestSteps(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 137135000,
              "status": "passed"
            },
            "line": 28,
            "name": "[x-loyalty] do these validations",
            "match": {
              "location": "ApiBaseSteps.doTheseValidation(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "actual",
                  "validation",
                  "expectation"
                ]
              },
              {
                "cells": [
                  "request($[\u0027baru\u0027])",
                  "NOT_EMPTY",
                  "true"
                ]
              },
              {
                "cells": [
                  "request($[\u0027baru\u0027][*][\u0027variables\u0027][\u0027firstName\u0027])",
                  "CONTAINS",
                  "request($[\u0027var\u0027][0][\u0027firstName\u0027])"
                ]
              },
              {
                "cells": [
                  "request($[\u0027baru\u0027][*][\u0027variables\u0027][\u0027lastName\u0027])",
                  "NOT_CONTAINS",
                  "request($[\u0027var\u0027][0][\u0027firstName\u0027])"
                ]
              },
              {
                "cells": [
                  "request($[\u0027baru\u0027][*][\u0027variables\u0027][\u0027lastName\u0027])",
                  "MATCH_PATTERN",
                  "^[A-Za-z]+$"
                ]
              },
              {
                "cells": [
                  "request($[\u0027baru\u0027][*][\u0027variables\u0027][\u0027membershipNumber\u0027])",
                  "MATCH_PATTERN",
                  "^\\d{10}$"
                ]
              },
              {
                "cells": [
                  "request($[\u0027baru\u0027][0])",
                  "MATCH_SCHEMA",
                  "PointRedemptionRequestSchema"
                ]
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestData"
          }
        ]
      },
      {
        "line": 38,
        "name": "Test using desktop and mobile browser",
        "description": "",
        "id": "test-feature;test-using-desktop-and-mobile-browser",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3353655300,
              "status": "passed"
            },
            "line": 39,
            "name": "yunaz using chrome in mobile",
            "match": {
              "arguments": [
                {
                  "val": "yunaz",
                  "offset": 0
                },
                {
                  "val": "chrome",
                  "offset": 12
                },
                {
                  "val": "mobile",
                  "offset": 22
                }
              ],
              "location": "WebBaseSteps.actorNamedUsingDevice(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2317685600,
              "status": "passed"
            },
            "line": 40,
            "name": "yunaz open \"google\" page",
            "match": {
              "arguments": [
                {
                  "val": "google",
                  "offset": 12
                }
              ],
              "location": "WebBaseSteps.actorOpenPage(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 37670800,
              "status": "passed"
            },
            "line": 41,
            "name": "yunaz is in \"google\" page",
            "match": {
              "arguments": [
                {
                  "val": "google",
                  "offset": 13
                }
              ],
              "location": "WebBaseSteps.actorIsIn(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3033667800,
              "status": "passed"
            },
            "line": 42,
            "name": "yunaz enter value \"Yunaz Gilang\" on \"search field\"",
            "match": {
              "arguments": [
                {
                  "val": "Yunaz Gilang",
                  "offset": 19
                },
                {
                  "val": "search field",
                  "offset": 37
                }
              ],
              "location": "WebBaseSteps.actorEnterValue(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 256747100,
              "status": "passed"
            },
            "line": 43,
            "name": "yunaz should see \"search results\" is displayed",
            "match": {
              "arguments": [
                {
                  "val": "search results",
                  "offset": 18
                },
                {
                  "val": "displayed",
                  "offset": 37
                }
              ],
              "location": "WebBaseSteps.actorShouldSee(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7697783300,
              "status": "passed"
            },
            "line": 44,
            "name": "yunaz using firefox in desktop",
            "match": {
              "arguments": [
                {
                  "val": "yunaz",
                  "offset": 0
                },
                {
                  "val": "firefox",
                  "offset": 12
                },
                {
                  "val": "desktop",
                  "offset": 23
                }
              ],
              "location": "WebBaseSteps.actorNamedUsingDevice(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1191004200,
              "status": "passed"
            },
            "line": 45,
            "name": "yunaz open \"google\" page",
            "match": {
              "arguments": [
                {
                  "val": "google",
                  "offset": 12
                }
              ],
              "location": "WebBaseSteps.actorOpenPage(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4906400,
              "status": "passed"
            },
            "line": 46,
            "name": "yunaz is in \"google\" page",
            "match": {
              "arguments": [
                {
                  "val": "google",
                  "offset": 13
                }
              ],
              "location": "WebBaseSteps.actorIsIn(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 542046100,
              "status": "passed"
            },
            "line": 47,
            "name": "yunaz enter value \"Yunaz Gilang\" on \"search field\"",
            "match": {
              "arguments": [
                {
                  "val": "Yunaz Gilang",
                  "offset": 19
                },
                {
                  "val": "search field",
                  "offset": 37
                }
              ],
              "location": "WebBaseSteps.actorEnterValue(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 269737100,
              "status": "passed"
            },
            "line": 48,
            "name": "yunaz should see \"search results\" is displayed",
            "match": {
              "arguments": [
                {
                  "val": "search results",
                  "offset": 18
                },
                {
                  "val": "displayed",
                  "offset": 37
                }
              ],
              "location": "WebBaseSteps.actorShouldSee(String,String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestUI"
          }
        ]
      },
      {
        "line": 51,
        "name": "Test get undefined API",
        "description": "",
        "id": "test-feature;test-get-undefined-api",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31806100,
              "status": "passed"
            },
            "line": 52,
            "name": "API using service with alias test",
            "match": {
              "arguments": [
                {
                  "val": "test",
                  "offset": 29
                }
              ],
              "location": "ApiBaseSteps.initService(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 466606600,
              "status": "passed"
            },
            "line": 53,
            "name": "API try GET request to \"https://jsonplaceholder.typicode.com/todos/1\"",
            "match": {
              "arguments": [
                {
                  "val": "GET",
                  "offset": 8
                },
                {
                  "val": "https://jsonplaceholder.typicode.com/todos/1",
                  "offset": 24
                }
              ],
              "location": "ApiBaseSteps.whenHitEndPointWithoutParameter(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4817300,
              "status": "passed"
            },
            "line": 54,
            "name": "API assign previous response data to data",
            "match": {
              "arguments": [
                {
                  "val": "data",
                  "offset": 37
                }
              ],
              "location": "ApiBaseSteps.assignResponseData(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestUndefinedApi"
          }
        ]
      },
      {
        "line": 57,
        "name": "Test execute SQL query",
        "description": "",
        "id": "test-feature;test-execute-sql-query",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 507963400,
              "status": "passed"
            },
            "line": 58,
            "name": "[idgenerator] prepare request data query with value :",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 35
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 59,
              "value": "sql(\n  db(idgenerator),\n  query(\n    SELECT c.relname AS sequence_name\n    FROM pg_class c\n    WHERE c.relkind \u003d \u0027S\u0027;\n  ))"
            }
          },
          {
            "result": {
              "duration": 18380400,
              "status": "passed"
            },
            "line": 68,
            "name": "[idgenerator] assign response data dbResponse with value \"request($[\u0027query\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 35
                },
                {
                  "val": "request($[\u0027query\u0027])",
                  "offset": 58
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14500700,
              "status": "passed"
            },
            "line": 69,
            "name": "[idgenerator] response data \"response($[\u0027dbResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027dbResponse\u0027])",
                  "offset": 29
                },
                {
                  "val": "should not",
                  "offset": 56
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestSql"
          }
        ]
      },
      {
        "line": 72,
        "name": "Test execute Mongo query",
        "description": "",
        "id": "test-feature;test-execute-mongo-query",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1352325900,
              "status": "passed"
            },
            "line": 73,
            "name": "[xloyalty] prepare request data query with value :",
            "match": {
              "arguments": [
                {
                  "val": "query",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataWithMultilineText(String,String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "line": 74,
              "value": "mongo(\n  db(xloyalty),\n  collection(lyt_system_parameter),\n  find({\n    variable : \"EXPIRING_POINTS_NOTIFICATION_MESSAGEID\"\n  }),\n  project({\n    variable : 1, value : 1, description : 1\n  })\n)"
            }
          },
          {
            "result": {
              "duration": 35969200,
              "status": "passed"
            },
            "line": 86,
            "name": "[xloyalty] assign response data dbResponse with value \"request($[\u0027query\u0027])\"",
            "match": {
              "arguments": [
                {
                  "val": "dbResponse",
                  "offset": 32
                },
                {
                  "val": "request($[\u0027query\u0027])",
                  "offset": 55
                }
              ],
              "location": "ApiBaseSteps.assignDataToResponse(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 16300500,
              "status": "passed"
            },
            "line": 87,
            "name": "[xloyalty] response data \"response($[\u0027dbResponse\u0027])\" should not be empty",
            "match": {
              "arguments": [
                {
                  "val": "response($[\u0027dbResponse\u0027])",
                  "offset": 26
                },
                {
                  "val": "should not",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.responseDataShouldNotBeEmpty(String,String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestMongoDb"
          }
        ]
      },
      {
        "line": 90,
        "name": "Test publish message to kafka",
        "description": "",
        "id": "test-feature;test-publish-message-to-kafka",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70583200,
              "status": "passed"
            },
            "line": 91,
            "name": "[x-member] prepare request data username with value \"(test_,random(5,NUMERIC),@gmail.com)\"",
            "match": {
              "arguments": [
                {
                  "val": "username",
                  "offset": 32
                },
                {
                  "val": "(test_,random(5,NUMERIC),@gmail.com)",
                  "offset": 53
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11789300,
              "status": "passed"
            },
            "line": 92,
            "name": "[x-member] prepare request data recoveryAccount with value",
            "match": {
              "arguments": [
                {
                  "val": "recoveryAccount",
                  "offset": 32
                }
              ],
              "location": "ApiBaseSteps.prepareRequestDataStep(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "logonId",
                  "timestamp"
                ]
              },
              {
                "cells": [
                  "request($[\u0027username\u0027])",
                  "timestamp()"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 327380700,
              "status": "passed"
            },
            "line": 95,
            "name": "[x-member] start kafka producer for quest",
            "match": {
              "arguments": [
                {
                  "val": "quest",
                  "offset": 36
                }
              ],
              "location": "KafkaBaseSteps.startKafkaProducer(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21571154200,
              "status": "passed"
            },
            "line": 96,
            "name": "[x-member] send batch message to kafka with data",
            "match": {
              "location": "KafkaBaseSteps.batchSendKafkaMessageToTopicWithData(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "topic",
                  "message"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              },
              {
                "cells": [
                  "recovery_account_granted",
                  "request($[\u0027recoveryAccount\u0027][0])"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 147715200,
              "status": "passed"
            },
            "line": 151,
            "name": "[x-member] stop kafka producer",
            "match": {
              "location": "KafkaBaseSteps.stopKafka()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12911500,
              "status": "passed"
            },
            "line": 152,
            "name": "[x-member] start kafka producer for quest",
            "match": {
              "arguments": [
                {
                  "val": "quest",
                  "offset": 36
                }
              ],
              "location": "KafkaBaseSteps.startKafkaProducer(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 258460600,
              "status": "passed"
            },
            "line": 153,
            "name": "[x-member] ubah send kafka message to topic \"recovery_account_granted\" with data \"request($[\u0027recoveryAccount\u0027][0])\"",
            "match": {
              "arguments": [
                {
                  "val": "recovery_account_granted",
                  "offset": 40
                },
                {
                  "val": "request($[\u0027recoveryAccount\u0027][0])",
                  "offset": 77
                }
              ],
              "location": "KafkaBaseSteps.sendKafkaMessageToTopicWithData(String,String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 100404200,
              "status": "passed"
            },
            "line": 154,
            "name": "[x-member] stop kafka producer",
            "match": {
              "location": "KafkaBaseSteps.stopKafka()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TestFeature"
          },
          {
            "name": "@TestSuiteId\u003d13842812"
          },
          {
            "name": "@TestKafka"
          }
        ]
      }
    ],
    "name": "Test feature",
    "description": "",
    "id": "test-feature",
    "keyword": "Feature",
    "uri": "src/test/resources/features/Test.feature",
    "tags": [
      {
        "name": "@TestFeature",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      },
      {
        "name": "@TestSuiteId\u003d13842812",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 14
        }
      }
    ]
  }
]